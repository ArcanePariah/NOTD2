include "TriggerLibs/NativeLib"
include "Lib09BE6BA8"
include "Lib1E3F036D"

include "Lib1765BC64_h"

//--------------------------------------------------------------------------------------------------
// Library: Enemy Triggers
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void lib1765BC64_InitLibraries () {
    libNtve_InitVariables();
    lib1E3F036D_InitVariables();
}

// Variable Initialization
bool lib1765BC64_InitVariables_completed = false;

void lib1765BC64_InitVariables () {
    if (lib1765BC64_InitVariables_completed) {
        return;
    }

    lib1765BC64_InitVariables_completed = true;

    lib1765BC64_gv_ambientWaveInfo = AIWaveInfoCreate();
    lib1765BC64_gv_ambientSpawners = UnitGroupEmpty();
    lib1765BC64_gv_aggressiveSpawners = UnitGroupEmpty();
    lib1765BC64_gv_horderSpawners = UnitGroupEmpty();
    lib1765BC64_gv_eltradWaitTimer = TimerCreate();
}

// Custom Script
//--------------------------------------------------------------------------------------------------
// Custom Script: Load AI
//--------------------------------------------------------------------------------------------------
include "TriggerLibs/DebugAI"
include "TriggerLibs/RequirementsAI"
include "TriggerLibs/BuildAI"
include "TriggerLibs/SharedAI"
include "TriggerLibs/Tactical/TacticalAI"

void lib1765BC64_InitCustomScript () {
}

// Functions
unit lib1765BC64_gf_PlaceZombieSpawner (string lp_spawnerType, int lp_zone, fixed lp_zoneSize, int lp_numberofZones) {
    // Variable Declarations
    point lv_spawnPoint;
    region lv_spawnZone;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_spawnPoint = Point(0.0, 0.0);
    lv_spawnZone = RegionRect((ModI(lp_zone, SquareRootI(lp_numberofZones))  * lp_zoneSize), ((lp_zone / SquareRootI(lp_numberofZones))  * lp_zoneSize), ((ModI(lp_zone, SquareRootI(lp_numberofZones))  + 1) * lp_zoneSize), (((lp_zone / SquareRootI(lp_numberofZones)) +1) * lp_zoneSize));

    // Implementation
    while (((PathingType(lv_spawnPoint) == c_pathingUnpathable) || (PathingType(lv_spawnPoint) != c_pathingGround) || (CliffLevel(lv_spawnPoint) != 1) || (lv_spawnPoint == Point(0.0, 0.0)))) {
        lv_spawnPoint = RegionRandomPoint(lv_spawnZone);
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, lp_spawnerType, 0, lib1E3F036D_gv_zombiePlayer, lv_spawnPoint);
    return UnitLastCreated();
}

void lib1765BC64_gf_ZoneSpawning (string lp_spawner, int lp_numberofSpawners) {
    // Variable Declarations
    int lv_currentZone;

    // Automatic Variable Declarations
    const int autoF38CB16A_ae = lib1765BC64_gv_spawnZones;
    const int autoF38CB16A_ai = 1;

    // Variable Initialization

    // Implementation
    while ((lp_numberofSpawners > 0)) {
        lv_currentZone = 1;
        for ( ; ( (autoF38CB16A_ai >= 0 && lv_currentZone <= autoF38CB16A_ae) || (autoF38CB16A_ai < 0 && lv_currentZone >= autoF38CB16A_ae) ) ; lv_currentZone += autoF38CB16A_ai ) {
            if ((libNtve_gf_RandomPercent() < 50.0)) {
                UnitGroupAdd(lib1765BC64_gv_ambientSpawners, lib1765BC64_gf_PlaceZombieSpawner(lp_spawner, (lv_currentZone - 1), (libNtve_gf_WidthOfRegion(RegionEntireMap()) / SquareRoot(lib1765BC64_gv_spawnZones)), lib1765BC64_gv_spawnZones));
                lp_numberofSpawners -= 1;
            }

        }
    }
}

trigger auto_lib1765BC64_gf_AttackWaveFromInfoImmediateGather_Trigger = null;
int auto_lib1765BC64_gf_AttackWaveFromInfoImmediateGather_lp_player;
point auto_lib1765BC64_gf_AttackWaveFromInfoImmediateGather_lp_rallyPoint;
waveinfo auto_lib1765BC64_gf_AttackWaveFromInfoImmediateGather_lp_waveInfo;
wavetarget auto_lib1765BC64_gf_AttackWaveFromInfoImmediateGather_lp_attackTarget;
int auto_lib1765BC64_gf_AttackWaveFromInfoImmediateGather_lp_attackTime;

void lib1765BC64_gf_AttackWaveFromInfoImmediateGather (int lp_player, point lp_rallyPoint, waveinfo lp_waveInfo, wavetarget lp_attackTarget, int lp_attackTime) {
    auto_lib1765BC64_gf_AttackWaveFromInfoImmediateGather_lp_player = lp_player;
    auto_lib1765BC64_gf_AttackWaveFromInfoImmediateGather_lp_rallyPoint = lp_rallyPoint;
    auto_lib1765BC64_gf_AttackWaveFromInfoImmediateGather_lp_waveInfo = lp_waveInfo;
    auto_lib1765BC64_gf_AttackWaveFromInfoImmediateGather_lp_attackTarget = lp_attackTarget;
    auto_lib1765BC64_gf_AttackWaveFromInfoImmediateGather_lp_attackTime = lp_attackTime;

    if (auto_lib1765BC64_gf_AttackWaveFromInfoImmediateGather_Trigger == null) {
        auto_lib1765BC64_gf_AttackWaveFromInfoImmediateGather_Trigger = TriggerCreate("auto_lib1765BC64_gf_AttackWaveFromInfoImmediateGather_TriggerFunc");
    }

    TriggerExecute(auto_lib1765BC64_gf_AttackWaveFromInfoImmediateGather_Trigger, false, false);
}

bool auto_lib1765BC64_gf_AttackWaveFromInfoImmediateGather_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_lib1765BC64_gf_AttackWaveFromInfoImmediateGather_lp_player;
    point lp_rallyPoint = auto_lib1765BC64_gf_AttackWaveFromInfoImmediateGather_lp_rallyPoint;
    waveinfo lp_waveInfo = auto_lib1765BC64_gf_AttackWaveFromInfoImmediateGather_lp_waveInfo;
    wavetarget lp_attackTarget = auto_lib1765BC64_gf_AttackWaveFromInfoImmediateGather_lp_attackTarget;
    int lp_attackTime = auto_lib1765BC64_gf_AttackWaveFromInfoImmediateGather_lp_attackTime;

    // Automatic Variable Declarations
    // Implementation
    AIAttackWaveSetGatherEarlyNoReplace(lp_player);
    AIWaveInfoAttack(lp_waveInfo, lp_player, lp_rallyPoint, lp_attackTarget, lp_attackTime);
    return true;
}

void lib1765BC64_gf_AIThinkEltrad (int lp_player, unit lp_aiUnit, unitgroup lp_scanGroup) {
    // Variable Declarations
    order lv_order;
    unitgroup lv_lowLifeGroup;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (lib1765BC64_gv_eltradFleeing && (DistanceBetweenPoints(UnitGetPosition(lp_aiUnit), UnitGetPosition(UnitGroupClosestToPoint(UnitGroupAlliance(lp_player, c_unitAllianceEnemy, RegionEntireMap(), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lp_aiUnit)))) < 28.0)) {
        return ;
    }
    else {
        lib1765BC64_gv_eltradFleeing = false;
        if ((UnitGetPropertyFixed(lp_aiUnit, c_unitPropLifePercent, c_unitPropCurrent) <= 70.0) && (UnitGetCustomValue(lp_aiUnit, 0) == 0.0)) {
            UnitSetCustomValue(lp_aiUnit, 0, 1.0);
            lib1765BC64_gv_eltradFleeing = true;
            TimerStart(lib1765BC64_gv_eltradWaitTimer, 60.0, false, c_timeGame);
            AIRemoveUnitFromAnyWaves(lp_aiUnit);
            AICastFlee(lp_aiUnit, UnitGroupClosestToPoint(UnitGroupAlliance(lp_player, c_unitAllianceEnemy, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lp_aiUnit)), 30, null);
            return ;
        }

        if ((UnitGetPropertyFixed(lp_aiUnit, c_unitPropLifePercent, c_unitPropCurrent) <= 35.0) && (UnitGetCustomValue(lp_aiUnit, 1) == 0.0)) {
            UnitSetCustomValue(lp_aiUnit, 1, 1.0);
            lib1765BC64_gv_eltradFleeing = true;
            TimerStart(lib1765BC64_gv_eltradWaitTimer, 45.0, false, c_timeGame);
            AIRemoveUnitFromAnyWaves(lp_aiUnit);
            AICastFlee(lp_aiUnit, UnitGroupClosestToPoint(UnitGroupAlliance(lp_player, c_unitAllianceEnemy, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lp_aiUnit)), 30, null);
            return ;
        }

        if ((TimerGetRemaining(lib1765BC64_gv_eltradWaitTimer) == 0.0) && (AIUnitGetWave(lp_aiUnit) == null)) {
            lv_lowLifeGroup = lib1765BC64_gf_GetLowLifeEnemies(UnitGroupAlliance(lp_player, c_unitAllianceEnemy, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 50.0);
            AIAttackWaveUseUnit(lp_player, lp_aiUnit);
            if ((UnitGroupCount(lv_lowLifeGroup, c_unitCountAlive) != 0)) {
                AIAttackWaveSetTargetUnit(lp_player, UnitGroupClosestToPoint(lv_lowLifeGroup, UnitGetPosition(lp_aiUnit)));
            }
            else {
                AIAttackWaveSetTargetUnitGroup(lp_player, UnitGroupAlliance(lp_player, c_unitAllianceEnemy, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            }
            AIAttackWaveSend(lp_player, 0, false);
        }
        else {
            if ((TimerGetRemaining(lib1765BC64_gv_eltradWaitTimer) != 0.0) && UnitTestState(lp_aiUnit, c_unitStateIdle)) {
                lv_order = lib1765BC64_gf_EltradWaiting(lp_player, lp_aiUnit, UnitGroup(null, lib1E3F036D_gv_zombiePlayer, RegionCircle(UnitGetPosition(lp_aiUnit), 10.0), UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                if ((lv_order == null)) {
                    return ;
                }

                if (UnitOrderIsValid(lp_aiUnit, lv_order)) {
                    libNtve_gf_AICast(lp_aiUnit, lv_order);
                }

            }

        }
    }
}

unitgroup lib1765BC64_gf_GetLowLifeEnemies (unitgroup lp_scanGroup, fixed lp_lifeThreshold) {
    // Variable Declarations
    unitgroup lv_lowlifeenemygroup;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup auto9F4C2D41_g;
    int auto9F4C2D41_u;

    // Variable Initialization
    lv_lowlifeenemygroup = UnitGroupEmpty();

    // Implementation
    auto9F4C2D41_g = lp_scanGroup;
    auto9F4C2D41_u = UnitGroupCount(auto9F4C2D41_g, c_unitCountAll);
    for (;; auto9F4C2D41_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto9F4C2D41_g, auto9F4C2D41_u);
        if (lv_unit == null) { break; }
        if ((UnitGetPropertyFixed(lv_unit, c_unitPropLifePercent, c_unitPropCurrent) <= lp_lifeThreshold)) {
            UnitGroupAdd(lv_lowlifeenemygroup, lv_unit);
        }

    }
    return lv_lowlifeenemygroup;
}

order lib1765BC64_gf_EltradWaiting (int lp_player, unit lp_aiUnit, unitgroup lp_scanGroup) {
    // Variable Declarations
    unitgroup lv_walkerstoEat;
    unit lv_target;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_walkerstoEat = UnitGroupEmpty();

    // Implementation
    UnitGroupAddUnitGroup(lv_walkerstoEat, UnitGroupFilter("MarsColonistFemale2", lp_player, lp_scanGroup, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_walkerstoEat, UnitGroupFilter("MarsColonistMale2", lp_player, lp_scanGroup, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_walkerstoEat, UnitGroupFilter("MarsColonistMaleMiner2", lp_player, lp_scanGroup, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_walkerstoEat, UnitGroupFilter("MarsPrisoner2", lp_player, lp_scanGroup, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_walkerstoEat, UnitGroupFilter("MarsScientist2", lp_player, lp_scanGroup, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    if ((UnitGroupCount(lv_walkerstoEat, c_unitCountAlive) == 0)) {
        return null;
    }

    lv_target = UnitGroupClosestToPoint(lv_walkerstoEat, UnitGetPosition(lp_aiUnit));
    return OrderTargetingUnit(AbilityCommand("attack", 0), lv_target);
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: Test Zombie Spawns
//--------------------------------------------------------------------------------------------------
bool lib1765BC64_gt_TestZombieSpawns_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_currentZombieGroup;

    // Automatic Variable Declarations
    unitgroup auto61F220DB_g;
    int auto61F220DB_u;
    unit auto61F220DB_var;

    // Variable Initialization
    lv_currentZombieGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((GameIsOnline() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib1765BC64_gf_ZoneSpawning("AmbientSpawner", 5);
    while (!((UnitGroupCount(UnitGroup(null, lib1E3F036D_gv_zombiePlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 116))) {
        Wait(1.0, c_timeGame);
    }
    auto61F220DB_g = UnitGroup(null, lib1E3F036D_gv_zombiePlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto61F220DB_u = UnitGroupCount(auto61F220DB_g, c_unitCountAll);
    for (;; auto61F220DB_u -= 1) {
        auto61F220DB_var = UnitGroupUnitFromEnd(auto61F220DB_g, auto61F220DB_u);
        if (auto61F220DB_var == null) { break; }
        if (UnitHasBehavior2(auto61F220DB_var, "AmbientSpawnMarker")) {
            UnitGroupAdd(lv_currentZombieGroup, auto61F220DB_var);
        }

    }
    TextExpressionSetToken("Param/Expression/lib_1765BC64_11D67AE2", "A", IntToText(UnitGroupCount(lv_currentZombieGroup, c_unitCountAlive)));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_1765BC64_11D67AE2"), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1765BC64_gt_TestZombieSpawns_Init () {
    lib1765BC64_gt_TestZombieSpawns = TriggerCreate("lib1765BC64_gt_TestZombieSpawns_Func");
    TriggerAddEventTimeElapsed(lib1765BC64_gt_TestZombieSpawns, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zombie Settings
//--------------------------------------------------------------------------------------------------
bool lib1765BC64_gt_ZombieSettings_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerDifficulty(lib1E3F036D_gv_zombiePlayer) == 2)) {
        CatalogFieldValueSet(c_gameCatalogBehavior, "ParasiteMoundSpawn", "Limit", lib1E3F036D_gv_zombiePlayer, "6");
        CatalogFieldValueSet(c_gameCatalogBehavior, "HeavyParasiteSpawnonDeath", "Modification.DeathResponse.Chance", lib1E3F036D_gv_zombiePlayer, "0.6");
        CatalogFieldValueSet(c_gameCatalogBehavior, "WalkerParasiteSpawnonDeath", "Modification.DeathResponse.Chance", lib1E3F036D_gv_zombiePlayer, "0.4");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1765BC64_gt_ZombieSettings_Init () {
    lib1765BC64_gt_ZombieSettings = TriggerCreate("lib1765BC64_gt_ZombieSettings_Func");
    TriggerAddEventTimeElapsed(lib1765BC64_gt_ZombieSettings, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Setup Ambient Wave
//--------------------------------------------------------------------------------------------------
bool lib1765BC64_gt_SetupAmbientWave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    AIWaveInfoAdd(lib1765BC64_gv_ambientWaveInfo, ("MarsColonistFemale2"), 5);
    AIWaveInfoAdd(lib1765BC64_gv_ambientWaveInfo, ("MarsColonistMale2"), 5);
    AIWaveInfoAdd(lib1765BC64_gv_ambientWaveInfo, ("MarsPrisoner2"), 5);
    AIWaveInfoAdd(lib1765BC64_gv_ambientWaveInfo, ("MarsScientist2"), 5);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1765BC64_gt_SetupAmbientWave_Init () {
    lib1765BC64_gt_SetupAmbientWave = TriggerCreate("lib1765BC64_gt_SetupAmbientWave_Func");
    TriggerAddEventGeneric(lib1765BC64_gt_SetupAmbientWave, lib1765BC64_gv_zombieIntialize);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Overgrown Damage Reduction
//--------------------------------------------------------------------------------------------------
bool lib1765BC64_gt_OvergrownDamageReduction_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_damageAbsorbed;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_damageAbsorbed = (EventUnitDamageAbsorbed() * 0.5);

    // Conditions
    if (testConds) {
        if (!(lib09BE6BA8_gf_AttackerbehindTarget(EventUnitDamageSourceUnit(), EventUnit(), 160.0))) {
            return false;
        }

        if (!((EventUnitDamageEffect() != "OvergrownPenetratingDamage"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitDamage(EventUnitDamageSourceUnit(), "OvergrownPenetratingDamage", EventUnit(), lv_damageAbsorbed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1765BC64_gt_OvergrownDamageReduction_Init () {
    lib1765BC64_gt_OvergrownDamageReduction = TriggerCreate("lib1765BC64_gt_OvergrownDamageReduction_Func");
    TriggerEnable(lib1765BC64_gt_OvergrownDamageReduction, false);
    TriggerAddEventUnitDamaged(lib1765BC64_gt_OvergrownDamageReduction, UnitRefFromVariable("lib1765BC64_gv_sarbus"), c_unitDamageTypeMelee, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(lib1765BC64_gt_OvergrownDamageReduction, UnitRefFromVariable("lib1765BC64_gv_sarbus"), c_unitDamageTypeRanged, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(lib1765BC64_gt_OvergrownDamageReduction, UnitRefFromVariable("lib1765BC64_gv_sarbus"), c_unitDamageTypeSplash, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Radiation Field Upgrade
//--------------------------------------------------------------------------------------------------
bool lib1765BC64_gt_RadiationFieldUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeUpgradeAddLevel(EventPlayer(), "RadiationFieldDamageIncrease", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1765BC64_gt_RadiationFieldUpgrade_Init () {
    lib1765BC64_gt_RadiationFieldUpgrade = TriggerCreate("lib1765BC64_gt_RadiationFieldUpgrade_Func");
    TriggerAddEventUnitAbility(lib1765BC64_gt_RadiationFieldUpgrade, null, AbilityCommand("EnergyDrain", 0), c_abilEffectStageFinish, false);
}

void lib1765BC64_InitTriggers () {
    lib1765BC64_gt_TestZombieSpawns_Init();
    lib1765BC64_gt_ZombieSettings_Init();
    lib1765BC64_gt_SetupAmbientWave_Init();
    lib1765BC64_gt_OvergrownDamageReduction_Init();
    lib1765BC64_gt_RadiationFieldUpgrade_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool lib1765BC64_InitLib_completed = false;

void lib1765BC64_InitLib () {
    if (lib1765BC64_InitLib_completed) {
        return;
    }

    lib1765BC64_InitLib_completed = true;

    lib1765BC64_InitLibraries();
    lib1765BC64_InitVariables();
    lib1765BC64_InitCustomScript();
    lib1765BC64_InitTriggers();
}

