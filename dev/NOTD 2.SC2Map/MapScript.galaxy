//==================================================================================================
// 
// Generated Map Script
// 
// Name:   NOTD 2
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "Lib09BE6BA8"
include "Lib1E3F036D"
include "LibC50FD636"
include "Lib1765BC64"
include "Lib840A968C"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    lib09BE6BA8_InitLib();
    lib1E3F036D_InitLib();
    libC50FD636_InitLib();
    lib1765BC64_InitLib();
    lib840A968C_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const fixed gv_bullyRegionSize = 20.0;
const string gv_ammoCollectionEvent = "Marine Ammo Collected";
const string gv_peacekeeperEvent = "Peacekeeper";
const string gv_holdOutEvent = "Holdout";
const string gv_civilianRescueEvent = "Rescue";
const string gv_extractionEvent = "Extraction";
const string gv_extractionFailureSignal = "ExtractFail";
const string gv_eltradSpawnSignal = "SpawnEltrad";
const string gv_communicationMissionSignal = "CommunicationMission";
const string gv_restorePowerMissionSignal = "RestorePower";
const string gv_sarbusSpawnSignal = "SarbusSpawn";
const fixed gv_distancetoDiscover = 3.0;
const string gv_investigationMissionSignal = "Investigation";
const string gv_tarionSpawnSignal = "TarionSpawn";
const string gv_monolithMissionSignal = "Monolith";
const string gv_rentodusSpawnSignal = "RentodusSpawn";

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
unit gv_registrationUnit;
bool gv_transmissionLock;
region[28] gv_bullyRegions;
int gv_recruitArrivalMissionToken;
int gv_headquartersBeacon;
int gv_normalArrivalMissionToken;
string[3] gv_civilianUnits;
unitgroup gv_peacekeepers;
unitgroup gv_civiliansPeacekeepers;
point gv_peacekeeperHoldout;
unit gv_chiefStrassner;
unit gv_sergeantLefty;
unit gv_officerSprecklin;
int gv_holdoutPing;
waveinfo gv_peacekeeperZombieWaves;
int gv_peacekeeperMissionToken;
int gv_civilianRescueMissionToken;
int gv_rescuePing;
point gv_civilianRescuePoint;
unitgroup gv_civiliansRescue;
unit gv_sergeantAscalon;
int gv_civilianRescueSuccess;
int gv_holdoutMissionToken;
int gv_extractionMissionToken;
wave gv_peacekeeperEscortWave;
int gv_extractionMissionState;
point gv_extractionLocation;
int gv_convoyPing;
int gv_extractionPointPing;
unitgroup gv_paratroopers;
unit gv_staffSergeantFenwick;
bool gv_fenwickSurvives;
int gv_numberofSurvivingParatroopers;
waveinfo gv_extractionWave;
unit gv_eltrad;
int gv_communicationArrayMissionToken;
timer gv_communicationArrayTimer;
int gv_communicationArrayTimerWindow;
int gv_communicationArraysCompleted;
int gv_communicationArraysToBeDeployed;
int[6] gv_communicationArrayLocationPings;
region[6] gv_communicationArrayLocations;
actor[6] gv_communicationArrayAreaIndicator;
int gv_communicationArraysDeployed;
int gv_communicationArrays;
int gv_armoryPing;
int gv_restorePowerMissionToken;
unit gv_reactor;
int gv_reactorPing;
unit gv_sarbus;
unit gv_sarbusCorpse;
int gv_sarbusPing;
int gv_investiagationMissionToken;
int gv_objectsofInterestUnreported;
timer gv_investigationIntialTimer;
timer gv_investigationFinalTimer;
bool gv_tX1Discovered;
int gv_investigationMissionState;
int gv_labEntrancePing;
int gv_tarionPing;
int gv_infestationResearchIndicator;
unit gv_tarion;
int gv_monolithMissionToken;
wave gv_zombieAssaultWave;
int gv_rentodusPing;
unit gv_rentodus;
bool gv_bossTracking;
unit gv_infestor;

void InitGlobals () {
    int init_i;

    gv_headquartersBeacon = c_invalidPingId;
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_civilianUnits[init_i] = "Civilian";
    }
    gv_peacekeepers = UnitGroupEmpty();
    gv_civiliansPeacekeepers = UnitGroupEmpty();
    gv_peacekeeperHoldout = RegionRandomPoint(RegionFromId(13));
    gv_holdoutPing = c_invalidPingId;
    gv_peacekeeperZombieWaves = AIWaveInfoCreate();
    gv_rescuePing = c_invalidPingId;
    gv_civilianRescuePoint = RegionRandomPoint(RegionFromId(14));
    gv_civiliansRescue = UnitGroupEmpty();
    gv_civilianRescueSuccess = c_objectiveStateCompleted;
    gv_extractionMissionState = c_objectiveStateCompleted;
    gv_extractionLocation = RegionRandomPoint(RegionFromId(15));
    gv_convoyPing = c_invalidPingId;
    gv_extractionPointPing = c_invalidPingId;
    gv_paratroopers = UnitGroupEmpty();
    gv_communicationArrayTimer = TimerCreate();
    gv_communicationArrayTimerWindow = c_timerWindowNone;
    gv_communicationArraysCompleted = c_objectiveStateFailed;
    gv_communicationArraysToBeDeployed = lib1E3F036D_gf_GameDifficultyInteger(4, 4, 5);
    for (init_i = 0; init_i <= 5; init_i += 1) {
        gv_communicationArrayLocationPings[init_i] = c_invalidPingId;
    }
    gv_communicationArrays = c_invalidObjectiveId;
    gv_armoryPing = c_invalidPingId;
    gv_reactorPing = c_invalidPingId;
    gv_sarbusPing = c_invalidPingId;
    gv_objectsofInterestUnreported = 6;
    gv_investigationIntialTimer = TimerCreate();
    gv_investigationFinalTimer = TimerCreate();
    gv_investigationMissionState = c_objectiveStateFailed;
    gv_labEntrancePing = c_invalidPingId;
    gv_tarionPing = c_invalidPingId;
    gv_infestationResearchIndicator = c_invalidPingId;
    gv_rentodusPing = c_invalidPingId;
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_SetBullyLocations ();
void gf_SetActiveBullyRegions ();
void gf_SetBullyUnits (region lp_bullyRegion);
void gf_RecruitArrivalTransmission ();
void gf_AmmoDrop (trigger lp_sourceTrigger, region lp_sourceRegion);
void gf_NormalArrivalTransmission (int lp_player);
void gf_NormalArrivalDropPod (point lp_point, int lp_player);
void gf_DisableRecruitStart ();
void gf_PeacekeeperForceCreation (point lp_holdoutPoint);
void gf_PeacekeeperTransmission (int lp_foregroundPlayer, int lp_backgroundPlayer);
void gf_CivilianRescueBriefing ();
void gf_CivilianSpawn ();
void gf_ExtractionConvoyCreation ();
void gf_ExtractionParatroopers ();
void gf_ExtractionBeginningDialog ();
void gf_ExtractionParatrooperDialog ();
void gf_ExtractionEndDialog ();
void gf_ExtractionStateCheck ();
void gf_CommunicationArrayPlacementObjective ();
void gf_CommunicationArrayTransmission ();
void gf_CommunicationArrayArmorySpawns ();
void gf_CommunicationArrayLocations ();
void gf_CommunicationArrayTimer ();
bool gf_ArrayPlacedCorrectly (unit lp_arrayPlaced);
void gf_RestorePowerBriefing ();
void gf_ReactorBriefing ();
void gf_InvestigationBriefing ();
void gf_InvestigationChatter ();
void gf_InvestigationLabPing ();
void gf_InvestigationTarionTransmission ();
void gf_MonolithBriefing ();
void gf_MonolithReinforcements ();
void gf_ArmoryItemDrops ();
void gf_Chapter1AirItemDrops ();
void gf_Chapter3AirItemDrops ();
void gf_Chapter5AirItemDrops ();

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_RegisterMarineswithTriggers;
trigger gt_IntializeArmoryGate;
trigger gt_GamePath;
trigger gt_SetBullies;
trigger gt_RecruitArrival;
trigger gt_DeadBodiesDiscovered;
trigger gt_MilitaryHQSpotted;
trigger gt_EnteringMilitaryBase;
trigger gt_CustomsLockup;
trigger gt_HeadtoCustomsLockup;
trigger gt_WarzoneAmmoMarine4;
trigger gt_WarzoneAmmoMarine3;
trigger gt_WarzoneAmmoMarine2;
trigger gt_WarzoneAmmoMarine1;
trigger gt_WarzoneTransmission;
trigger gt_SecurityGateTransmission;
trigger gt_NormalArrival;
trigger gt_ChiefStrassnerLoot;
trigger gt_SergeantLeftyLoot;
trigger gt_OfficerSprecklinLoot;
trigger gt_SergeantAscalonLoot;
trigger gt_Peacekeepers;
trigger gt_PeriodicZombieAttacksPeacekeepers;
trigger gt_PlayerReachesPeacekeepers;
trigger gt_CivilianRescueBegins;
trigger gt_PeriodicZombieAttacksCivilianRescue;
trigger gt_PlayerRescuesCivilians;
trigger gt_PlayersFailtoRescue;
trigger gt_PlayerReturntoPeacekeeperHoldout;
trigger gt_Holdout;
trigger gt_ParatrooperLoot;
trigger gt_StaffSergeantFenwickLoot;
trigger gt_ExtractionBegin;
trigger gt_PeriodicZombieAttacksCivilianExtraction;
trigger gt_ExtractionEndSuccess;
trigger gt_ExtractionEndFailure;
trigger gt_ConvoyPing;
trigger gt_EltradSpawn;
trigger gt_EltradDeath;
trigger gt_CommunicationMission;
trigger gt_CommunicationArrayPlaced;
trigger gt_CommunicationMissionEnd;
trigger gt_ArmoryDoor;
trigger gt_RestorePowerMission;
trigger gt_TeamReachesReactor;
trigger gt_SarbusSpawn;
trigger gt_SarbusDeath;
trigger gt_SarbusCorpseSpawn;
trigger gt_InvestigationMissionUpdate;
trigger gt_InvestigationMission;
trigger gt_LabEntranceChatter;
trigger gt_ReceptionAreaTransmission;
trigger gt_InfestationResearchTransmission;
trigger gt_WorkstationTX1;
trigger gt_DissectionWorkstation;
trigger gt_DemeterWorkstation;
trigger gt_PoolviewingDeck;
trigger gt_CharlieEscapeHole;
trigger gt_CharliePen;
trigger gt_InvestigationMissionIntialEnd;
trigger gt_InvestigationMissionFinalEnd;
trigger gt_TarionSpawn;
trigger gt_TarionDeath;
trigger gt_TarionHordes;
trigger gt_MonolithBegin;
trigger gt_RentodusSpawn;
trigger gt_RentodusDeath;
trigger gt_RentodusMobs;
trigger gt_AmmoModification;
trigger gt_Magazine;
trigger gt_PeackeeperWeapons;
trigger gt_Lab1;
trigger gt_Lab2;
trigger gt_Lab3;
trigger gt_FieldLight1;
trigger gt_FieldLight2;
trigger gt_FieldLight3;
trigger gt_FieldLight4;
trigger gt_MedicalSupply1;
trigger gt_MedicalSupply2;
trigger gt_MedicalSupply3;
trigger gt_MedicalSupply4;
trigger gt_MedicalSupply5;
trigger gt_MedicalSupply6;
trigger gt_MedicalSupply7;
trigger gt_MedicalSupply8;
trigger gt_MedicalSupply9;
trigger gt_MedicalSupply10;
trigger gt_MedicalSupply11;
trigger gt_MedicalSupply12;
trigger gt_MedicalSupply13;
trigger gt_MedicalSupply14;
trigger gt_MedicalSupply15;
trigger gt_MedicalSupply16;
trigger gt_MedicalSupply17;
trigger gt_MedicalSupply18;
trigger gt_MedicalSupply19;
trigger gt_MedicalSupply20;
trigger gt_MedicalSupply21;
trigger gt_MedicalSupply22;
trigger gt_MedicalSupply23;
trigger gt_MedicalSupply24;
trigger gt_MedicalSupply25;
trigger gt_Flare1;
trigger gt_Flare2;
trigger gt_Flare3;
trigger gt_Flare4;
trigger gt_Flare5;
trigger gt_Flare6;
trigger gt_Flare7;
trigger gt_Flare8;
trigger gt_Flare9;
trigger gt_Flare10;
trigger gt_Flare11;
trigger gt_Flare12;
trigger gt_Flare13;
trigger gt_Flare14;
trigger gt_AmbientAttacksOnPlayers;
trigger gt_InfestorKilled;
trigger gt_InfestorStartMission;

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_SetBullyLocations () {
    // Automatic Variable Declarations
    // Implementation
    gv_bullyRegions[1] = RegionCircle(PointFromId(2318), gv_bullyRegionSize);
    gv_bullyRegions[2] = RegionCircle(PointFromId(3277), gv_bullyRegionSize);
    gv_bullyRegions[3] = RegionCircle(PointFromId(4569), gv_bullyRegionSize);
    gv_bullyRegions[4] = RegionCircle(PointFromId(4636), gv_bullyRegionSize);
    gv_bullyRegions[5] = RegionCircle(PointFromId(3951), gv_bullyRegionSize);
    gv_bullyRegions[6] = RegionCircle(PointFromId(3134), gv_bullyRegionSize);
    gv_bullyRegions[7] = RegionCircle(PointFromId(3966), gv_bullyRegionSize);
    gv_bullyRegions[8] = RegionCircle(PointFromId(4571), gv_bullyRegionSize);
    gv_bullyRegions[9] = RegionCircle(PointFromId(4566), gv_bullyRegionSize);
    gv_bullyRegions[10] = RegionCircle(PointFromId(4565), gv_bullyRegionSize);
    gv_bullyRegions[11] = RegionCircle(PointFromId(2799), gv_bullyRegionSize);
    gv_bullyRegions[12] = RegionCircle(PointFromId(3279), gv_bullyRegionSize);
    gv_bullyRegions[13] = RegionCircle(PointFromId(4574), gv_bullyRegionSize);
    gv_bullyRegions[14] = RegionCircle(PointFromId(4635), gv_bullyRegionSize);
    gv_bullyRegions[15] = RegionCircle(PointFromId(4575), gv_bullyRegionSize);
    gv_bullyRegions[16] = RegionCircle(PointFromId(2070), gv_bullyRegionSize);
    gv_bullyRegions[17] = RegionCircle(PointFromId(3413), gv_bullyRegionSize);
    gv_bullyRegions[18] = RegionCircle(PointFromId(3280), gv_bullyRegionSize);
    gv_bullyRegions[19] = RegionCircle(PointFromId(4029), gv_bullyRegionSize);
    gv_bullyRegions[20] = RegionCircle(PointFromId(4037), gv_bullyRegionSize);
    gv_bullyRegions[21] = RegionCircle(PointFromId(4028), gv_bullyRegionSize);
    gv_bullyRegions[22] = RegionCircle(PointFromId(3198), gv_bullyRegionSize);
    gv_bullyRegions[23] = RegionCircle(PointFromId(4568), gv_bullyRegionSize);
    gv_bullyRegions[24] = RegionCircle(PointFromId(3278), gv_bullyRegionSize);
    gv_bullyRegions[25] = RegionCircle(PointFromId(4564), gv_bullyRegionSize);
    gv_bullyRegions[26] = RegionCircle(PointFromId(2961), gv_bullyRegionSize);
    gv_bullyRegions[27] = RegionCircle(PointFromId(3672), gv_bullyRegionSize);
}

void gf_SetActiveBullyRegions () {
    // Automatic Variable Declarations
    int auto59E8658E_n;
    int auto59E8658E_i;

    // Implementation
    auto59E8658E_n = lib1E3F036D_gf_GameDifficultyInteger(15, 20, 25);
    for (auto59E8658E_i = 1; auto59E8658E_i <= auto59E8658E_n; auto59E8658E_i += 1) {
        gf_SetBullyUnits(gv_bullyRegions[RandomInt(1, 27)]);
    }
}

trigger auto_gf_SetBullyUnits_Trigger = null;
region auto_gf_SetBullyUnits_lp_bullyRegion;

void gf_SetBullyUnits (region lp_bullyRegion) {
    auto_gf_SetBullyUnits_lp_bullyRegion = lp_bullyRegion;

    if (auto_gf_SetBullyUnits_Trigger == null) {
        auto_gf_SetBullyUnits_Trigger = TriggerCreate("auto_gf_SetBullyUnits_TriggerFunc");
    }

    TriggerExecute(auto_gf_SetBullyUnits_Trigger, false, false);
}

bool auto_gf_SetBullyUnits_TriggerFunc (bool testConds, bool runActions) {
    region lp_bullyRegion = auto_gf_SetBullyUnits_lp_bullyRegion;

    // Automatic Variable Declarations
    int auto4232B6CE_n;
    int auto4232B6CE_i;
    int auto5B3E9AE5_n;
    int auto5B3E9AE5_i;
    int auto2E65A887_n;
    int auto2E65A887_i;
    int auto5A76B47E_n;
    int auto5A76B47E_i;
    int auto5E53F57D_n;
    int auto5E53F57D_i;

    // Implementation
    auto4232B6CE_n = lib1E3F036D_gf_GameDifficultyInteger(10, 5, 2);
    for (auto4232B6CE_i = 1; auto4232B6CE_i <= auto4232B6CE_n; auto4232B6CE_i += 1) {
        AIAddBully(lib1E3F036D_gv_zombiePlayer, "MarsColonistFemale2", RegionRandomPoint(lp_bullyRegion), 5000);
        AIAddBully(lib1E3F036D_gv_zombiePlayer, "MarsPrisoner2", RegionRandomPoint(lp_bullyRegion), 5000);
        AIAddBully(lib1E3F036D_gv_zombiePlayer, "MarsScientist2", RegionRandomPoint(lp_bullyRegion), 5000);
        AIAddBully(lib1E3F036D_gv_zombiePlayer, "MarsColonistMale2", RegionRandomPoint(lp_bullyRegion), 5000);
        AIAddBully(lib1E3F036D_gv_zombiePlayer, "MarsColonistMaleMiner2", RegionRandomPoint(lp_bullyRegion), 5000);
    }

    auto5B3E9AE5_n = lib1E3F036D_gf_GameDifficultyInteger(0, 7, 12);
    for (auto5B3E9AE5_i = 1; auto5B3E9AE5_i <= auto5B3E9AE5_n; auto5B3E9AE5_i += 1) {
        AIAddBully(lib1E3F036D_gv_zombiePlayer, "Hound", RegionRandomPoint(lp_bullyRegion), 5000);
    }
    auto2E65A887_n = lib1E3F036D_gf_GameDifficultyInteger(2, 5, 10);
    for (auto2E65A887_i = 1; auto2E65A887_i <= auto2E65A887_n; auto2E65A887_i += 1) {
        AIAddBully(lib1E3F036D_gv_zombiePlayer, "Shambler", RegionRandomPoint(lp_bullyRegion), 5000);
    }
    auto5A76B47E_n = lib1E3F036D_gf_GameDifficultyInteger(0, 1, 2);
    for (auto5A76B47E_i = 1; auto5A76B47E_i <= auto5A76B47E_n; auto5A76B47E_i += 1) {
        AIAddBully(lib1E3F036D_gv_zombiePlayer, "Immortal2", RegionRandomPoint(lp_bullyRegion), 5000);
    }
    auto5E53F57D_n = lib1E3F036D_gf_GameDifficultyInteger(0, 2, 4);
    for (auto5E53F57D_i = 1; auto5E53F57D_i <= auto5E53F57D_n; auto5E53F57D_i += 1) {
        AIAddBully(lib1E3F036D_gv_zombiePlayer, "Hulk", RegionRandomPoint(lp_bullyRegion), 5000);
    }
    return true;
}

void gf_RecruitArrivalTransmission () {
    // Variable Declarations
    playergroup lv_speakers;
    int lv_speaker;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_speakers = lib840A968C_gf_GetLivingMarineSquadPlayers();

    // Implementation
    while (gv_transmissionLock) {
        Wait(1.0, c_timeGame);
    }
    gv_transmissionLock = true;
    lib840A968C_gf_SendTransmission(StringExternal("Param/Value/8070BF33"), StringExternal("Param/Value/C9CB0A85"), lib840A968C_ge_PreemptMessage_DontPreempt, lib840A968C_ge_MessageEventType_AlliedCommunication, c_messageAreaError, lib840A968C_ge_Faction_UGC, null);
    lib840A968C_gf_SendTransmission(StringExternal("Param/Value/5E2D7AFA"), StringExternal("Param/Value/BA428501"), lib840A968C_ge_PreemptMessage_DontPreempt, lib840A968C_ge_MessageEventType_AlliedCommunication, c_messageAreaError, lib840A968C_ge_Faction_UGC, null);
    lv_speaker = lib09BE6BA8_gf_GetRandomPlayerfromPlayerGroup(lv_speakers);
    PlayerGroupRemove(lv_speakers, lv_speaker);
    lib840A968C_gf_SendTransmission(lib840A968C_gf_GetPlayerNamewithrank(lv_speaker), StringExternal("Param/Value/C69186AD"), lib840A968C_ge_PreemptMessage_DontPreempt, lib840A968C_ge_MessageEventType_AlliedCommunication, c_messageAreaError, lib840A968C_ge_Faction_Marines, lib840A968C_gf_GetMarine(lv_speaker));
    if ((PlayerGroupCount(lv_speakers) > 0)) {
        lv_speaker = lib09BE6BA8_gf_GetRandomPlayerfromPlayerGroup(lv_speakers);
        PlayerGroupRemove(lv_speakers, lv_speaker);
        lib840A968C_gf_SendTransmission(lib840A968C_gf_GetPlayerNamewithrank(lv_speaker), StringExternal("Param/Value/CB072A86"), lib840A968C_ge_PreemptMessage_DontPreempt, lib840A968C_ge_MessageEventType_AlliedCommunication, c_messageAreaError, lib840A968C_ge_Faction_Marines, lib840A968C_gf_GetMarine(lv_speaker));
    }

    if ((PlayerGroupCount(lv_speakers) > 0)) {
        lv_speaker = lib09BE6BA8_gf_GetRandomPlayerfromPlayerGroup(lv_speakers);
        PlayerGroupRemove(lv_speakers, lv_speaker);
        lib840A968C_gf_SendTransmission(lib840A968C_gf_GetPlayerNamewithrank(lv_speaker), StringExternal("Param/Value/BC6D33C5"), lib840A968C_ge_PreemptMessage_DontPreempt, lib840A968C_ge_MessageEventType_AlliedCommunication, c_messageAreaError, lib840A968C_ge_Faction_Marines, lib840A968C_gf_GetMarine(lv_speaker));
    }

    gv_transmissionLock = false;
    UnitGroupIssueOrder(lib840A968C_gf_GetMarineGroup(), Order(AbilityCommand("Flashlight", 0)), c_orderQueueAddToFront);
}

void gf_AmmoDrop (trigger lp_sourceTrigger, region lp_sourceRegion) {
    // Automatic Variable Declarations
    int auto38DE59C3_ae;
    int auto38DE59C3_var;

    // Implementation
    TriggerEnable(lp_sourceTrigger, false);
    auto38DE59C3_ae = RandomInt(3, 4);
    auto38DE59C3_var = 1;
    for ( ; auto38DE59C3_var <= auto38DE59C3_ae; auto38DE59C3_var += 1 ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Magazine", 0, 0, RegionRandomPoint(lp_sourceRegion));
    }
    TriggerSendEvent(gv_ammoCollectionEvent);
}

void gf_NormalArrivalTransmission (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    while (gv_transmissionLock) {
        Wait(1.0, c_timeGame);
    }
    gv_transmissionLock = true;
    lib840A968C_gf_SendTransmission(StringExternal("Param/Value/18858747"), StringExternal("Param/Value/42D93B1B"), lib840A968C_ge_PreemptMessage_DontPreempt, lib840A968C_ge_MessageEventType_AlliedCommunication, c_messageAreaError, lib840A968C_ge_Faction_UGC, null);
    lib840A968C_gf_SendTransmission(lib840A968C_gf_GetPlayerNamewithrank(lp_player), StringExternal("Param/Value/51DAE582"), lib840A968C_ge_PreemptMessage_DontPreempt, lib840A968C_ge_MessageEventType_AlliedCommunication, c_messageAreaError, lib840A968C_ge_Faction_Marines, lib840A968C_gf_GetMarine(lp_player));
    lib840A968C_gf_SendTransmission(StringExternal("Param/Value/E715EBB1"), StringExternal("Param/Value/BD0F3C99"), lib840A968C_ge_PreemptMessage_DontPreempt, lib840A968C_ge_MessageEventType_AlliedCommunication, c_messageAreaError, lib840A968C_ge_Faction_UGC, null);
    lib840A968C_gf_SendTransmission(StringExternal("Param/Value/A80939C8"), StringExternal("Param/Value/82AD27D1"), lib840A968C_ge_PreemptMessage_DontPreempt, lib840A968C_ge_MessageEventType_AlliedCommunication, c_messageAreaError, lib840A968C_ge_Faction_UGC, null);
    lib840A968C_gf_SendTransmission(lib840A968C_gf_GetPlayerNamewithrank(lp_player), StringExternal("Param/Value/EB53A4B8"), lib840A968C_ge_PreemptMessage_DontPreempt, lib840A968C_ge_MessageEventType_AlliedCommunication, c_messageAreaError, lib840A968C_ge_Faction_Marines, lib840A968C_gf_GetMarine(lp_player));
    lib840A968C_gf_SendTransmission(StringExternal("Param/Value/D7D4F0E9"), StringExternal("Param/Value/D18D17B9"), lib840A968C_ge_PreemptMessage_DontPreempt, lib840A968C_ge_MessageEventType_AlliedCommunication, c_messageAreaError, lib840A968C_ge_Faction_UGC, null);
    lib840A968C_gf_SendTransmission(lib840A968C_gf_GetPlayerNamewithrank(lp_player), StringExternal("Param/Value/A00EA8CC"), lib840A968C_ge_PreemptMessage_DontPreempt, lib840A968C_ge_MessageEventType_AlliedCommunication, c_messageAreaError, lib840A968C_ge_Faction_Marines, lib840A968C_gf_GetMarine(lp_player));
    gv_transmissionLock = false;
}

trigger auto_gf_NormalArrivalDropPod_Trigger = null;
point auto_gf_NormalArrivalDropPod_lp_point;
int auto_gf_NormalArrivalDropPod_lp_player;

void gf_NormalArrivalDropPod (point lp_point, int lp_player) {
    auto_gf_NormalArrivalDropPod_lp_point = lp_point;
    auto_gf_NormalArrivalDropPod_lp_player = lp_player;

    if (auto_gf_NormalArrivalDropPod_Trigger == null) {
        auto_gf_NormalArrivalDropPod_Trigger = TriggerCreate("auto_gf_NormalArrivalDropPod_TriggerFunc");
    }

    TriggerExecute(auto_gf_NormalArrivalDropPod_Trigger, false, false);
}

bool auto_gf_NormalArrivalDropPod_TriggerFunc (bool testConds, bool runActions) {
    point lp_point = auto_gf_NormalArrivalDropPod_lp_point;
    int lp_player = auto_gf_NormalArrivalDropPod_lp_player;

    // Variable Declarations
    actor lv_dropPodActor;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    CameraPan(lp_player, lp_point, 0.0, -1, 10.0, false);
    VisRevealArea(lp_player, RegionCircle(lp_point, 3.0), 3.0, false);
    libNtve_gf_CreateActorAtPoint("BarracksDropPod", lp_point);
    lv_dropPodActor = libNtve_gf_ActorLastCreated();
    Wait(2.1, c_timeGame);
    libC50FD636_gf_ClassCreation(lp_point, lp_player);
    CameraLockInput(lp_player, false);
    return true;
}

void gf_DisableRecruitStart () {
    // Automatic Variable Declarations
    // Implementation
    TriggerEnable(gt_RecruitArrival, false);
    TriggerEnable(gt_WarzoneAmmoMarine1, false);
    TriggerEnable(gt_WarzoneAmmoMarine2, false);
    TriggerEnable(gt_WarzoneAmmoMarine3, false);
    TriggerEnable(gt_WarzoneAmmoMarine4, false);
    TriggerEnable(gt_EnteringMilitaryBase, false);
    TriggerEnable(gt_MilitaryHQSpotted, false);
    TriggerEnable(gt_DeadBodiesDiscovered, false);
    TriggerEnable(gt_SecurityGateTransmission, false);
    TriggerEnable(gt_WarzoneTransmission, false);
    TriggerEnable(gt_HeadtoCustomsLockup, false);
}

void gf_PeacekeeperForceCreation (point lp_holdoutPoint) {
    // Variable Declarations
    region lv_peackeeperHoldoutArea;
    fixed lv_outwardAngle;
    point lv_spawnPoint;

    // Automatic Variable Declarations
    unitgroup auto3E7332AA_g;
    int auto3E7332AA_u;
    unit auto3E7332AA_var;
    const int auto3AF8D4E3_n = 10;
    int auto3AF8D4E3_i;

    // Variable Initialization
    lv_peackeeperHoldoutArea = RegionCircle(lp_holdoutPoint, 3.0);
    lv_spawnPoint = RegionRandomPoint(lv_peackeeperHoldoutArea);

    // Implementation
    auto3E7332AA_g = UnitGroup(null, c_playerAny, lv_peackeeperHoldoutArea, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto3E7332AA_u = UnitGroupCount(auto3E7332AA_g, c_unitCountAll);
    for (;; auto3E7332AA_u -= 1) {
        auto3E7332AA_var = UnitGroupUnitFromEnd(auto3E7332AA_g, auto3E7332AA_u);
        if (auto3E7332AA_var == null) { break; }
        UnitRemove(auto3E7332AA_var);
    }
    for (auto3AF8D4E3_i = 1; auto3AF8D4E3_i <= auto3AF8D4E3_n; auto3AF8D4E3_i += 1) {
        while ((RegionContainsPoint(RegionFromId(13), lv_spawnPoint) == false)) {
            lv_spawnPoint = RegionRandomPoint(lv_peackeeperHoldoutArea);
        }
        UnitCreate(1, gv_civilianUnits[RandomInt(1, 2)], 0, lib1E3F036D_gv_peacekeeperPlayer, lv_spawnPoint, libNtve_gf_RandomAngle());
        UnitGroupAdd(gv_civiliansPeacekeepers, UnitLastCreated());
    }
    while ((RegionContainsPoint(RegionFromId(13), lv_spawnPoint) == false)) {
        lv_spawnPoint = RegionRandomPoint(lv_peackeeperHoldoutArea);
    }
    lv_outwardAngle = libNtve_gf_RandomAngle();
    UnitCreate(1, "Peacekeeper", 0, lib1E3F036D_gv_peacekeeperPlayer, lv_spawnPoint, AngleBetweenPoints(gv_peacekeeperHoldout, lv_spawnPoint));
    gv_chiefStrassner = UnitLastCreated();
    libNtve_gf_SendActorMessageToUnit(gv_chiefStrassner, "SetWireframe 0 Wireframes\\Wireframe-Peacekeeper_Chief.dds");
    libNtve_gf_SendActorMessageToUnit(gv_chiefStrassner, "SetWireframeShield 0 Wireframes\\Wireframe-Peacekeeper_Chief-shield01.dds");
    libNtve_gf_SendActorMessageToUnit(gv_chiefStrassner, "SetWireframeShield 1 Wireframes\\Wireframe-Peacekeeper_Chief-shield02.dds");
    libNtve_gf_SendActorMessageToUnit(gv_chiefStrassner, "SetWireframeShield 2 Wireframes\\Wireframe-Peacekeeper_Chief-shield03.dds");
    UnitSetState(gv_chiefStrassner, c_unitStateInvulnerable, true);
    UnitGroupAdd(gv_peacekeepers, gv_chiefStrassner);
    UnitBehaviorAddPlayer(gv_chiefStrassner, "ChiefStrassner", lib1E3F036D_gv_peacekeeperPlayer, 1);
    UnitBehaviorAddPlayer(gv_chiefStrassner, "ArmoredProtectiveInsert", lib1E3F036D_gv_peacekeeperPlayer, 1);
    UnitBehaviorAddPlayer(gv_chiefStrassner, "PumpShotgunEquipped", lib1E3F036D_gv_peacekeeperPlayer, 1);
    while ((RegionContainsPoint(RegionFromId(13), lv_spawnPoint) == false)) {
        lv_spawnPoint = RegionRandomPoint(lv_peackeeperHoldoutArea);
    }
    lv_outwardAngle = libNtve_gf_RandomAngle();
    UnitCreate(1, "Peacekeeper", 0, lib1E3F036D_gv_peacekeeperPlayer, lv_spawnPoint, AngleBetweenPoints(gv_peacekeeperHoldout, lv_spawnPoint));
    gv_sergeantLefty = UnitLastCreated();
    UnitSetState(gv_sergeantLefty, c_unitStateInvulnerable, true);
    UnitGroupAdd(gv_peacekeepers, gv_sergeantLefty);
    UnitBehaviorAddPlayer(gv_sergeantLefty, "SergeantLefty", lib1E3F036D_gv_peacekeeperPlayer, 1);
    UnitBehaviorAddPlayer(gv_sergeantLefty, "ArmoredProtectiveInsert", lib1E3F036D_gv_peacekeeperPlayer, 1);
    UnitBehaviorAddPlayer(gv_sergeantLefty, "MarksmanRifleEquipped", lib1E3F036D_gv_peacekeeperPlayer, 1);
    while ((RegionContainsPoint(RegionFromId(13), lv_spawnPoint) == false)) {
        lv_spawnPoint = RegionRandomPoint(lv_peackeeperHoldoutArea);
    }
    lv_outwardAngle = libNtve_gf_RandomAngle();
    UnitCreate(1, "Peacekeeper", 0, lib1E3F036D_gv_peacekeeperPlayer, lv_spawnPoint, AngleBetweenPoints(gv_peacekeeperHoldout, lv_spawnPoint));
    gv_officerSprecklin = UnitLastCreated();
    UnitSetState(gv_officerSprecklin, c_unitStateInvulnerable, true);
    UnitGroupAdd(gv_peacekeepers, gv_officerSprecklin);
    UnitBehaviorAddPlayer(gv_officerSprecklin, "OfficerSpracklin", lib1E3F036D_gv_peacekeeperPlayer, 1);
    UnitBehaviorAddPlayer(gv_officerSprecklin, "ArmoredProtectiveInsert", lib1E3F036D_gv_peacekeeperPlayer, 1);
    UnitBehaviorAddPlayer(gv_officerSprecklin, "SubmachineGunEquipped", lib1E3F036D_gv_peacekeeperPlayer, 1);
    TriggerEnable(gt_ChiefStrassnerLoot, true);
    TriggerEnable(gt_OfficerSprecklinLoot, true);
    TriggerEnable(gt_SergeantLeftyLoot, true);
}

void gf_PeacekeeperTransmission (int lp_foregroundPlayer, int lp_backgroundPlayer) {
    // Automatic Variable Declarations
    // Implementation
    while (gv_transmissionLock) {
        Wait(1.0, c_timeGame);
    }
    gv_transmissionLock = true;
    lib840A968C_gf_SendTransmission(StringExternal("Param/Value/3FE8B251"), StringExternal("Param/Value/3F8F97EB"), lib840A968C_ge_PreemptMessage_DontPreempt, lib840A968C_ge_MessageEventType_AlliedCommunication, c_messageAreaError, lib840A968C_ge_Faction_UGC, null);
    lib840A968C_gf_SendTransmission(lib840A968C_gf_GetPlayerNamewithrank(lp_foregroundPlayer), StringExternal("Param/Value/0134A3F2"), lib840A968C_ge_PreemptMessage_DontPreempt, lib840A968C_ge_MessageEventType_AlliedCommunication, c_messageAreaError, lib840A968C_ge_Faction_Marines, lib840A968C_gf_GetMarine(lp_foregroundPlayer));
    lib840A968C_gf_SendTransmission(StringExternal("Param/Value/8E40AEA5"), StringExternal("Param/Value/E10CE0BB"), lib840A968C_ge_PreemptMessage_DontPreempt, lib840A968C_ge_MessageEventType_AlliedCommunication, c_messageAreaError, lib840A968C_ge_Faction_UGC, null);
    lib840A968C_gf_BackgroundDialog(lib840A968C_gf_GetMarine(lp_backgroundPlayer), lib840A968C_gf_GetPlayerNamewithrank(lp_backgroundPlayer), StringExternal("Param/Value/ED4452C4"), lib840A968C_ge_DialogDuration_Short, 6.0);
    lib840A968C_gf_SendTransmission(StringExternal("Param/Value/963E86B2"), StringExternal("Param/Value/83D48F7E"), lib840A968C_ge_PreemptMessage_DontPreempt, lib840A968C_ge_MessageEventType_AlliedCommunication, c_messageAreaError, lib840A968C_ge_Faction_UGC, gv_chiefStrassner);
    lib840A968C_gf_SendTransmission(StringExternal("Param/Value/C415AE91"), StringExternal("Param/Value/8520B6E3"), lib840A968C_ge_PreemptMessage_DontPreempt, lib840A968C_ge_MessageEventType_AlliedCommunication, c_messageAreaError, lib840A968C_ge_Faction_UGC, null);
    gv_transmissionLock = false;
}

void gf_CivilianRescueBriefing () {
    // Variable Declarations
    int lv_speaker;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_speaker = lib09BE6BA8_gf_GetRandomPlayerfromPlayerGroup(lib840A968C_gf_GetLivingMarineSquadPlayers());

    // Implementation
    while (gv_transmissionLock) {
        Wait(1.0, c_timeGame);
    }
    gv_transmissionLock = true;
    lib840A968C_gf_SendTransmission(StringExternal("Param/Value/4FD09351"), StringExternal("Param/Value/D420BDED"), lib840A968C_ge_PreemptMessage_DontPreempt, lib840A968C_ge_MessageEventType_AlliedCommunication, c_messageAreaError, lib840A968C_ge_Faction_UGC, gv_chiefStrassner);
    lib840A968C_gf_SendTransmission(StringExternal("Param/Value/C1B6F01B"), StringExternal("Param/Value/C4011AB4"), lib840A968C_ge_PreemptMessage_DontPreempt, lib840A968C_ge_MessageEventType_AlliedCommunication, c_messageAreaError, lib840A968C_ge_Faction_UGC, gv_chiefStrassner);
    lib840A968C_gf_SendTransmission(lib840A968C_gf_GetPlayerNamewithrank(lv_speaker), StringExternal("Param/Value/50D98DF0"), lib840A968C_ge_PreemptMessage_DontPreempt, lib840A968C_ge_MessageEventType_AlliedCommunication, c_messageAreaError, lib840A968C_ge_Faction_Marines, lib840A968C_gf_GetMarine(lv_speaker));
    gv_transmissionLock = false;
}

void gf_CivilianSpawn () {
    // Variable Declarations
    region lv_civilianRescueLocation;
    point lv_spawnPoint;
    int lv_numberofCivilians;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_civilianRescueLocation = RegionCircle(gv_civilianRescuePoint, 5.0);
    lv_spawnPoint = RegionRandomPoint(lv_civilianRescueLocation);
    lv_numberofCivilians = 15;

    // Implementation
    while ((lv_numberofCivilians != 0)) {
        while ((RegionContainsPoint(RegionFromId(14), lv_spawnPoint) == false)) {
            lv_spawnPoint = RegionRandomPoint(lv_civilianRescueLocation);
        }
        UnitCreate(1, gv_civilianUnits[RandomInt(1, 2)], 0, lib1E3F036D_gv_peacekeeperPlayer, lv_spawnPoint, libNtve_gf_RandomAngle());
        UnitGroupAdd(gv_civiliansRescue, UnitLastCreated());
        lv_numberofCivilians -= 1;
    }
    while ((RegionContainsPoint(RegionFromId(14), lv_spawnPoint) == false)) {
        lv_spawnPoint = RegionRandomPoint(lv_civilianRescueLocation);
    }
    UnitCreate(1, "Peacekeeper", 0, lib1E3F036D_gv_peacekeeperPlayer, lv_spawnPoint, libNtve_gf_RandomAngle());
    gv_sergeantAscalon = UnitLastCreated();
    UnitBehaviorAddPlayer(gv_sergeantAscalon, "SergeantAscalon", lib1E3F036D_gv_peacekeeperPlayer, 1);
    UnitBehaviorAddPlayer(gv_sergeantAscalon, "SubmachineGunEquipped", lib1E3F036D_gv_peacekeeperPlayer, 1);
    TriggerEnable(gt_SergeantAscalonLoot, true);
    if ((lib1E3F036D_gf_GameType() != 2)) {
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", gv_civilianRescuePoint, ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 360.0, 270.0);
        PingSetScale(PingLastCreated(), 0.7);
        gv_rescuePing = PingLastCreated();
    }

}

void gf_ExtractionConvoyCreation () {
    // Automatic Variable Declarations
    unitgroup auto172D2E54_g;
    int auto172D2E54_u;
    unit auto172D2E54_var;
    unitgroup autoA8B37FEF_g;
    int autoA8B37FEF_u;
    unit autoA8B37FEF_var;
    unitgroup auto9D6C615A_g;
    int auto9D6C615A_u;
    unitgroup autoDB5042DD_g;
    int autoDB5042DD_u;
    unitgroup autoA261E908_g;
    int autoA261E908_u;

    // Implementation
    VisRevealArea(9, RegionCircle(gv_extractionLocation, 5.0), 180.0, false);
    PingCreate(PlayerGroupAll(), "PingTriangle", gv_extractionLocation, ColorWithAlpha(0.00, 100.00, 100.00, 0.00), 360.0);
    gv_extractionPointPing = PingLastCreated();
    PingSetScale(gv_extractionPointPing, 0.3);
    AIAttackWaveSetTargetEscort(lib1E3F036D_gv_peacekeeperPlayer, gv_civiliansPeacekeepers, 2);
    AIAttackWaveUseGroup(lib1E3F036D_gv_peacekeeperPlayer, gv_peacekeepers);
    AIAttackWaveUseGroup(lib1E3F036D_gv_peacekeeperPlayer, gv_paratroopers);
    AIAttackWaveUseUnit(lib1E3F036D_gv_peacekeeperPlayer, gv_staffSergeantFenwick);
    AIAttackWaveSend(lib1E3F036D_gv_peacekeeperPlayer, 0, true);
    gv_peacekeeperEscortWave = WaveLastCreated();
    auto172D2E54_g = gv_civiliansPeacekeepers;
    auto172D2E54_u = UnitGroupCount(auto172D2E54_g, c_unitCountAll);
    for (;; auto172D2E54_u -= 1) {
        auto172D2E54_var = UnitGroupUnitFromEnd(auto172D2E54_g, auto172D2E54_u);
        if (auto172D2E54_var == null) { break; }
        UnitSetPropertyFixed(auto172D2E54_var, c_unitPropMovementSpeed, 1.4);
    }
    UnitGroupIssueOrder(gv_civiliansPeacekeepers, OrderTargetingPoint(AbilityCommand("move", 0), gv_extractionLocation), c_orderQueueReplace);
    autoA8B37FEF_g = gv_peacekeepers;
    autoA8B37FEF_u = UnitGroupCount(autoA8B37FEF_g, c_unitCountAll);
    for (;; autoA8B37FEF_u -= 1) {
        autoA8B37FEF_var = UnitGroupUnitFromEnd(autoA8B37FEF_g, autoA8B37FEF_u);
        if (autoA8B37FEF_var == null) { break; }
        UnitSetState(autoA8B37FEF_var, c_unitStateInvulnerable, false);
    }
    auto9D6C615A_g = gv_peacekeepers;
    auto9D6C615A_u = UnitGroupCount(auto9D6C615A_g, c_unitCountAll);
    for (;; auto9D6C615A_u -= 1) {
        gv_registrationUnit = UnitGroupUnitFromEnd(auto9D6C615A_g, auto9D6C615A_u);
        if (gv_registrationUnit == null) { break; }
        TriggerAddEventUnitRegion(gt_ExtractionEndSuccess, UnitRefFromVariable("gv_registrationUnit"), RegionCircle(gv_extractionLocation, 5.0), true);
    }
    autoDB5042DD_g = gv_paratroopers;
    autoDB5042DD_u = UnitGroupCount(autoDB5042DD_g, c_unitCountAll);
    for (;; autoDB5042DD_u -= 1) {
        gv_registrationUnit = UnitGroupUnitFromEnd(autoDB5042DD_g, autoDB5042DD_u);
        if (gv_registrationUnit == null) { break; }
        TriggerAddEventUnitRegion(gt_ExtractionEndSuccess, UnitRefFromVariable("gv_registrationUnit"), RegionCircle(gv_extractionLocation, 5.0), true);
        TriggerAddEventUnitDied(gt_ParatrooperLoot, UnitRefFromVariable("gv_registrationUnit"));
    }
    autoA261E908_g = gv_civiliansPeacekeepers;
    autoA261E908_u = UnitGroupCount(autoA261E908_g, c_unitCountAll);
    for (;; autoA261E908_u -= 1) {
        gv_registrationUnit = UnitGroupUnitFromEnd(autoA261E908_g, autoA261E908_u);
        if (gv_registrationUnit == null) { break; }
        TriggerAddEventUnitRegion(gt_ExtractionEndSuccess, UnitRefFromVariable("gv_registrationUnit"), RegionCircle(gv_extractionLocation, 5.0), true);
    }
}

void gf_ExtractionParatroopers () {
    // Variable Declarations
    point lv_dropPoint;

    // Automatic Variable Declarations
    const int auto6D6CA56D_n = 3;
    int auto6D6CA56D_i;

    // Variable Initialization

    // Implementation
    for (auto6D6CA56D_i = 1; auto6D6CA56D_i <= auto6D6CA56D_n; auto6D6CA56D_i += 1) {
        lv_dropPoint = RegionRandomPoint(RegionCircle(gv_peacekeeperHoldout, 4.0));
        while ((CliffLevel(lv_dropPoint) != CliffLevel(gv_peacekeeperHoldout))) {
            lv_dropPoint = RegionRandomPoint(RegionCircle(gv_peacekeeperHoldout, 4.0));
        }
        libNtve_gf_CreateActorAtPoint("BarracksDropPod", lv_dropPoint);
        Wait(2.2, c_timeGame);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Paratrooper", 0, lib1E3F036D_gv_peacekeeperPlayer, lv_dropPoint);
        UnitGroupAdd(gv_paratroopers, UnitLastCreated());
        UnitBehaviorAddPlayer(UnitLastCreated(), "AssaultRifleEquipped", lib1E3F036D_gv_peacekeeperPlayer, 1);
    }
    lv_dropPoint = RegionRandomPoint(RegionCircle(gv_peacekeeperHoldout, 4.0));
    while ((CliffLevel(lv_dropPoint) != CliffLevel(gv_peacekeeperHoldout))) {
        lv_dropPoint = RegionRandomPoint(RegionCircle(gv_peacekeeperHoldout, 4.0));
    }
    libNtve_gf_CreateActorAtPoint("BarracksDropPod", lv_dropPoint);
    Wait(2.2, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Paratrooper", 0, lib1E3F036D_gv_peacekeeperPlayer, lv_dropPoint);
    gv_staffSergeantFenwick = UnitLastCreated();
    UnitBehaviorAddPlayer(gv_staffSergeantFenwick, "StaffSergeantFenwick", lib1E3F036D_gv_peacekeeperPlayer, 1);
    UnitBehaviorAddPlayer(gv_staffSergeantFenwick, "EnhancedProtectiveInsert", lib1E3F036D_gv_peacekeeperPlayer, 1);
    TriggerEnable(gt_StaffSergeantFenwickLoot, true);
    TriggerEnable(gt_ParatrooperLoot, true);
    gf_ExtractionParatrooperDialog();
}

void gf_ExtractionBeginningDialog () {
    // Variable Declarations
    playergroup lv_speakers;
    int lv_currentSpeaker;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_speakers = lib840A968C_gf_GetLivingMarineSquadPlayers();

    // Implementation
    while (gv_transmissionLock) {
        Wait(1.0, c_timeGame);
    }
    gv_transmissionLock = true;
    if ((PlayerGroupCount(lv_speakers) > 2)) {
        lv_currentSpeaker = lib09BE6BA8_gf_GetRandomPlayerfromPlayerGroup(lv_speakers);
        PlayerGroupRemove(lv_speakers, lv_currentSpeaker);
        lib840A968C_gf_BackgroundDialog(lib840A968C_gf_GetMarine(lv_currentSpeaker), lib840A968C_gf_GetPlayerNamewithrank(lv_currentSpeaker), StringExternal("Param/Value/79A71ED4"), lib840A968C_ge_DialogDuration_Short, 5.0);
        lv_currentSpeaker = lib09BE6BA8_gf_GetRandomPlayerfromPlayerGroup(lv_speakers);
        PlayerGroupRemove(lv_speakers, lv_currentSpeaker);
        lib840A968C_gf_BackgroundDialog(lib840A968C_gf_GetMarine(lv_currentSpeaker), lib840A968C_gf_GetPlayerNamewithrank(lv_currentSpeaker), StringExternal("Param/Value/CB48FA82"), lib840A968C_ge_DialogDuration_Short, 4.0);
    }

    lv_currentSpeaker = lib09BE6BA8_gf_GetRandomPlayerfromPlayerGroup(lv_speakers);
    PlayerGroupRemove(lv_speakers, lv_currentSpeaker);
    lib840A968C_gf_SendTransmission(StringExternal("Param/Value/22B94A4F"), StringExternal("Param/Value/CA4C016F"), lib840A968C_ge_PreemptMessage_DontPreempt, lib840A968C_ge_MessageEventType_AlliedCommunication, c_messageAreaError, lib840A968C_ge_Faction_UGC, null);
    lib840A968C_gf_SendTransmission(lib840A968C_gf_GetPlayerNamewithrank(lv_currentSpeaker), StringExternal("Param/Value/6C8E7901"), lib840A968C_ge_PreemptMessage_DontPreempt, lib840A968C_ge_MessageEventType_AlliedCommunication, c_messageAreaError, lib840A968C_ge_Faction_Marines, lib840A968C_gf_GetMarine(lv_currentSpeaker));
    gv_transmissionLock = false;
}

void gf_ExtractionParatrooperDialog () {
    // Automatic Variable Declarations
    // Implementation
    while (gv_transmissionLock) {
        Wait(1.0, c_timeGame);
    }
    gv_transmissionLock = true;
    lib840A968C_gf_SendTransmission(StringExternal("Param/Value/880F3FA0"), StringExternal("Param/Value/CC2B6753"), lib840A968C_ge_PreemptMessage_DontPreempt, lib840A968C_ge_MessageEventType_AlliedCommunication, c_messageAreaError, lib840A968C_ge_Faction_UGC, gv_staffSergeantFenwick);
    lib840A968C_gf_BackgroundDialog(gv_chiefStrassner, StringExternal("Param/Value/DF5C8F23"), StringExternal("Param/Value/F9BBB8A4"), lib840A968C_ge_DialogDuration_Short, 6.0);
    lib840A968C_gf_BackgroundDialog(gv_staffSergeantFenwick, StringExternal("Param/Value/B5074E42"), StringExternal("Param/Value/6181F3CF"), lib840A968C_ge_DialogDuration_Long, 6.0);
    lib840A968C_gf_BackgroundDialog(gv_chiefStrassner, StringExternal("Param/Value/040D4FF3"), StringExternal("Param/Value/FC17B165"), lib840A968C_ge_DialogDuration_Short, 2.0);
    gv_transmissionLock = false;
}

void gf_ExtractionEndDialog () {
    // Variable Declarations
    int lv_speaker;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_speaker = lib09BE6BA8_gf_GetRandomPlayerfromPlayerGroup(lib840A968C_gf_GetLivingMarineSquadPlayers());

    // Implementation
    while (gv_transmissionLock) {
        Wait(1.0, c_timeGame);
    }
    gv_transmissionLock = true;
    lib840A968C_gf_SendTransmission(StringExternal("Param/Value/99F1B67C"), StringExternal("Param/Value/36D082AC"), lib840A968C_ge_PreemptMessage_DontPreempt, lib840A968C_ge_MessageEventType_AlliedCommunication, c_messageAreaError, lib840A968C_ge_Faction_UGC, gv_staffSergeantFenwick);
    lib840A968C_gf_SendTransmission(lib840A968C_gf_GetPlayerNamewithrank(lv_speaker), StringExternal("Param/Value/EE9E7972"), lib840A968C_ge_PreemptMessage_DontPreempt, lib840A968C_ge_MessageEventType_AlliedCommunication, c_messageAreaError, lib840A968C_ge_Faction_Marines, lib840A968C_gf_GetMarine(lv_speaker));
    gv_transmissionLock = false;
}

trigger auto_gf_ExtractionStateCheck_Trigger = null;

void gf_ExtractionStateCheck () {
    if (auto_gf_ExtractionStateCheck_Trigger == null) {
        auto_gf_ExtractionStateCheck_Trigger = TriggerCreate("auto_gf_ExtractionStateCheck_TriggerFunc");
    }

    TriggerExecute(auto_gf_ExtractionStateCheck_Trigger, false, false);
}

bool auto_gf_ExtractionStateCheck_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    while (!((libNtve_gf_UnitGroupIsDead(gv_civiliansPeacekeepers) || (TriggerActiveCount(gt_ExtractionEndSuccess) == 1)))) {
        Wait(0.5, c_timeGame);
    }
    if (libNtve_gf_UnitGroupIsDead(gv_civiliansPeacekeepers)) {
        gv_extractionMissionState = c_objectiveStateFailed;
        TriggerStop(gt_ConvoyPing);
        PingDestroy(gv_convoyPing);
        TriggerSendEvent(gv_extractionFailureSignal);
        TriggerEnable(gt_ExtractionEndSuccess, false);
    }

    return true;
}

void gf_CommunicationArrayPlacementObjective () {
    // Automatic Variable Declarations
    // Implementation
    TextExpressionSetToken("Param/Expression/8069A969", "A", IntToText(gv_communicationArraysToBeDeployed));
    ObjectiveCreate(TextExpressionAssemble("Param/Expression/8069A969"), StringExternal("Param/Value/779EBF23"), c_objectiveStateActive, true);
    gv_communicationArrays = ObjectiveLastCreated();
}

void gf_CommunicationArrayTransmission () {
    // Variable Declarations
    playergroup lv_speakers;
    int lv_currentSpeaker;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_speakers = PlayerGroupCopy(lib840A968C_gf_GetLivingMarineSquadPlayers());
    lv_currentSpeaker = lib09BE6BA8_gf_GetRandomPlayerfromPlayerGroup(lv_speakers);

    // Implementation
    while (gv_transmissionLock) {
        Wait(1.0, c_timeGame);
    }
    gv_transmissionLock = true;
    PlayerGroupRemove(lv_speakers, lv_currentSpeaker);
    lib840A968C_gf_SendTransmission(StringExternal("Param/Value/BDDE9DF1"), StringExternal("Param/Value/6218C255"), lib840A968C_ge_PreemptMessage_DontPreempt, lib840A968C_ge_MessageEventType_AlliedCommunication, c_messageAreaError, lib840A968C_ge_Faction_UGC, null);
    lib840A968C_gf_BackgroundDialog(lib840A968C_gf_GetMarine(lv_currentSpeaker), lib840A968C_gf_GetPlayerNamewithrank(lv_currentSpeaker), StringExternal("Param/Value/DAC146F8"), lib840A968C_ge_DialogDuration_Long, 6.0);
    if ((lib1E3F036D_gf_GameType() == 2)) {
        lib840A968C_gf_SendTransmission(StringExternal("Param/Value/EA06FC91"), StringExternal("Param/Value/BB21F111"), lib840A968C_ge_PreemptMessage_DontPreempt, lib840A968C_ge_MessageEventType_AlliedCommunication, c_messageAreaError, lib840A968C_ge_Faction_UGC, null);
    }
    else {
        lib840A968C_gf_SendTransmission(StringExternal("Param/Value/A7A33875"), StringExternal("Param/Value/CC08032B"), lib840A968C_ge_PreemptMessage_DontPreempt, lib840A968C_ge_MessageEventType_AlliedCommunication, c_messageAreaError, lib840A968C_ge_Faction_UGC, null);
    }
    if ((PlayerGroupCount(lv_speakers) != 0)) {
        lv_currentSpeaker = lib09BE6BA8_gf_GetRandomPlayerfromPlayerGroup(lv_speakers);
        lib840A968C_gf_SendTransmission(lib840A968C_gf_GetPlayerNamewithrank(lv_currentSpeaker), StringExternal("Param/Value/83D66BEA"), lib840A968C_ge_PreemptMessage_DontPreempt, lib840A968C_ge_MessageEventType_AlliedCommunication, c_messageAreaError, lib840A968C_ge_Faction_Marines, lib840A968C_gf_GetMarine(lv_currentSpeaker));
    }

    gv_transmissionLock = false;
}

void gf_CommunicationArrayArmorySpawns () {
    // Automatic Variable Declarations
    int autoE6FC85EB_n;
    int autoE6FC85EB_i;
    playergroup auto00676182_g;
    int auto00676182_var;

    // Implementation
    autoE6FC85EB_n = gv_communicationArraysToBeDeployed;
    for (autoE6FC85EB_i = 1; autoE6FC85EB_i <= autoE6FC85EB_n; autoE6FC85EB_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "CommunicationsArrayPackedUp", 0, 0, RegionRandomPoint(RegionFromId(24)));
    }
    gf_ArmoryItemDrops();
    auto00676182_g = lib840A968C_gf_GetMarineSquadPlayers();
    auto00676182_var = -1;
    while (true) {
        auto00676182_var = PlayerGroupNextPlayer(auto00676182_g, auto00676182_var);
        if (auto00676182_var < 0) { break; }
        VisRevealArea(auto00676182_var, RegionFromId(9), 30.0, false);
    }
    PingCreate(PlayerGroupAll(), "PingAlert", RegionGetCenter(RegionFromId(9)), ColorWithAlpha(100.00, 100.00, 50.20, 0.00), 120.0);
    PingSetScale(PingLastCreated(), 0.4);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/EB653B7D"));
    gv_armoryPing = PingLastCreated();
}

void gf_CommunicationArrayLocations () {
    // Variable Declarations
    int lv_arrayLocationsSelected;
    point lv_location;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_arrayLocationsSelected = 1;
    lv_location = RegionRandomPoint(RegionFromId(12));

    // Implementation
    while ((lv_arrayLocationsSelected <= gv_communicationArraysToBeDeployed)) {
        while ((((gv_communicationArrayLocations[1] != null) && (RegionContainsPoint(RegionCircle(RegionGetCenter(gv_communicationArrayLocations[1]), 20.0), lv_location) == true)) || ((gv_communicationArrayLocations[2] != null) && (RegionContainsPoint(RegionCircle(RegionGetCenter(gv_communicationArrayLocations[2]), 20.0), lv_location) == true)) || ((gv_communicationArrayLocations[3] != null) && (RegionContainsPoint(RegionCircle(RegionGetCenter(gv_communicationArrayLocations[3]), 20.0), lv_location) == true)) || ((gv_communicationArrayLocations[4] != null) && (RegionContainsPoint(RegionCircle(RegionGetCenter(gv_communicationArrayLocations[4]), 20.0), lv_location) == true)) || ((lib1E3F036D_gf_GameType() == 2) && (gv_communicationArrayLocations[5] != null) && (RegionContainsPoint(RegionCircle(RegionGetCenter(gv_communicationArrayLocations[5]), 20.0), lv_location) == true)))) {
            lv_location = RegionRandomPoint(RegionFromId(12));
        }
        gv_communicationArrayLocations[lv_arrayLocationsSelected] = RegionCircle(lv_location, 5.0);
        libNtve_gf_CreateModelAtPoint("ChallengeShield", lv_location);
        ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 0.600000");
        gv_communicationArrayAreaIndicator[lv_arrayLocationsSelected] = libNtve_gf_ActorLastCreated();
        PingCreate(PlayerGroupAll(), "PingDiamond", lv_location, ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 360.0);
        PingSetScale(PingLastCreated(), 0.4);
        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/87BB5D36"));
        gv_communicationArrayLocationPings[lv_arrayLocationsSelected] = PingLastCreated();
        lv_arrayLocationsSelected += 1;
    }
}

void gf_CommunicationArrayTimer () {
    // Automatic Variable Declarations
    // Implementation
    TimerWindowCreate(gv_communicationArrayTimer, StringExternal("Param/Value/C3056A6D"), true, false);
    gv_communicationArrayTimerWindow = TimerWindowLastCreated();
    TimerStart(gv_communicationArrayTimer, lib1E3F036D_gf_GameDifficultyReal(420.0, 420.0, 360.0), false, c_timeGame);
}

bool gf_ArrayPlacedCorrectly (unit lp_arrayPlaced) {
    // Variable Declarations
    int lv_array;

    // Automatic Variable Declarations
    int auto10279937_ae;
    const int auto10279937_ai = 1;

    // Variable Initialization

    // Implementation
    auto10279937_ae = gv_communicationArraysToBeDeployed;
    lv_array = 1;
    for ( ; ( (auto10279937_ai >= 0 && lv_array <= auto10279937_ae) || (auto10279937_ai < 0 && lv_array >= auto10279937_ae) ) ; lv_array += auto10279937_ai ) {
        if ((libNtve_gf_UnitInRegion(lp_arrayPlaced, gv_communicationArrayLocations[lv_array]) == true) && (UnitGroupCount(UnitGroup("CommunicationsArray", c_playerAny, gv_communicationArrayLocations[lv_array], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 1)) {
            return true;
        }

    }
    return false;
}

void gf_RestorePowerBriefing () {
    // Automatic Variable Declarations
    // Implementation
    lib840A968C_gf_SendTransmission(StringExternal("Param/Value/C5CEAF44"), StringExternal("Param/Value/F9333D6F"), lib840A968C_ge_PreemptMessage_DontPreempt, lib840A968C_ge_MessageEventType_AlliedCommunication, c_messageAreaError, lib840A968C_ge_Faction_UGC, null);
    lib840A968C_gf_SendTransmission(StringExternal("Param/Value/58980713"), StringExternal("Param/Value/DC746DF6"), lib840A968C_ge_PreemptMessage_DontPreempt, lib840A968C_ge_MessageEventType_AlliedCommunication, c_messageAreaError, lib840A968C_ge_Faction_UGC, null);
}

void gf_ReactorBriefing () {
    // Variable Declarations
    playergroup lv_speakers;
    int lv_currentSpeaker;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_speakers = PlayerGroupCopy(lib840A968C_gf_GetLivingMarineSquadPlayers());

    // Implementation
    lv_currentSpeaker = lib09BE6BA8_gf_GetRandomPlayerfromPlayerGroup(lv_speakers);
    PlayerGroupRemove(lv_speakers, lv_currentSpeaker);
    lib840A968C_gf_SendTransmission(lib840A968C_gf_GetPlayerNamewithrank(lv_currentSpeaker), StringExternal("Param/Value/C51FFE2D"), lib840A968C_ge_PreemptMessage_DontPreempt, lib840A968C_ge_MessageEventType_AlliedCommunication, c_messageAreaError, lib840A968C_ge_Faction_Marines, lib840A968C_gf_GetMarine(lv_currentSpeaker));
    if ((PlayerGroupCount(lv_speakers) > 0)) {
        lv_currentSpeaker = lib09BE6BA8_gf_GetRandomPlayerfromPlayerGroup(lv_speakers);
        PlayerGroupRemove(lv_speakers, lv_currentSpeaker);
        lib840A968C_gf_SendTransmission(lib840A968C_gf_GetPlayerNamewithrank(lv_currentSpeaker), StringExternal("Param/Value/629BAF57"), lib840A968C_ge_PreemptMessage_DontPreempt, lib840A968C_ge_MessageEventType_AlliedCommunication, c_messageAreaError, lib840A968C_ge_Faction_Marines, lib840A968C_gf_GetMarine(lv_currentSpeaker));
    }

    lib840A968C_gf_SendTransmission(StringExternal("Param/Value/1B4C6413"), StringExternal("Param/Value/97CDCE00"), lib840A968C_ge_PreemptMessage_DontPreempt, lib840A968C_ge_MessageEventType_AlliedCommunication, c_messageAreaError, lib840A968C_ge_Faction_UGC, null);
    lib840A968C_gf_SendTransmission(StringExternal("Param/Value/A57C5CF0"), StringExternal("Param/Value/2FBCAFBD"), lib840A968C_ge_PreemptMessage_DontPreempt, lib840A968C_ge_MessageEventType_AlliedCommunication, c_messageAreaError, lib840A968C_ge_Faction_UGC, null);
    lib840A968C_gf_SendTransmission(StringExternal("Param/Value/AA9232CB"), StringExternal("Param/Value/454AF384"), lib840A968C_ge_PreemptMessage_DontPreempt, lib840A968C_ge_MessageEventType_AlliedCommunication, c_messageAreaError, lib840A968C_ge_Faction_UGC, null);
    if ((PlayerGroupCount(lv_speakers) > 0)) {
        lv_currentSpeaker = lib09BE6BA8_gf_GetRandomPlayerfromPlayerGroup(lv_speakers);
        PlayerGroupRemove(lv_speakers, lv_currentSpeaker);
        lib840A968C_gf_SendTransmission(lib840A968C_gf_GetPlayerNamewithrank(lv_currentSpeaker), StringExternal("Param/Value/3540938B"), lib840A968C_ge_PreemptMessage_DontPreempt, lib840A968C_ge_MessageEventType_AlliedCommunication, c_messageAreaError, lib840A968C_ge_Faction_Marines, lib840A968C_gf_GetMarine(lv_currentSpeaker));
    }

}

void gf_InvestigationBriefing () {
    // Automatic Variable Declarations
    // Implementation
    while (gv_transmissionLock) {
        Wait(1.0, c_timeGame);
    }
    gv_transmissionLock = true;
    lib840A968C_gf_SendTransmission(StringExternal("Param/Value/4E05B011"), StringExternal("Param/Value/C680DD11"), lib840A968C_ge_PreemptMessage_DontPreempt, lib840A968C_ge_MessageEventType_AlliedCommunication, c_messageAreaError, lib840A968C_ge_Faction_UGC, null);
    lib840A968C_gf_SendTransmission(StringExternal("Param/Value/1715BF1F"), StringExternal("Param/Value/2C880FC4"), lib840A968C_ge_PreemptMessage_DontPreempt, lib840A968C_ge_MessageEventType_AlliedCommunication, c_messageAreaError, lib840A968C_ge_Faction_UGC, null);
    gv_transmissionLock = false;
}

void gf_InvestigationChatter () {
    // Variable Declarations
    playergroup lv_speakers;
    int[4] lv_currentSpeaker;

    // Automatic Variable Declarations
    const int auto85C83BF1_ae = 3;
    int auto85C83BF1_var;

    // Variable Initialization
    lv_speakers = PlayerGroupCopy(lib840A968C_gf_GetLivingMarineSquadPlayers());

    // Implementation
    lv_currentSpeaker[1] = lib09BE6BA8_gf_GetRandomPlayerfromPlayerGroup(lv_speakers);
    PlayerGroupRemove(lv_speakers, lv_currentSpeaker[1]);
    if ((PlayerGroupCount(lv_speakers) > 1)) {
        auto85C83BF1_var = 2;
        for ( ; auto85C83BF1_var <= auto85C83BF1_ae; auto85C83BF1_var += 1 ) {
            lv_currentSpeaker[auto85C83BF1_var] = lib09BE6BA8_gf_GetRandomPlayerfromPlayerGroup(lv_speakers);
            PlayerGroupRemove(lv_speakers, lv_currentSpeaker[auto85C83BF1_var]);
        }
    }

    lib840A968C_gf_BackgroundDialog(lib840A968C_gf_GetMarine(lv_currentSpeaker[1]), lib840A968C_gf_GetPlayerNamewithrank(lv_currentSpeaker[1]), StringExternal("Param/Value/6E013AD3"), lib840A968C_ge_DialogDuration_Long, 5.0);
    if ((lv_currentSpeaker[2] != 0)) {
        lib840A968C_gf_BackgroundDialog(lib840A968C_gf_GetMarine(lv_currentSpeaker[2]), lib840A968C_gf_GetPlayerNamewithrank(lv_currentSpeaker[2]), StringExternal("Param/Value/71BEDE61"), lib840A968C_ge_DialogDuration_Short, 4.0);
        lib840A968C_gf_BackgroundDialog(lib840A968C_gf_GetMarine(lv_currentSpeaker[3]), lib840A968C_gf_GetPlayerNamewithrank(lv_currentSpeaker[3]), StringExternal("Param/Value/79264110"), lib840A968C_ge_DialogDuration_Short, 4.0);
        lib840A968C_gf_BackgroundDialog(lib840A968C_gf_GetMarine(lv_currentSpeaker[2]), lib840A968C_gf_GetPlayerNamewithrank(lv_currentSpeaker[2]), StringExternal("Param/Value/AAA8DF4E"), lib840A968C_ge_DialogDuration_Short, 4.0);
        lib840A968C_gf_BackgroundDialog(lib840A968C_gf_GetMarine(lv_currentSpeaker[3]), lib840A968C_gf_GetPlayerNamewithrank(lv_currentSpeaker[3]), StringExternal("Param/Value/2C5E2A44"), lib840A968C_ge_DialogDuration_Long, 4.0);
    }

}

void gf_InvestigationLabPing () {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", PointFromId(4635), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 180.0, 270.0);
    gv_labEntrancePing = PingLastCreated();
}

void gf_InvestigationTarionTransmission () {
    // Automatic Variable Declarations
    // Implementation
    while (gv_transmissionLock) {
        Wait(1.0, c_timeGame);
    }
    gv_transmissionLock = true;
    lib840A968C_gf_SendTransmission(StringExternal("Param/Value/970E374B"), StringExternal("Param/Value/B9825995"), lib840A968C_ge_PreemptMessage_DontPreempt, lib840A968C_ge_MessageEventType_AlliedCommunication, c_messageAreaError, lib840A968C_ge_Faction_UGC, null);
    lib840A968C_gf_SendTransmission(StringExternal("Param/Value/2E901756"), StringExternal("Param/Value/63374128"), lib840A968C_ge_PreemptMessage_DontPreempt, lib840A968C_ge_MessageEventType_AlliedCommunication, c_messageAreaError, lib840A968C_ge_Faction_UGC, null);
    gv_transmissionLock = false;
}

void gf_MonolithBriefing () {
    // Variable Declarations
    playergroup lv_speakers;
    int lv_currentSpeaker;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_speakers = PlayerGroupCopy(lib840A968C_gf_GetLivingMarineSquadPlayers());

    // Implementation
    while (gv_transmissionLock) {
        Wait(1.0, c_timeGame);
    }
    gv_transmissionLock = true;
    lib840A968C_gf_SendTransmission(StringExternal("Param/Value/89F74CB0"), StringExternal("Param/Value/EE1D2C6F"), lib840A968C_ge_PreemptMessage_DontPreempt, lib840A968C_ge_MessageEventType_AlliedCommunication, c_messageAreaError, lib840A968C_ge_Faction_UGC, null);
    if ((PlayerGroupCount(lv_speakers) != 0)) {
        lv_currentSpeaker = lib09BE6BA8_gf_GetRandomPlayerfromPlayerGroup(lv_speakers);
        lib840A968C_gf_SendTransmission(lib840A968C_gf_GetPlayerNamewithrank(lv_currentSpeaker), StringExternal("Param/Value/0C4BFE5B"), lib840A968C_ge_PreemptMessage_DontPreempt, lib840A968C_ge_MessageEventType_AlliedCommunication, c_messageAreaError, lib840A968C_ge_Faction_Marines, lib840A968C_gf_GetMarine(lv_currentSpeaker));
    }

    lib840A968C_gf_SendTransmission(StringExternal("Param/Value/9C18A9E1"), StringExternal("Param/Value/60E642FE"), lib840A968C_ge_PreemptMessage_DontPreempt, lib840A968C_ge_MessageEventType_AlliedCommunication, c_messageAreaError, lib840A968C_ge_Faction_UGC, null);
    lib840A968C_gf_SendTransmission(lib840A968C_gf_GetPlayerNamewithrank(lv_currentSpeaker), StringExternal("Param/Value/CFC93932"), lib840A968C_ge_PreemptMessage_DontPreempt, lib840A968C_ge_MessageEventType_AlliedCommunication, c_messageAreaError, lib840A968C_ge_Faction_Marines, lib840A968C_gf_GetMarine(lv_currentSpeaker));
    lib840A968C_gf_SendTransmission(StringExternal("Param/Value/36C94946"), StringExternal("Param/Value/DBBFB2E1"), lib840A968C_ge_PreemptMessage_DontPreempt, lib840A968C_ge_MessageEventType_AlliedCommunication, c_messageAreaError, lib840A968C_ge_Faction_UGC, null);
    lib840A968C_gf_SendTransmission(StringExternal("Param/Value/32614EEB"), StringExternal("Param/Value/73768597"), lib840A968C_ge_PreemptMessage_DontPreempt, lib840A968C_ge_MessageEventType_AlliedCommunication, c_messageAreaError, lib840A968C_ge_Faction_UGC, null);
    gv_transmissionLock = false;
}

void gf_MonolithReinforcements () {
    // Variable Declarations
    point lv_dropPoint;
    unit lv_dropShip;

    // Automatic Variable Declarations
    int auto6A242A3C_n;
    int auto6A242A3C_i;

    // Variable Initialization

    // Implementation
    while (gv_transmissionLock) {
        Wait(1.0, c_timeGame);
    }
    gv_transmissionLock = true;
    lib840A968C_gf_SendTransmission(StringExternal("Param/Value/A8C1C70A"), StringExternal("Param/Value/849D27AF"), lib840A968C_ge_PreemptMessage_DontPreempt, lib840A968C_ge_MessageEventType_AlliedCommunication, c_messageAreaError, lib840A968C_ge_Faction_UGC, null);
    gv_transmissionLock = false;
    auto6A242A3C_n = gv_numberofSurvivingParatroopers;
    for (auto6A242A3C_i = 1; auto6A242A3C_i <= auto6A242A3C_n; auto6A242A3C_i += 1) {
        lv_dropPoint = lib09BE6BA8_gf_PointAtGroundLevelinRegion(RegionCircle(UnitGroupCenterOfGroup(lib840A968C_gf_GetMarineGroup()), 4.0));
        libNtve_gf_CreateActorAtPoint("BarracksDropPod", lv_dropPoint);
        Wait(2.2, c_timeGame);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Paratrooper", 0, lib1E3F036D_gv_peacekeeperPlayer, lv_dropPoint);
        UnitGroupAdd(gv_paratroopers, UnitLastCreated());
        UnitBehaviorAddPlayer(UnitLastCreated(), "AssaultRifleEquipped", lib1E3F036D_gv_peacekeeperPlayer, 1);
    }
    if (gv_fenwickSurvives) {
        lv_dropPoint = lib09BE6BA8_gf_PointAtGroundLevelinRegion(RegionCircle(UnitGroupCenterOfGroup(lib840A968C_gf_GetMarineGroup()), 4.0));
        libNtve_gf_CreateActorAtPoint("BarracksDropPod", lv_dropPoint);
        Wait(2.2, c_timeGame);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Paratrooper", 0, lib1E3F036D_gv_peacekeeperPlayer, lv_dropPoint);
        gv_staffSergeantFenwick = UnitLastCreated();
        UnitGroupAdd(gv_paratroopers, UnitLastCreated());
        UnitBehaviorAddPlayer(gv_staffSergeantFenwick, "StaffSergeantFenwick", lib1E3F036D_gv_peacekeeperPlayer, 1);
        UnitBehaviorAddPlayer(gv_staffSergeantFenwick, "EnhancedProtectiveInsert", lib1E3F036D_gv_peacekeeperPlayer, 1);
        while (gv_transmissionLock) {
            Wait(1.0, c_timeGame);
        }
        gv_transmissionLock = true;
        lib840A968C_gf_SendTransmission(StringExternal("Param/Value/DC0EB3E1"), StringExternal("Param/Value/3115D03A"), lib840A968C_ge_PreemptMessage_DontPreempt, lib840A968C_ge_MessageEventType_AlliedCommunication, c_messageAreaError, lib840A968C_ge_Faction_Peacekeepers, gv_staffSergeantFenwick);
        gv_transmissionLock = false;
    }
    Wait(1.5, c_timeGame);
    if (gv_fenwickSurvives) {
        while (gv_transmissionLock) {
            Wait(1.0, c_timeGame);
        }
        gv_transmissionLock = true;
        lib840A968C_gf_SendTransmission(StringExternal("Param/Value/4C2EE41C"), StringExternal("Param/Value/3640484C"), lib840A968C_ge_PreemptMessage_DontPreempt, lib840A968C_ge_MessageEventType_AlliedCommunication, c_messageAreaError, lib840A968C_ge_Faction_Peacekeepers, gv_staffSergeantFenwick);
        gv_transmissionLock = false;
    }
    Wait(1.5, c_timeGame);
    lv_dropPoint = lib09BE6BA8_gf_PointAtGroundLevelinRegion(RegionCircle(UnitGroupCenterOfGroup(lib840A968C_gf_GetMarineGroup()), 4.0));
    libNtve_gf_UnitCreateFacingPoint(1, "AuroraDropship", 0, lib1E3F036D_gv_peacekeeperPlayer, RegionGetBoundsMin(RegionEntireMap()), lv_dropPoint);
    lv_dropShip = UnitLastCreated();
    UnitSetPosition(lv_dropShip, lv_dropPoint, false);
    Wait(4.0, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "CrusaderTank", 0, lib1E3F036D_gv_peacekeeperPlayer, lv_dropPoint);
    UnitGroupAdd(gv_paratroopers, UnitLastCreated());
    libNtve_gf_SendActorMessageToUnit(lv_dropShip, "AnimPlay Land Land,Forward");
    Wait(4.0, c_timeGame);
    UnitSetHeight(lv_dropShip, 20.0, 10.0);
    Wait(3.0, c_timeGame);
    UnitRemove(lv_dropShip);
    if (gv_fenwickSurvives) {
        while (gv_transmissionLock) {
            Wait(1.0, c_timeGame);
        }
        gv_transmissionLock = true;
        lib840A968C_gf_SendTransmission(StringExternal("Param/Value/DA363574"), StringExternal("Param/Value/AD61331E"), lib840A968C_ge_PreemptMessage_DontPreempt, lib840A968C_ge_MessageEventType_AlliedCommunication, c_messageAreaError, lib840A968C_ge_Faction_Peacekeepers, gv_staffSergeantFenwick);
        gv_transmissionLock = false;
    }
    AIAttackWaveUseGroup(lib1E3F036D_gv_peacekeeperPlayer, gv_paratroopers);
    AIAttackWaveSetTargetEscort(lib1E3F036D_gv_peacekeeperPlayer, lib840A968C_gf_GetMarineGroup(), 0);
    AIAttackWaveSend(lib1E3F036D_gv_peacekeeperPlayer, 0, false);
}

void gf_ArmoryItemDrops () {
    // Automatic Variable Declarations
    const int autoB14EC5BE_n = 10;
    int autoB14EC5BE_i;
    const int auto757D1595_n = 2;
    int auto757D1595_i;
    const int autoCC79FED7_n = 2;
    int autoCC79FED7_i;
    const int auto054F80EB_n = 2;
    int auto054F80EB_i;
    const int autoC032B21B_n = 2;
    int autoC032B21B_i;
    const int autoCAF55FE3_n = 2;
    int autoCAF55FE3_i;

    // Implementation
    for (autoB14EC5BE_i = 1; autoB14EC5BE_i <= autoB14EC5BE_n; autoB14EC5BE_i += 1) {
        lib840A968C_gf_SpawnItem(RegionRandomPoint(RegionFromId(11)), "Magazine", lib840A968C_ge_DropMethod_Locker);
    }
    for (auto757D1595_i = 1; auto757D1595_i <= auto757D1595_n; auto757D1595_i += 1) {
        lib840A968C_gf_SpawnItem(RegionRandomPoint(RegionFromId(11)), "RoadFlare", lib840A968C_ge_DropMethod_Locker);
    }
    for (autoCC79FED7_i = 1; autoCC79FED7_i <= autoCC79FED7_n; autoCC79FED7_i += 1) {
        lib840A968C_gf_SpawnItem(RegionRandomPoint(RegionFromId(23)), "ArmoredProtectiveInsert", lib840A968C_ge_DropMethod_Locker);
    }
    lib840A968C_gf_SpawnItem(RegionRandomPoint(RegionFromId(23)), "EnhancedProtectiveInsert", lib840A968C_ge_DropMethod_Locker);
    for (auto054F80EB_i = 1; auto054F80EB_i <= auto054F80EB_n; auto054F80EB_i += 1) {
        lib840A968C_gf_SpawnItem(RegionRandomPoint(RegionFromId(23)), "ImprovedAccuracyModule", lib840A968C_ge_DropMethod_Locker);
    }
    for (autoC032B21B_i = 1; autoC032B21B_i <= autoC032B21B_n; autoC032B21B_i += 1) {
        lib840A968C_gf_SpawnItem(RegionRandomPoint(RegionFromId(8)), "Flamethrower", lib840A968C_ge_DropMethod_Locker);
    }
    for (autoCAF55FE3_i = 1; autoCAF55FE3_i <= autoCAF55FE3_n; autoCAF55FE3_i += 1) {
        lib840A968C_gf_SpawnItem(RegionRandomPoint(RegionFromId(8)), "MarksmanRifle", lib840A968C_ge_DropMethod_Locker);
    }
    lib840A968C_gf_SpawnItem(RegionRandomPoint(RegionFromId(8)), "MediumMachineGun", lib840A968C_ge_DropMethod_Locker);
    lib840A968C_gf_SpawnItem(RegionRandomPoint(RegionFromId(8)), "AutomaticShotgun", lib840A968C_ge_DropMethod_Locker);
    lib840A968C_gf_SpawnItem(RegionRandomPoint(RegionFromId(8)), "PumpShotgun", lib840A968C_ge_DropMethod_Locker);
}

void gf_Chapter1AirItemDrops () {
    // Automatic Variable Declarations
    const int auto3D7CF007_n = 30;
    int auto3D7CF007_i;
    const int autoC2B3695E_n = 2;
    int autoC2B3695E_i;
    const int auto648672B2_n = 6;
    int auto648672B2_i;
    const int autoFD994822_n = 4;
    int autoFD994822_i;
    const int autoCED4AA4B_n = 4;
    int autoCED4AA4B_i;
    const int autoB3F62833_n = 2;
    int autoB3F62833_i;
    const int auto75F66EA4_n = 4;
    int auto75F66EA4_i;
    const int auto30A5FCF4_n = 4;
    int auto30A5FCF4_i;
    const int auto67A12241_n = 4;
    int auto67A12241_i;
    const int autoEBDBC88D_n = 2;
    int autoEBDBC88D_i;
    const int auto6D5BBB26_n = 2;
    int auto6D5BBB26_i;
    const int auto151D018F_n = 2;
    int auto151D018F_i;
    const int autoE972A8CC_n = 2;
    int autoE972A8CC_i;
    const int autoB5452822_n = 3;
    int autoB5452822_i;
    const int auto84CD1C57_n = 3;
    int auto84CD1C57_i;
    const int auto10B4A214_n = 2;
    int auto10B4A214_i;
    const int autoDA4A5507_n = 2;
    int autoDA4A5507_i;

    // Implementation
    for (auto3D7CF007_i = 1; auto3D7CF007_i <= auto3D7CF007_n; auto3D7CF007_i += 1) {
        lib840A968C_gf_SpawnItem(RegionRandomPoint(RegionFromId(4)), "Magazine", lib840A968C_ge_DropMethod_Orbital);
    }
    for (autoC2B3695E_i = 1; autoC2B3695E_i <= autoC2B3695E_n; autoC2B3695E_i += 1) {
        lib840A968C_gf_SpawnItem(RegionRandomPoint(RegionFromId(4)), "AmmunitionCase", lib840A968C_ge_DropMethod_Orbital);
    }
    for (auto648672B2_i = 1; auto648672B2_i <= auto648672B2_n; auto648672B2_i += 1) {
        lib840A968C_gf_SpawnItem(RegionRandomPoint(RegionFromId(4)), "Medkit", lib840A968C_ge_DropMethod_Orbital);
    }
    for (autoFD994822_i = 1; autoFD994822_i <= autoFD994822_n; autoFD994822_i += 1) {
        lib840A968C_gf_SpawnItem(RegionRandomPoint(RegionFromId(4)), "Bandage", lib840A968C_ge_DropMethod_Orbital);
    }
    for (autoCED4AA4B_i = 1; autoCED4AA4B_i <= autoCED4AA4B_n; autoCED4AA4B_i += 1) {
        lib840A968C_gf_SpawnItem(RegionRandomPoint(RegionFromId(4)), "AntiVenom", lib840A968C_ge_DropMethod_Orbital);
    }
    for (autoB3F62833_i = 1; autoB3F62833_i <= autoB3F62833_n; autoB3F62833_i += 1) {
        lib840A968C_gf_SpawnItem(RegionRandomPoint(RegionFromId(4)), "MendingPaste", lib840A968C_ge_DropMethod_Orbital);
    }
    for (auto75F66EA4_i = 1; auto75F66EA4_i <= auto75F66EA4_n; auto75F66EA4_i += 1) {
        lib840A968C_gf_SpawnItem(RegionRandomPoint(RegionFromId(4)), "RoadFlare", lib840A968C_ge_DropMethod_Orbital);
    }
    for (auto30A5FCF4_i = 1; auto30A5FCF4_i <= auto30A5FCF4_n; auto30A5FCF4_i += 1) {
        lib840A968C_gf_SpawnItem(RegionRandomPoint(RegionFromId(4)), "FlareGun", lib840A968C_ge_DropMethod_Orbital);
    }

    for (auto67A12241_i = 1; auto67A12241_i <= auto67A12241_n; auto67A12241_i += 1) {
        lib840A968C_gf_SpawnItem(RegionRandomPoint(RegionFromId(4)), "ArmoredProtectiveInsert", lib840A968C_ge_DropMethod_Orbital);
    }
    for (autoEBDBC88D_i = 1; autoEBDBC88D_i <= autoEBDBC88D_n; autoEBDBC88D_i += 1) {
        lib840A968C_gf_SpawnItem(RegionRandomPoint(RegionFromId(4)), "EnhancedProtectiveInsert", lib840A968C_ge_DropMethod_Orbital);
    }

    for (auto6D5BBB26_i = 1; auto6D5BBB26_i <= auto6D5BBB26_n; auto6D5BBB26_i += 1) {
        lib840A968C_gf_SpawnItem(RegionRandomPoint(RegionFromId(4)), "FieldLights", lib840A968C_ge_DropMethod_Orbital);
    }
    lib840A968C_gf_SpawnItem(RegionRandomPoint(RegionFromId(4)), "RiotShield", lib840A968C_ge_DropMethod_Orbital);
    lib840A968C_gf_SpawnItem(RegionRandomPoint(RegionFromId(4)), "HighCapacityMagazine", lib840A968C_ge_DropMethod_Orbital);
    lib840A968C_gf_SpawnItem(RegionRandomPoint(RegionFromId(4)), "ImprovedAccuracyModule", lib840A968C_ge_DropMethod_Orbital);

    for (auto151D018F_i = 1; auto151D018F_i <= auto151D018F_n; auto151D018F_i += 1) {
        lib840A968C_gf_SpawnItem(RegionRandomPoint(RegionFromId(4)), "ArmorPiercing", lib840A968C_ge_DropMethod_Orbital);
    }
    for (autoE972A8CC_i = 1; autoE972A8CC_i <= autoE972A8CC_n; autoE972A8CC_i += 1) {
        lib840A968C_gf_SpawnItem(RegionRandomPoint(RegionFromId(4)), "HighExplosive", lib840A968C_ge_DropMethod_Orbital);
    }
    lib840A968C_gf_SpawnItem(RegionRandomPoint(RegionFromId(4)), "Flechette", lib840A968C_ge_DropMethod_Orbital);
    lib840A968C_gf_SpawnItem(RegionRandomPoint(RegionFromId(4)), "HecateModule", lib840A968C_ge_DropMethod_Orbital);
    lib840A968C_gf_SpawnItem(RegionRandomPoint(RegionFromId(4)), "Expanding", lib840A968C_ge_DropMethod_Orbital);
    lib840A968C_gf_SpawnItem(RegionRandomPoint(RegionFromId(4)), "PlasmaCore", lib840A968C_ge_DropMethod_Orbital);

    for (autoB5452822_i = 1; autoB5452822_i <= autoB5452822_n; autoB5452822_i += 1) {
        lib840A968C_gf_SpawnItem(RegionRandomPoint(RegionFromId(4)), "Flamethrower", lib840A968C_ge_DropMethod_Orbital);
    }
    for (auto84CD1C57_i = 1; auto84CD1C57_i <= auto84CD1C57_n; auto84CD1C57_i += 1) {
        lib840A968C_gf_SpawnItem(RegionRandomPoint(RegionFromId(4)), "MarksmanRifle", lib840A968C_ge_DropMethod_Orbital);
    }
    for (auto10B4A214_i = 1; auto10B4A214_i <= auto10B4A214_n; auto10B4A214_i += 1) {
        lib840A968C_gf_SpawnItem(RegionRandomPoint(RegionFromId(4)), "PumpShotgun", lib840A968C_ge_DropMethod_Orbital);
    }
    for (autoDA4A5507_i = 1; autoDA4A5507_i <= autoDA4A5507_n; autoDA4A5507_i += 1) {
        lib840A968C_gf_SpawnItem(RegionRandomPoint(RegionFromId(4)), "SubmachineGun", lib840A968C_ge_DropMethod_Orbital);
    }
    lib840A968C_gf_SpawnItem(RegionRandomPoint(RegionFromId(4)), "MediumMachineGun", lib840A968C_ge_DropMethod_Orbital);
    lib840A968C_gf_SpawnItem(RegionRandomPoint(RegionFromId(4)), "AutomaticShotgun", lib840A968C_ge_DropMethod_Orbital);

}

void gf_Chapter3AirItemDrops () {
    // Automatic Variable Declarations
    const int autoC1155CB6_n = 20;
    int autoC1155CB6_i;
    const int auto02623865_n = 2;
    int auto02623865_i;
    const int auto4DF36D52_n = 2;
    int auto4DF36D52_i;
    const int autoA547DE1F_n = 2;
    int autoA547DE1F_i;
    const int auto8260DB4E_n = 2;
    int auto8260DB4E_i;
    const int auto022D714E_n = 2;
    int auto022D714E_i;
    const int autoE1B10C21_n = 2;
    int autoE1B10C21_i;
    const int auto234FF5CF_n = 2;
    int auto234FF5CF_i;
    const int autoAF2F1D85_n = 2;
    int autoAF2F1D85_i;
    const int autoFBE6586C_n = 2;
    int autoFBE6586C_i;
    const int auto4EDE4524_n = 2;
    int auto4EDE4524_i;
    const int autoFC6998F3_n = 2;
    int autoFC6998F3_i;
    const int auto7291F8D3_n = 2;
    int auto7291F8D3_i;
    const int autoE49CBBDD_n = 2;
    int autoE49CBBDD_i;
    const int autoC2BB22E2_n = 2;
    int autoC2BB22E2_i;
    const int auto3AFDFBCF_n = 2;
    int auto3AFDFBCF_i;

    // Implementation
    for (autoC1155CB6_i = 1; autoC1155CB6_i <= autoC1155CB6_n; autoC1155CB6_i += 1) {
        lib840A968C_gf_SpawnItem(RegionRandomPoint(RegionFromId(4)), "Magazine", lib840A968C_ge_DropMethod_Orbital);
    }
    for (auto02623865_i = 1; auto02623865_i <= auto02623865_n; auto02623865_i += 1) {
        lib840A968C_gf_SpawnItem(RegionRandomPoint(RegionFromId(4)), "AmmunitionCase", lib840A968C_ge_DropMethod_Orbital);
    }
    for (auto4DF36D52_i = 1; auto4DF36D52_i <= auto4DF36D52_n; auto4DF36D52_i += 1) {
        lib840A968C_gf_SpawnItem(RegionRandomPoint(RegionFromId(4)), "Medkit", lib840A968C_ge_DropMethod_Orbital);
    }
    for (autoA547DE1F_i = 1; autoA547DE1F_i <= autoA547DE1F_n; autoA547DE1F_i += 1) {
        lib840A968C_gf_SpawnItem(RegionRandomPoint(RegionFromId(4)), "Bandage", lib840A968C_ge_DropMethod_Orbital);
    }
    for (auto8260DB4E_i = 1; auto8260DB4E_i <= auto8260DB4E_n; auto8260DB4E_i += 1) {
        lib840A968C_gf_SpawnItem(RegionRandomPoint(RegionFromId(4)), "AntiVenom", lib840A968C_ge_DropMethod_Orbital);
    }
    for (auto022D714E_i = 1; auto022D714E_i <= auto022D714E_n; auto022D714E_i += 1) {
        lib840A968C_gf_SpawnItem(RegionRandomPoint(RegionFromId(4)), "MendingPaste", lib840A968C_ge_DropMethod_Orbital);
    }
    for (autoE1B10C21_i = 1; autoE1B10C21_i <= autoE1B10C21_n; autoE1B10C21_i += 1) {
        lib840A968C_gf_SpawnItem(RegionRandomPoint(RegionFromId(4)), "RoadFlare", lib840A968C_ge_DropMethod_Orbital);
    }
    for (auto234FF5CF_i = 1; auto234FF5CF_i <= auto234FF5CF_n; auto234FF5CF_i += 1) {
        lib840A968C_gf_SpawnItem(RegionRandomPoint(RegionFromId(4)), "FlareGun", lib840A968C_ge_DropMethod_Orbital);
    }

    for (autoAF2F1D85_i = 1; autoAF2F1D85_i <= autoAF2F1D85_n; autoAF2F1D85_i += 1) {
        lib840A968C_gf_SpawnItem(RegionRandomPoint(RegionFromId(4)), "EnhancedProtectiveInsert", lib840A968C_ge_DropMethod_Orbital);
    }
    for (autoFBE6586C_i = 1; autoFBE6586C_i <= autoFBE6586C_n; autoFBE6586C_i += 1) {
        lib840A968C_gf_SpawnItem(RegionRandomPoint(RegionFromId(4)), "HeavyProtectiveInsert", lib840A968C_ge_DropMethod_Orbital);
    }
    lib840A968C_gf_SpawnItem(RegionRandomPoint(RegionFromId(4)), "ReactiveProtectiveInsert", lib840A968C_ge_DropMethod_Orbital);
    lib840A968C_gf_SpawnItem(RegionRandomPoint(RegionFromId(4)), "ShieldAugmentationInsert", lib840A968C_ge_DropMethod_Orbital);

    lib840A968C_gf_SpawnItem(RegionRandomPoint(RegionFromId(4)), "RiotShield", lib840A968C_ge_DropMethod_Orbital);
    lib840A968C_gf_SpawnItem(RegionRandomPoint(RegionFromId(4)), "HighCapacityMagazine", lib840A968C_ge_DropMethod_Orbital);
    lib840A968C_gf_SpawnItem(RegionRandomPoint(RegionFromId(4)), "ImprovedAccuracyModule", lib840A968C_ge_DropMethod_Orbital);
    lib840A968C_gf_SpawnItem(RegionRandomPoint(RegionFromId(4)), "NanoHealthAugment", lib840A968C_ge_DropMethod_Orbital);
    lib840A968C_gf_SpawnItem(RegionRandomPoint(RegionFromId(4)), "CombatMobilityAugment", lib840A968C_ge_DropMethod_Orbital);
    lib840A968C_gf_SpawnItem(RegionRandomPoint(RegionFromId(4)), "PowerGeneratorAugment", lib840A968C_ge_DropMethod_Orbital);

    for (auto4EDE4524_i = 1; auto4EDE4524_i <= auto4EDE4524_n; auto4EDE4524_i += 1) {
        lib840A968C_gf_SpawnItem(RegionRandomPoint(RegionFromId(4)), "HecateModule", lib840A968C_ge_DropMethod_Orbital);
    }
    for (autoFC6998F3_i = 1; autoFC6998F3_i <= autoFC6998F3_n; autoFC6998F3_i += 1) {
        lib840A968C_gf_SpawnItem(RegionRandomPoint(RegionFromId(4)), "Expanding", lib840A968C_ge_DropMethod_Orbital);
    }
    for (auto7291F8D3_i = 1; auto7291F8D3_i <= auto7291F8D3_n; auto7291F8D3_i += 1) {
        lib840A968C_gf_SpawnItem(RegionRandomPoint(RegionFromId(4)), "PlasmaCore", lib840A968C_ge_DropMethod_Orbital);
    }
    lib840A968C_gf_SpawnItem(RegionRandomPoint(RegionFromId(4)), "ArmorPiercing", lib840A968C_ge_DropMethod_Orbital);

    for (autoE49CBBDD_i = 1; autoE49CBBDD_i <= autoE49CBBDD_n; autoE49CBBDD_i += 1) {
        lib840A968C_gf_SpawnItem(RegionRandomPoint(RegionFromId(4)), "Flamethrower", lib840A968C_ge_DropMethod_Orbital);
    }
    for (autoC2BB22E2_i = 1; autoC2BB22E2_i <= autoC2BB22E2_n; autoC2BB22E2_i += 1) {
        lib840A968C_gf_SpawnItem(RegionRandomPoint(RegionFromId(4)), "LaserRifle", lib840A968C_ge_DropMethod_Orbital);
    }
    for (auto3AFDFBCF_i = 1; auto3AFDFBCF_i <= auto3AFDFBCF_n; auto3AFDFBCF_i += 1) {
        lib840A968C_gf_SpawnItem(RegionRandomPoint(RegionFromId(4)), "MediumMachineGun", lib840A968C_ge_DropMethod_Orbital);
    }
    lib840A968C_gf_SpawnItem(RegionRandomPoint(RegionFromId(4)), "AntiMaterialRifle", lib840A968C_ge_DropMethod_Orbital);
    lib840A968C_gf_SpawnItem(RegionRandomPoint(RegionFromId(4)), "HeavyMachineGun", lib840A968C_ge_DropMethod_Orbital);
    lib840A968C_gf_SpawnItem(RegionRandomPoint(RegionFromId(4)), "AutomaticShotgun", lib840A968C_ge_DropMethod_Orbital);

}

void gf_Chapter5AirItemDrops () {
    // Automatic Variable Declarations
    const int auto53E57557_n = 20;
    int auto53E57557_i;
    const int auto4B049E5C_n = 2;
    int auto4B049E5C_i;
    const int auto9E213753_n = 2;
    int auto9E213753_i;
    const int autoC2146671_n = 2;
    int autoC2146671_i;
    const int autoB9BA0BF8_n = 2;
    int autoB9BA0BF8_i;
    const int auto07B8B3EE_n = 2;
    int auto07B8B3EE_i;
    const int auto763CE08C_n = 2;
    int auto763CE08C_i;
    const int auto4650B3EB_n = 2;
    int auto4650B3EB_i;
    const int autoFBC81AE2_n = 2;
    int autoFBC81AE2_i;
    const int autoDD8E14FC_n = 2;
    int autoDD8E14FC_i;
    const int autoF2ECBFB5_n = 4;
    int autoF2ECBFB5_i;
    const int autoCC644450_n = 2;
    int autoCC644450_i;
    const int autoD6D9EF2A_n = 2;
    int autoD6D9EF2A_i;
    const int autoCC5A3339_n = 2;
    int autoCC5A3339_i;

    // Implementation
    for (auto53E57557_i = 1; auto53E57557_i <= auto53E57557_n; auto53E57557_i += 1) {
        lib840A968C_gf_SpawnItem(RegionRandomPoint(RegionFromId(4)), "Magazine", lib840A968C_ge_DropMethod_Orbital);
    }
    for (auto4B049E5C_i = 1; auto4B049E5C_i <= auto4B049E5C_n; auto4B049E5C_i += 1) {
        lib840A968C_gf_SpawnItem(RegionRandomPoint(RegionFromId(4)), "Medkit", lib840A968C_ge_DropMethod_Orbital);
    }
    for (auto9E213753_i = 1; auto9E213753_i <= auto9E213753_n; auto9E213753_i += 1) {
        lib840A968C_gf_SpawnItem(RegionRandomPoint(RegionFromId(4)), "Bandage", lib840A968C_ge_DropMethod_Orbital);
    }
    for (autoC2146671_i = 1; autoC2146671_i <= autoC2146671_n; autoC2146671_i += 1) {
        lib840A968C_gf_SpawnItem(RegionRandomPoint(RegionFromId(4)), "AntiVenom", lib840A968C_ge_DropMethod_Orbital);
    }
    for (autoB9BA0BF8_i = 1; autoB9BA0BF8_i <= autoB9BA0BF8_n; autoB9BA0BF8_i += 1) {
        lib840A968C_gf_SpawnItem(RegionRandomPoint(RegionFromId(4)), "MendingPaste", lib840A968C_ge_DropMethod_Orbital);
    }
    for (auto07B8B3EE_i = 1; auto07B8B3EE_i <= auto07B8B3EE_n; auto07B8B3EE_i += 1) {
        lib840A968C_gf_SpawnItem(RegionRandomPoint(RegionFromId(4)), "RoadFlare", lib840A968C_ge_DropMethod_Orbital);
    }
    for (auto763CE08C_i = 1; auto763CE08C_i <= auto763CE08C_n; auto763CE08C_i += 1) {
        lib840A968C_gf_SpawnItem(RegionRandomPoint(RegionFromId(4)), "FlareGun", lib840A968C_ge_DropMethod_Orbital);
    }

    for (auto4650B3EB_i = 1; auto4650B3EB_i <= auto4650B3EB_n; auto4650B3EB_i += 1) {
        lib840A968C_gf_SpawnItem(RegionRandomPoint(RegionFromId(4)), "HeavyProtectiveInsert", lib840A968C_ge_DropMethod_Orbital);
    }
    lib840A968C_gf_SpawnItem(RegionRandomPoint(RegionFromId(4)), "ReactiveProtectiveInsert", lib840A968C_ge_DropMethod_Orbital);
    lib840A968C_gf_SpawnItem(RegionRandomPoint(RegionFromId(4)), "ShieldAugmentationInsert", lib840A968C_ge_DropMethod_Orbital);

    lib840A968C_gf_SpawnItem(RegionRandomPoint(RegionFromId(4)), "HighCapacityMagazine", lib840A968C_ge_DropMethod_Orbital);
    lib840A968C_gf_SpawnItem(RegionRandomPoint(RegionFromId(4)), "ImprovedAccuracyModule", lib840A968C_ge_DropMethod_Orbital);
    lib840A968C_gf_SpawnItem(RegionRandomPoint(RegionFromId(4)), "NanoHealthAugment", lib840A968C_ge_DropMethod_Orbital);
    lib840A968C_gf_SpawnItem(RegionRandomPoint(RegionFromId(4)), "CombatMobilityAugment", lib840A968C_ge_DropMethod_Orbital);
    lib840A968C_gf_SpawnItem(RegionRandomPoint(RegionFromId(4)), "PowerGeneratorAugment", lib840A968C_ge_DropMethod_Orbital);

    for (autoFBC81AE2_i = 1; autoFBC81AE2_i <= autoFBC81AE2_n; autoFBC81AE2_i += 1) {
        lib840A968C_gf_SpawnItem(RegionRandomPoint(RegionFromId(4)), "HecateModule", lib840A968C_ge_DropMethod_Orbital);
    }
    for (autoDD8E14FC_i = 1; autoDD8E14FC_i <= autoDD8E14FC_n; autoDD8E14FC_i += 1) {
        lib840A968C_gf_SpawnItem(RegionRandomPoint(RegionFromId(4)), "PlasmaCore", lib840A968C_ge_DropMethod_Orbital);
    }
    if ((gv_tX1Discovered == true)) {
        for (autoF2ECBFB5_i = 1; autoF2ECBFB5_i <= autoF2ECBFB5_n; autoF2ECBFB5_i += 1) {
            lib840A968C_gf_SpawnItem(RegionRandomPoint(RegionFromId(4)), "TX1", lib840A968C_ge_DropMethod_Orbital);
        }
    }

    for (autoCC644450_i = 1; autoCC644450_i <= autoCC644450_n; autoCC644450_i += 1) {
        lib840A968C_gf_SpawnItem(RegionRandomPoint(RegionFromId(4)), "AntiMaterialRifle", lib840A968C_ge_DropMethod_Orbital);
    }
    for (autoD6D9EF2A_i = 1; autoD6D9EF2A_i <= autoD6D9EF2A_n; autoD6D9EF2A_i += 1) {
        lib840A968C_gf_SpawnItem(RegionRandomPoint(RegionFromId(4)), "LaserRifle", lib840A968C_ge_DropMethod_Orbital);
    }
    for (autoCC5A3339_i = 1; autoCC5A3339_i <= autoCC5A3339_n; autoCC5A3339_i += 1) {
        lib840A968C_gf_SpawnItem(RegionRandomPoint(RegionFromId(4)), "HeavyMachineGun", lib840A968C_ge_DropMethod_Orbital);
    }

}

//--------------------------------------------------------------------------------------------------
// Trigger: Register Marines with Triggers
//--------------------------------------------------------------------------------------------------
bool gt_RegisterMarineswithTriggers_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoA11C3D95_g;
    int autoA11C3D95_u;

    // Actions
    if (!runActions) {
        return true;
    }

    autoA11C3D95_g = lib840A968C_gf_GetMarineGroup();
    autoA11C3D95_u = UnitGroupCount(autoA11C3D95_g, c_unitCountAll);
    for (;; autoA11C3D95_u -= 1) {
        gv_registrationUnit = UnitGroupUnitFromEnd(autoA11C3D95_g, autoA11C3D95_u);
        if (gv_registrationUnit == null) { break; }
        TriggerAddEventUnitRegion(gt_DeadBodiesDiscovered, UnitRefFromUnit(lib09BE6BA8_gf_ReturnUnit(gv_registrationUnit)), RegionFromId(5), true);
        TriggerAddEventUnitRegion(gt_MilitaryHQSpotted, UnitRefFromUnit(lib09BE6BA8_gf_ReturnUnit(gv_registrationUnit)), RegionCircle(PointFromId(1930), 10.0), true);
        TriggerAddEventUnitRegion(gt_EnteringMilitaryBase, UnitRefFromUnit(lib09BE6BA8_gf_ReturnUnit(gv_registrationUnit)), RegionCircle(PointFromId(2070), 10.0), true);
        TriggerAddEventUnitRegion(gt_CustomsLockup, UnitRefFromUnit(lib09BE6BA8_gf_ReturnUnit(gv_registrationUnit)), RegionFromId(22), true);
        TriggerAddEventUnitRegion(gt_WarzoneTransmission, UnitRefFromUnit(lib09BE6BA8_gf_ReturnUnit(gv_registrationUnit)), RegionFromId(17), true);
        TriggerAddEventUnitRegion(gt_WarzoneTransmission, UnitRefFromUnit(lib09BE6BA8_gf_ReturnUnit(gv_registrationUnit)), RegionFromId(6), true);
        TriggerAddEventUnitRegion(gt_WarzoneAmmoMarine1, UnitRefFromUnit(lib09BE6BA8_gf_ReturnUnit(gv_registrationUnit)), RegionFromId(18), true);
        TriggerAddEventUnitRegion(gt_WarzoneAmmoMarine2, UnitRefFromUnit(lib09BE6BA8_gf_ReturnUnit(gv_registrationUnit)), RegionFromId(19), true);
        TriggerAddEventUnitRegion(gt_WarzoneAmmoMarine3, UnitRefFromUnit(lib09BE6BA8_gf_ReturnUnit(gv_registrationUnit)), RegionFromId(20), true);
        TriggerAddEventUnitRegion(gt_WarzoneAmmoMarine4, UnitRefFromUnit(lib09BE6BA8_gf_ReturnUnit(gv_registrationUnit)), RegionFromId(21), true);
        TriggerAddEventUnitRangePoint(gt_PlayerReachesPeacekeepers, UnitRefFromUnit(lib09BE6BA8_gf_ReturnUnit(gv_registrationUnit)), gv_peacekeeperHoldout, 10.0, true);
        TriggerAddEventUnitRangePoint(gt_PlayerReturntoPeacekeeperHoldout, UnitRefFromUnit(lib09BE6BA8_gf_ReturnUnit(gv_registrationUnit)), gv_peacekeeperHoldout, 8.0, true);
        TriggerAddEventUnitRangePoint(gt_PlayerRescuesCivilians, UnitRefFromUnit(lib09BE6BA8_gf_ReturnUnit(gv_registrationUnit)), gv_civilianRescuePoint, 10.0, true);
        TriggerAddEventUnitRangePoint(gt_PlayersFailtoRescue, UnitRefFromUnit(lib09BE6BA8_gf_ReturnUnit(gv_registrationUnit)), gv_civilianRescuePoint, 10.0, true);
        TriggerAddEventUnitRangePoint(gt_TeamReachesReactor, UnitRefFromUnit(lib09BE6BA8_gf_ReturnUnit(gv_registrationUnit)), PointFromId(3280), 10.0, true);
        TriggerAddEventUnitRangePoint(gt_LabEntranceChatter, UnitRefFromUnit(lib09BE6BA8_gf_ReturnUnit(gv_registrationUnit)), PointFromId(4635), 4.0, true);
        TriggerAddEventUnitRangePoint(gt_ReceptionAreaTransmission, UnitRefFromUnit(lib09BE6BA8_gf_ReturnUnit(gv_registrationUnit)), PointFromId(4570), 6.0, true);
        TriggerAddEventUnitRangePoint(gt_InfestationResearchTransmission, UnitRefFromUnit(lib09BE6BA8_gf_ReturnUnit(gv_registrationUnit)), PointFromId(4573), 5.0, true);
        TriggerAddEventUnitRangePoint(gt_CharliePen, UnitRefFromUnit(lib09BE6BA8_gf_ReturnUnit(gv_registrationUnit)), PointFromId(4572), (2.0 * gv_distancetoDiscover), true);
        TriggerAddEventUnitRangePoint(gt_DemeterWorkstation, UnitRefFromUnit(lib09BE6BA8_gf_ReturnUnit(gv_registrationUnit)), PointFromId(4704), gv_distancetoDiscover, true);
        TriggerAddEventUnitRangePoint(gt_DissectionWorkstation, UnitRefFromUnit(lib09BE6BA8_gf_ReturnUnit(gv_registrationUnit)), PointFromId(4703), gv_distancetoDiscover, true);
        TriggerAddEventUnitRangePoint(gt_PoolviewingDeck, UnitRefFromUnit(lib09BE6BA8_gf_ReturnUnit(gv_registrationUnit)), PointFromId(4702), gv_distancetoDiscover, true);
        TriggerAddEventUnitRangePoint(gt_WorkstationTX1, UnitRefFromUnit(lib09BE6BA8_gf_ReturnUnit(gv_registrationUnit)), PointFromId(4699), gv_distancetoDiscover, true);
        TriggerAddEventUnitRangePoint(gt_CharlieEscapeHole, UnitRefFromUnit(lib09BE6BA8_gf_ReturnUnit(gv_registrationUnit)), PointFromId(4636), (3.0 * gv_distancetoDiscover), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RegisterMarineswithTriggers_Init () {
    gt_RegisterMarineswithTriggers = TriggerCreate("gt_RegisterMarineswithTriggers_Func");
    TriggerAddEventGeneric(gt_RegisterMarineswithTriggers, lib840A968C_gv_eventRegistrationSignal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intialize Armory Gate
//--------------------------------------------------------------------------------------------------
bool gt_IntializeArmoryGate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetState(UnitFromId(137), c_unitStateInvulnerable, true);
    UnitSetState(UnitFromId(137), c_unitStateTargetable, false);
    UnitSetState(UnitFromId(137), c_unitStateSelectable, false);
    UnitSetState(UnitFromId(137), c_unitStateStatusBar, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntializeArmoryGate_Init () {
    gt_IntializeArmoryGate = TriggerCreate("gt_IntializeArmoryGate_Func");
    TriggerAddEventMapInit(gt_IntializeArmoryGate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Game Path
//--------------------------------------------------------------------------------------------------
bool gt_GamePath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto845038F6_val;

    // Actions
    if (!runActions) {
        return true;
    }

    auto845038F6_val = lib1E3F036D_gf_GameType();
    if (auto845038F6_val == 0) {
        TriggerExecute(gt_RecruitArrival, true, false);

    }
    else if (auto845038F6_val == 1) {
        TriggerExecute(gt_NormalArrival, true, false);

    }
    else if (auto845038F6_val == 2) {
        TriggerExecute(gt_RecruitArrival, true, false);

    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GamePath_Init () {
    gt_GamePath = TriggerCreate("gt_GamePath_Func");
    TriggerAddEventGeneric(gt_GamePath, lib840A968C_gv_intializeEvent);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Set Bullies
//--------------------------------------------------------------------------------------------------
bool gt_SetBullies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_SetBullyLocations();
    gf_SetActiveBullyRegions();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SetBullies_Init () {
    gt_SetBullies = TriggerCreate("gt_SetBullies_Func");
    TriggerAddEventMapInit(gt_SetBullies);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Recruit Arrival
//--------------------------------------------------------------------------------------------------
bool gt_RecruitArrival_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_dropship;
    int lv_player;

    // Automatic Variable Declarations
    playergroup autoC4330A45_g;
    playergroup auto3416D25A_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lib840A968C_gf_ChapterStart(0);
    gv_recruitArrivalMissionToken = lib840A968C_gf_MissionStart("Recruit Arrival", null, gv_peacekeeperEvent);
    PingCreate(PlayerGroupAll(), "PingObjective", PointFromId(327), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 360.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/ACC6F38E"));
    PingSetScale(PingLastCreated(), 0.6);
    gv_headquartersBeacon = PingLastCreated();
    autoC4330A45_g = lib840A968C_gf_GetMarineSquadPlayers();
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(autoC4330A45_g, lv_player);
        if (lv_player < 0) { break; }
        CameraPan(lv_player, PointFromId(725), 0.0, -1, 10.0, false);
    }
    libNtve_gf_UnitCreateFacingPoint(1, "AuroraDropshipFlying", 0, lib1E3F036D_gv_peacekeeperPlayer, PointWithOffset(PointFromId(725), -21.0, 0.0), PointFromId(725));
    lv_dropship = UnitLastCreated();
    UnitSetState(lv_dropship, c_unitStateSelectable, false);
    UnitSetState(lv_dropship, c_unitStateStatusBar, false);
    UnitSetState(lv_dropship, c_unitStateInvulnerable, true);
    UnitIssueOrder(lv_dropship, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(725)), c_orderQueueReplace);
    UnitWaitUntilIdle(lv_dropship, true);
    auto3416D25A_g = lib840A968C_gf_GetMarineSquadPlayers();
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto3416D25A_g, lv_player);
        if (lv_player < 0) { break; }
        libC50FD636_gf_ClassCreation(PointFromId(725), lv_player);
        Wait(0.3, c_timeGame);
        CameraLockInput(lv_player, false);
    }
    TriggerSendEvent(lib840A968C_gv_eventRegistrationSignal);
    UnitIssueOrder(lv_dropship, OrderTargetingPoint(AbilityCommand("move", 0), Point(255.0, 0.0)), c_orderQueueReplace);
    Wait(10.0, c_timeGame);
    UnitRemove(lv_dropship);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RecruitArrival_Init () {
    gt_RecruitArrival = TriggerCreate("gt_RecruitArrival_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dead Bodies Discovered
//--------------------------------------------------------------------------------------------------
bool gt_DeadBodiesDiscovered_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_discoveringUnit;
    int lv_discoveringPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_discoveringUnit = EventUnit();
    lv_discoveringPlayer = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (gv_transmissionLock) {
        Wait(1.0, c_timeGame);
    }
    gv_transmissionLock = true;
    lib840A968C_gf_SendTransmission(lib840A968C_gf_GetPlayerNamewithrank(lv_discoveringPlayer), StringExternal("Param/Value/032B5FAA"), lib840A968C_ge_PreemptMessage_DontPreempt, lib840A968C_ge_MessageEventType_AlliedCommunication, c_messageAreaError, lib840A968C_ge_Faction_Marines, lib840A968C_gf_GetMarine(lv_discoveringPlayer));
    lib840A968C_gf_SendTransmission(StringExternal("Param/Value/7B7A3F56"), StringExternal("Param/Value/0A8C1626"), lib840A968C_ge_PreemptMessage_DontPreempt, lib840A968C_ge_MessageEventType_AlliedCommunication, c_messageAreaError, lib840A968C_ge_Faction_UGC, null);
    lib840A968C_gf_SendTransmission(lib840A968C_gf_GetPlayerNamewithrank(lv_discoveringPlayer), StringExternal("Param/Value/392B816B"), lib840A968C_ge_PreemptMessage_DontPreempt, lib840A968C_ge_MessageEventType_AlliedCommunication, c_messageAreaError, lib840A968C_ge_Faction_Marines, lib840A968C_gf_GetMarine(lv_discoveringPlayer));
    lib840A968C_gf_SendTransmission(StringExternal("Param/Value/E93C9795"), StringExternal("Param/Value/0D484FC3"), lib840A968C_ge_PreemptMessage_DontPreempt, lib840A968C_ge_MessageEventType_AlliedCommunication, c_messageAreaError, lib840A968C_ge_Faction_UGC, null);
    gv_transmissionLock = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DeadBodiesDiscovered_Init () {
    gt_DeadBodiesDiscovered = TriggerCreate("gt_DeadBodiesDiscovered_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Military HQ Spotted
//--------------------------------------------------------------------------------------------------
bool gt_MilitaryHQSpotted_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_discoveringPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_discoveringPlayer = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    PingDestroy(gv_headquartersBeacon);
    while (gv_transmissionLock) {
        Wait(1.0, c_timeGame);
    }
    gv_transmissionLock = true;
    lib840A968C_gf_SendTransmission(lib840A968C_gf_GetPlayerNamewithrank(lv_discoveringPlayer), StringExternal("Param/Value/FBCDF929"), lib840A968C_ge_PreemptMessage_DontPreempt, lib840A968C_ge_MessageEventType_AlliedCommunication, c_messageAreaError, lib840A968C_ge_Faction_Marines, lib840A968C_gf_GetMarine(lv_discoveringPlayer));
    lib840A968C_gf_SendTransmission(StringExternal("Param/Value/F55E45F0"), StringExternal("Param/Value/9094517D"), lib840A968C_ge_PreemptMessage_DontPreempt, lib840A968C_ge_MessageEventType_AlliedCommunication, c_messageAreaError, lib840A968C_ge_Faction_UGC, null);
    gv_transmissionLock = false;
    lib840A968C_gf_MissionEnd(c_objectiveStateCompleted, gv_recruitArrivalMissionToken);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MilitaryHQSpotted_Init () {
    gt_MilitaryHQSpotted = TriggerCreate("gt_MilitaryHQSpotted_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Entering Military Base
//--------------------------------------------------------------------------------------------------
bool gt_EnteringMilitaryBase_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(RandomFixed(2.0, 5.0), c_timeGame);
    lib840A968C_gf_BackgroundDialog(EventUnit(), lib840A968C_gf_GetPlayerNamewithrank(EventPlayer()), StringExternal("Param/Value/8CFD6DF9"), lib840A968C_ge_DialogDuration_Short, 4.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnteringMilitaryBase_Init () {
    gt_EnteringMilitaryBase = TriggerCreate("gt_EnteringMilitaryBase_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Customs Lockup
//--------------------------------------------------------------------------------------------------
bool gt_CustomsLockup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_discoveringPlayer;
    int lv_itemDropChance;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_discoveringPlayer = EventPlayer();
    lv_itemDropChance = RandomInt(1, 10);

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lib840A968C_gf_BackgroundDialog(lib840A968C_gf_GetMarine(lv_discoveringPlayer), lib840A968C_gf_GetPlayerNamewithrank(lv_discoveringPlayer), StringExternal("Param/Value/E366C9FD"), lib840A968C_ge_DialogDuration_Short, 5.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CustomsLockup_Init () {
    gt_CustomsLockup = TriggerCreate("gt_CustomsLockup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Head to Customs Lockup
//--------------------------------------------------------------------------------------------------
bool gt_HeadtoCustomsLockup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto9810DF3B_g;
    int auto9810DF3B_var;
    playergroup auto9D2F2338_g;
    int auto9D2F2338_var;

    // Conditions
    if (testConds) {
        if (!(((TriggerGetExecCount(gt_WarzoneAmmoMarine1) + TriggerGetExecCount(gt_WarzoneAmmoMarine2) + TriggerGetExecCount(gt_WarzoneAmmoMarine3) + TriggerGetExecCount(gt_WarzoneAmmoMarine4)) > 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto9810DF3B_g = lib840A968C_gf_GetLivingMarineSquadPlayers();
    auto9810DF3B_var = -1;
    while (true) {
        auto9810DF3B_var = PlayerGroupNextPlayer(auto9810DF3B_g, auto9810DF3B_var);
        if (auto9810DF3B_var < 0) { break; }
        VisRevealArea(auto9810DF3B_var, RegionFromId(22), 10.0, false);
        CameraLockInput(auto9810DF3B_var, true);
        CameraPan(auto9810DF3B_var, RegionGetCenter(RegionFromId(22)), 5.0, -1, 10.0, false);
    }
    while (gv_transmissionLock) {
        Wait(1.0, c_timeGame);
    }
    gv_transmissionLock = true;
    lib840A968C_gf_SendTransmission(StringExternal("Param/Value/F487A5A5"), StringExternal("Param/Value/D8AF1F57"), lib840A968C_ge_PreemptMessage_DontPreempt, lib840A968C_ge_MessageEventType_AlliedCommunication, c_messageAreaError, lib840A968C_ge_Faction_UGC, null);
    gv_transmissionLock = false;
    auto9D2F2338_g = lib840A968C_gf_GetLivingMarineSquadPlayers();
    auto9D2F2338_var = -1;
    while (true) {
        auto9D2F2338_var = PlayerGroupNextPlayer(auto9D2F2338_g, auto9D2F2338_var);
        if (auto9D2F2338_var < 0) { break; }
        CameraPan(auto9D2F2338_var, UnitGetPosition(lib840A968C_gf_GetMarine(auto9D2F2338_var)), 5.0, -1, 10.0, false);
        Wait(2.0, c_timeGame);
        CameraLockInput(auto9D2F2338_var, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HeadtoCustomsLockup_Init () {
    gt_HeadtoCustomsLockup = TriggerCreate("gt_HeadtoCustomsLockup_Func");
    TriggerAddEventGeneric(gt_HeadtoCustomsLockup, gv_ammoCollectionEvent);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Warzone Ammo Marine 4
//--------------------------------------------------------------------------------------------------
bool gt_WarzoneAmmoMarine4_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_enteredRegion;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_enteredRegion = EventUnitRegion();

    // Actions
    if (!runActions) {
        return true;
    }

    gf_AmmoDrop(TriggerGetCurrent(), lv_enteredRegion);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WarzoneAmmoMarine4_Init () {
    gt_WarzoneAmmoMarine4 = TriggerCreate("gt_WarzoneAmmoMarine4_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Warzone Ammo Marine 3
//--------------------------------------------------------------------------------------------------
bool gt_WarzoneAmmoMarine3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_enteredRegion;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_enteredRegion = EventUnitRegion();

    // Actions
    if (!runActions) {
        return true;
    }

    gf_AmmoDrop(TriggerGetCurrent(), lv_enteredRegion);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WarzoneAmmoMarine3_Init () {
    gt_WarzoneAmmoMarine3 = TriggerCreate("gt_WarzoneAmmoMarine3_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Warzone Ammo Marine 2
//--------------------------------------------------------------------------------------------------
bool gt_WarzoneAmmoMarine2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_enteredRegion;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_enteredRegion = EventUnitRegion();

    // Actions
    if (!runActions) {
        return true;
    }

    gf_AmmoDrop(TriggerGetCurrent(), lv_enteredRegion);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WarzoneAmmoMarine2_Init () {
    gt_WarzoneAmmoMarine2 = TriggerCreate("gt_WarzoneAmmoMarine2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Warzone Ammo Marine 1
//--------------------------------------------------------------------------------------------------
bool gt_WarzoneAmmoMarine1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_enteredRegion;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_enteredRegion = EventUnitRegion();

    // Actions
    if (!runActions) {
        return true;
    }

    gf_AmmoDrop(TriggerGetCurrent(), lv_enteredRegion);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WarzoneAmmoMarine1_Init () {
    gt_WarzoneAmmoMarine1 = TriggerCreate("gt_WarzoneAmmoMarine1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Warzone Transmission
//--------------------------------------------------------------------------------------------------
bool gt_WarzoneTransmission_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_discoveringPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_discoveringPlayer = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (gv_transmissionLock) {
        Wait(1.0, c_timeGame);
    }
    gv_transmissionLock = true;
    lib840A968C_gf_SendTransmission(lib840A968C_gf_GetPlayerNamewithrank(lv_discoveringPlayer), StringExternal("Param/Value/A6A19592"), lib840A968C_ge_PreemptMessage_DontPreempt, lib840A968C_ge_MessageEventType_AlliedCommunication, c_messageAreaError, lib840A968C_ge_Faction_Marines, lib840A968C_gf_GetMarine(lv_discoveringPlayer));
    lib840A968C_gf_SendTransmission(StringExternal("Param/Value/00A68CC7"), StringExternal("Param/Value/B33EB1B1"), lib840A968C_ge_PreemptMessage_DontPreempt, lib840A968C_ge_MessageEventType_AlliedCommunication, c_messageAreaError, lib840A968C_ge_Faction_UGC, null);
    gv_transmissionLock = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WarzoneTransmission_Init () {
    gt_WarzoneTransmission = TriggerCreate("gt_WarzoneTransmission_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Security Gate Transmission
//--------------------------------------------------------------------------------------------------
bool gt_SecurityGateTransmission_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_discoveringPlayer;
    unit lv_discoveringUnit;

    // Automatic Variable Declarations
    playergroup auto8EA0D11A_g;
    int auto8EA0D11A_var;

    // Variable Initialization
    lv_discoveringPlayer = EventPlayer();
    lv_discoveringUnit = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto8EA0D11A_g = lib840A968C_gf_GetLivingMarineSquadPlayers();
    auto8EA0D11A_var = -1;
    while (true) {
        auto8EA0D11A_var = PlayerGroupNextPlayer(auto8EA0D11A_g, auto8EA0D11A_var);
        if (auto8EA0D11A_var < 0) { break; }
        VisRevealArea(auto8EA0D11A_var, RegionFromId(17), 10.0, false);
    }
    while (gv_transmissionLock) {
        Wait(1.0, c_timeGame);
    }
    gv_transmissionLock = true;
    lib840A968C_gf_SendTransmission(lib840A968C_gf_GetPlayerNamewithrank(lv_discoveringPlayer), StringExternal("Param/Value/806B2518"), lib840A968C_ge_PreemptMessage_DontPreempt, lib840A968C_ge_MessageEventType_AlliedCommunication, c_messageAreaError, lib840A968C_ge_Faction_Marines, lib840A968C_gf_GetMarine(lv_discoveringPlayer));
    lib840A968C_gf_SendTransmission(StringExternal("Param/Value/719847FC"), StringExternal("Param/Value/86D55CDE"), lib840A968C_ge_PreemptMessage_DontPreempt, lib840A968C_ge_MessageEventType_AlliedCommunication, c_messageAreaError, lib840A968C_ge_Faction_UGC, null);
    lib840A968C_gf_SendTransmission(lib840A968C_gf_GetPlayerNamewithrank(lv_discoveringPlayer), StringExternal("Param/Value/0C190CCA"), lib840A968C_ge_PreemptMessage_DontPreempt, lib840A968C_ge_MessageEventType_AlliedCommunication, c_messageAreaError, lib840A968C_ge_Faction_Marines, lib840A968C_gf_GetMarine(lv_discoveringPlayer));
    lib840A968C_gf_SendTransmission(StringExternal("Param/Value/AB2715AF"), StringExternal("Param/Value/7EE66995"), lib840A968C_ge_PreemptMessage_DontPreempt, lib840A968C_ge_MessageEventType_AlliedCommunication, c_messageAreaError, lib840A968C_ge_Faction_UGC, null);
    gv_transmissionLock = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SecurityGateTransmission_Init () {
    gt_SecurityGateTransmission = TriggerCreate("gt_SecurityGateTransmission_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Normal Arrival
//--------------------------------------------------------------------------------------------------
bool gt_NormalArrival_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    region[3] lv_dropZones;

    // Automatic Variable Declarations
    playergroup auto5FE265D3_g;
    int auto5FE265D3_var;

    // Variable Initialization
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lv_dropZones[init_i] = RegionCircle(RegionRandomPoint(RegionFromId(4)), 5.0);
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib840A968C_gf_ChapterStart(0);
    gv_normalArrivalMissionToken = lib840A968C_gf_MissionStart("Normal Arrival", null, gv_peacekeeperEvent);
    gf_DisableRecruitStart();
    auto5FE265D3_g = lib840A968C_gf_GetMarineSquadPlayers();
    auto5FE265D3_var = -1;
    while (true) {
        auto5FE265D3_var = PlayerGroupNextPlayer(auto5FE265D3_g, auto5FE265D3_var);
        if (auto5FE265D3_var < 0) { break; }
        gf_NormalArrivalDropPod(RegionRandomPoint(lv_dropZones[RandomInt(1, 2)]), auto5FE265D3_var);
    }
    Wait(4.0, c_timeGame);
    TriggerSendEvent(lib840A968C_gv_eventRegistrationSignal);
    gf_NormalArrivalTransmission(lib09BE6BA8_gf_GetRandomPlayerfromPlayerGroup(lib840A968C_gf_GetMarineSquadPlayers()));
    Wait(60.0, c_timeGame);
    lib840A968C_gf_MissionEnd(c_objectiveStateCompleted, gv_normalArrivalMissionToken);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NormalArrival_Init () {
    gt_NormalArrival = TriggerCreate("gt_NormalArrival_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Chief Strassner Loot
//--------------------------------------------------------------------------------------------------
bool gt_ChiefStrassnerLoot_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "EnhancedProtectiveInsert", 0, lib1E3F036D_gv_peacekeeperPlayer, UnitGetPosition(EventUnit()));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PumpShotgun", 0, lib1E3F036D_gv_peacekeeperPlayer, UnitGetPosition(EventUnit()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ChiefStrassnerLoot_Init () {
    gt_ChiefStrassnerLoot = TriggerCreate("gt_ChiefStrassnerLoot_Func");
    TriggerEnable(gt_ChiefStrassnerLoot, false);
    TriggerAddEventUnitDied(gt_ChiefStrassnerLoot, UnitRefFromVariable("gv_chiefStrassner"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sergeant Lefty Loot
//--------------------------------------------------------------------------------------------------
bool gt_SergeantLeftyLoot_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ArmoredProtectiveInsert", 0, lib1E3F036D_gv_peacekeeperPlayer, UnitGetPosition(EventUnit()));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MarksmanRifle", 0, lib1E3F036D_gv_peacekeeperPlayer, UnitGetPosition(EventUnit()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SergeantLeftyLoot_Init () {
    gt_SergeantLeftyLoot = TriggerCreate("gt_SergeantLeftyLoot_Func");
    TriggerEnable(gt_SergeantLeftyLoot, false);
    TriggerAddEventUnitDied(gt_SergeantLeftyLoot, UnitRefFromVariable("gv_sergeantLefty"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Officer Sprecklin Loot
//--------------------------------------------------------------------------------------------------
bool gt_OfficerSprecklinLoot_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ArmoredProtectiveInsert", 0, lib1E3F036D_gv_peacekeeperPlayer, UnitGetPosition(EventUnit()));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SubmachineGun", 0, lib1E3F036D_gv_peacekeeperPlayer, UnitGetPosition(EventUnit()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OfficerSprecklinLoot_Init () {
    gt_OfficerSprecklinLoot = TriggerCreate("gt_OfficerSprecklinLoot_Func");
    TriggerEnable(gt_OfficerSprecklinLoot, false);
    TriggerAddEventUnitDied(gt_OfficerSprecklinLoot, UnitRefFromVariable("gv_officerSprecklin"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sergeant Ascalon Loot
//--------------------------------------------------------------------------------------------------
bool gt_SergeantAscalonLoot_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SubmachineGun", 0, lib1E3F036D_gv_peacekeeperPlayer, UnitGetPosition(EventUnit()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SergeantAscalonLoot_Init () {
    gt_SergeantAscalonLoot = TriggerCreate("gt_SergeantAscalonLoot_Func");
    TriggerEnable(gt_SergeantAscalonLoot, false);
    TriggerAddEventUnitDied(gt_SergeantAscalonLoot, UnitRefFromVariable("gv_sergeantAscalon"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Peacekeepers
//--------------------------------------------------------------------------------------------------
bool gt_Peacekeepers_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lib840A968C_gf_ChapterStart(1);
    if ((RandomInt(0, 1) == 1)) {
        gv_peacekeeperMissionToken = lib840A968C_gf_MissionStart("Peacekeepers - Call for Help", null, gv_civilianRescueEvent);
    }
    else {
        gv_peacekeeperMissionToken = lib840A968C_gf_MissionStart("Peacekeepers - Call for Help", null, gv_holdOutEvent);
    }
    Wait(3.0, c_timeGame);
    gf_PeacekeeperForceCreation(gv_peacekeeperHoldout);
    Wait(1.0, c_timeGame);
    gf_PeacekeeperTransmission(lib09BE6BA8_gf_GetRandomPlayerfromPlayerGroup(lib840A968C_gf_GetMarineSquadPlayers()), lib09BE6BA8_gf_GetRandomPlayerfromPlayerGroup(lib840A968C_gf_GetMarineSquadPlayers()));
    PingCreate(PlayerGroupAll(), "PingObjective", gv_peacekeeperHoldout, Color(100.00, 100.00, 0.00), 0.0);
    PingSetScale(PingLastCreated(), 0.5);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/92D7057E"));
    gv_holdoutPing = PingLastCreated();
    TriggerEnable(gt_PeriodicZombieAttacksPeacekeepers, true);
    TriggerEnable(gt_PlayerReachesPeacekeepers, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Peacekeepers_Init () {
    gt_Peacekeepers = TriggerCreate("gt_Peacekeepers_Func");
    TriggerAddEventGeneric(gt_Peacekeepers, gv_peacekeeperEvent);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Periodic Zombie Attacks Peacekeepers
//--------------------------------------------------------------------------------------------------
bool gt_PeriodicZombieAttacksPeacekeepers_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    AIWaveInfoAdd(gv_peacekeeperZombieWaves, ("MarsColonistFemale2"), 1);
    AIWaveInfoAdd(gv_peacekeeperZombieWaves, ("MarsColonistMale2"), 1);
    AIWaveInfoAdd(gv_peacekeeperZombieWaves, ("MarsColonistMaleMiner2"), 1);
    AIWaveInfoAdd(gv_peacekeeperZombieWaves, ("MarsPrisoner2"), 1);
    AIWaveInfoAdd(gv_peacekeeperZombieWaves, ("MarsScientist2"), 1);
    AIAttackWaveSetGatherEarlyNoReplace(lib1E3F036D_gv_zombiePlayer);
    AIWaveInfoSuicide(gv_peacekeeperZombieWaves, lib1E3F036D_gv_zombiePlayer, PointWithOffsetPolar(gv_peacekeeperHoldout, 25.0, libNtve_gf_RandomAngle()), AIWaveTargetPoint(gv_peacekeeperHoldout), 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PeriodicZombieAttacksPeacekeepers_Init () {
    gt_PeriodicZombieAttacksPeacekeepers = TriggerCreate("gt_PeriodicZombieAttacksPeacekeepers_Func");
    TriggerEnable(gt_PeriodicZombieAttacksPeacekeepers, false);
    TriggerAddEventTimePeriodic(gt_PeriodicZombieAttacksPeacekeepers, 10.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Reaches Peacekeepers
//--------------------------------------------------------------------------------------------------
bool gt_PlayerReachesPeacekeepers_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_arrivingPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_arrivingPlayer = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_PeriodicZombieAttacksPeacekeepers, false);
    PingDestroy(gv_holdoutPing);
    while (gv_transmissionLock) {
        Wait(1.0, c_timeGame);
    }
    gv_transmissionLock = true;
    lib840A968C_gf_SendTransmission(StringExternal("Param/Value/FF7B8F81"), StringExternal("Param/Value/68A12B9D"), lib840A968C_ge_PreemptMessage_DontPreempt, lib840A968C_ge_MessageEventType_AlliedCommunication, c_messageAreaError, lib840A968C_ge_Faction_UGC, gv_chiefStrassner);
    gv_transmissionLock = false;
    lib840A968C_gf_MissionEnd(c_objectiveStateCompleted, gv_peacekeeperMissionToken);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerReachesPeacekeepers_Init () {
    gt_PlayerReachesPeacekeepers = TriggerCreate("gt_PlayerReachesPeacekeepers_Func");
    TriggerEnable(gt_PlayerReachesPeacekeepers, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Civilian Rescue Begins
//--------------------------------------------------------------------------------------------------
bool gt_CivilianRescueBegins_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_civilianRescueMissionToken = lib840A968C_gf_MissionStart("Civilian Rescue", null, gv_extractionEvent);
    gf_CivilianRescueBriefing();
    gf_CivilianSpawn();
    TriggerEnable(gt_PlayerRescuesCivilians, true);
    TriggerEnable(gt_PlayersFailtoRescue, true);
    TriggerEnable(gt_PeriodicZombieAttacksCivilianRescue, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CivilianRescueBegins_Init () {
    gt_CivilianRescueBegins = TriggerCreate("gt_CivilianRescueBegins_Func");
    TriggerAddEventGeneric(gt_CivilianRescueBegins, gv_civilianRescueEvent);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Periodic Zombie Attacks Civilian Rescue
//--------------------------------------------------------------------------------------------------
bool gt_PeriodicZombieAttacksCivilianRescue_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    AIAttackWaveUseGroup(lib1E3F036D_gv_zombiePlayer, UnitGroupSearch(null, lib1E3F036D_gv_zombiePlayer, gv_civilianRescuePoint, 50.0, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 20));
    AIAttackWaveSetTargetPoint(lib1E3F036D_gv_zombiePlayer, gv_civilianRescuePoint);
    AIAttackWaveSend(lib1E3F036D_gv_zombiePlayer, 0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PeriodicZombieAttacksCivilianRescue_Init () {
    gt_PeriodicZombieAttacksCivilianRescue = TriggerCreate("gt_PeriodicZombieAttacksCivilianRescue_Func");
    TriggerEnable(gt_PeriodicZombieAttacksCivilianRescue, false);
    TriggerAddEventTimePeriodic(gt_PeriodicZombieAttacksCivilianRescue, 10.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Rescues Civilians
//--------------------------------------------------------------------------------------------------
bool gt_PlayerRescuesCivilians_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_arrivingPlayer;
    unit lv_arrivingUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_arrivingPlayer = UnitGetOwner(EventUnit());
    lv_arrivingUnit = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(gv_sergeantAscalon) == true))) {
            return false;
        }

        if (!((UnitGroupCount(gv_civiliansRescue, c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_PeriodicZombieAttacksCivilianRescue, false);
    PingDestroy(gv_rescuePing);
    while (gv_transmissionLock) {
        Wait(1.0, c_timeGame);
    }
    gv_transmissionLock = true;
    lib840A968C_gf_SendTransmission(lib840A968C_gf_GetPlayerNamewithrank(lv_arrivingPlayer), StringExternal("Param/Value/E370D9C2"), lib840A968C_ge_PreemptMessage_DontPreempt, lib840A968C_ge_MessageEventType_AlliedCommunication, c_messageAreaError, lib840A968C_ge_Faction_Marines, lib840A968C_gf_GetMarine(lv_arrivingPlayer));
    lib840A968C_gf_SendTransmission(StringExternal("Param/Value/7AE3CECA"), StringExternal("Param/Value/CD48BFA7"), lib840A968C_ge_PreemptMessage_DontPreempt, lib840A968C_ge_MessageEventType_AlliedCommunication, c_messageAreaError, lib840A968C_ge_Faction_UGC, gv_sergeantAscalon);
    gv_transmissionLock = false;
    libNtve_gf_RescueUnit2(gv_civiliansRescue, lv_arrivingPlayer, true);
    AIAttackWaveSetTargetEscort(9, gv_civiliansRescue, 0);
    AIAttackWaveUseUnit(9, gv_sergeantAscalon);
    AIAttackWaveSend(9, 2, true);
    gv_civilianRescueSuccess = c_objectiveStateCompleted;
    TriggerEnable(gt_PlayerReturntoPeacekeeperHoldout, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerRescuesCivilians_Init () {
    gt_PlayerRescuesCivilians = TriggerCreate("gt_PlayerRescuesCivilians_Func");
    TriggerEnable(gt_PlayerRescuesCivilians, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Players Fail to Rescue
//--------------------------------------------------------------------------------------------------
bool gt_PlayersFailtoRescue_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_arrivingPlayer;
    unit lv_arrivingUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_arrivingPlayer = UnitGetOwner(EventUnit());
    lv_arrivingUnit = EventUnit();

    // Conditions
    if (testConds) {
        if (!(UnitIsAlive(gv_sergeantAscalon))) {
            return false;
        }

        if (!((UnitGroupCount(gv_civiliansRescue, c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_PeriodicZombieAttacksCivilianRescue, false);
    PingDestroy(gv_rescuePing);
    while (gv_transmissionLock) {
        Wait(1.0, c_timeGame);
    }
    gv_transmissionLock = true;
    lib840A968C_gf_SendTransmission(lib840A968C_gf_GetPlayerNamewithrank(lv_arrivingPlayer), StringExternal("Param/Value/308D9E51"), lib840A968C_ge_PreemptMessage_DontPreempt, lib840A968C_ge_MessageEventType_AlliedCommunication, c_messageAreaError, lib840A968C_ge_Faction_Marines, lib840A968C_gf_GetMarine(lv_arrivingPlayer));
    lib840A968C_gf_SendTransmission(StringExternal("Param/Value/88D52407"), StringExternal("Param/Value/C1C6FA51"), lib840A968C_ge_PreemptMessage_DontPreempt, lib840A968C_ge_MessageEventType_AlliedCommunication, c_messageAreaError, lib840A968C_ge_Faction_UGC, gv_chiefStrassner);
    gv_transmissionLock = false;
    gv_civilianRescueSuccess = c_objectiveStateFailed;
    if (lib09BE6BA8_gf_GroupNearPoint(lib840A968C_gf_GetMarineGroup(), gv_peacekeeperHoldout, 10.0)) {
        TriggerExecute(gt_PlayerReturntoPeacekeeperHoldout, false, false);
    }
    else {
        while (gv_transmissionLock) {
            Wait(1.0, c_timeGame);
        }
        gv_transmissionLock = true;
        lib840A968C_gf_SendTransmission(StringExternal("Param/Value/35604287"), StringExternal("Param/Value/E76D5DB5"), lib840A968C_ge_PreemptMessage_DontPreempt, lib840A968C_ge_MessageEventType_AlliedCommunication, c_messageAreaError, lib840A968C_ge_Faction_UGC, gv_chiefStrassner);
        gv_transmissionLock = false;
        TriggerEnable(gt_PlayerReturntoPeacekeeperHoldout, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayersFailtoRescue_Init () {
    gt_PlayersFailtoRescue = TriggerCreate("gt_PlayersFailtoRescue_Func");
    TriggerEnable(gt_PlayersFailtoRescue, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Return to Peacekeeper Holdout
//--------------------------------------------------------------------------------------------------
bool gt_PlayerReturntoPeacekeeperHoldout_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_arrivingPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_arrivingPlayer = UnitGetOwner(EventUnit());

    // Conditions
    if (testConds) {
        if (!((((gv_civilianRescueSuccess == c_objectiveStateCompleted) && (UnitGroupCount(UnitGroupFilterRegion(gv_civiliansRescue, RegionCircle(gv_peacekeeperHoldout, 8.0), 0), c_unitCountAlive) == UnitGroupCount(gv_civiliansRescue, c_unitCountAlive))) || (gv_civilianRescueSuccess == c_objectiveStateFailed)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((UnitIsAlive(gv_sergeantAscalon) == true)) {
        TransmissionSend(PlayerGroupAll(), TransmissionSourceFromUnit(gv_chiefStrassner, true, false, "Talk"), c_invalidPortraitId, "Talk", null, StringExternal("Param/Value/0199DBD0"), StringExternal("Param/Value/6E9C2011"), 4.0, c_transmissionDurationAdd, true);
        TransmissionSend(PlayerGroupAll(), TransmissionSourceFromUnit(gv_sergeantAscalon, true, false, "Talk"), c_invalidPortraitId, "Talk", null, StringExternal("Param/Value/DABE8983"), StringExternal("Param/Value/51923A76"), 3.0, c_transmissionDurationAdd, true);
        UnitGroupAdd(gv_peacekeepers, gv_sergeantAscalon);
    }

    if ((UnitGroupCount(gv_civiliansRescue, c_unitCountAlive) > 0)) {
        libNtve_gf_RescueUnit2(gv_civiliansRescue, lib1E3F036D_gv_peacekeeperPlayer, true);
        UnitGroupAddUnitGroup(gv_civiliansPeacekeepers, gv_civiliansRescue);
    }

    lib840A968C_gf_MissionEnd(gv_civilianRescueSuccess, gv_civilianRescueMissionToken);
    Wait(5.0, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerReturntoPeacekeeperHoldout_Init () {
    gt_PlayerReturntoPeacekeeperHoldout = TriggerCreate("gt_PlayerReturntoPeacekeeperHoldout_Func");
    TriggerEnable(gt_PlayerReturntoPeacekeeperHoldout, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Holdout
//--------------------------------------------------------------------------------------------------
bool gt_Holdout_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_speakers;
    int lv_currentSpeaker;
    wave lv_hordeWave;

    // Automatic Variable Declarations
    int autoDD3C8C61_n;
    int autoDD3C8C61_i;

    // Variable Initialization
    lv_speakers = lib840A968C_gf_GetLivingMarineSquadPlayers();

    // Actions
    if (!runActions) {
        return true;
    }

    gv_holdoutMissionToken = lib840A968C_gf_MissionStart("Holdout", null, gv_extractionEvent);
    while (gv_transmissionLock) {
        Wait(1.0, c_timeGame);
    }
    gv_transmissionLock = true;
    lib840A968C_gf_SendTransmission(StringExternal("Param/Value/CC55861B"), StringExternal("Param/Value/469F57A2"), lib840A968C_ge_PreemptMessage_DontPreempt, lib840A968C_ge_MessageEventType_AlliedCommunication, c_messageAreaError, lib840A968C_ge_Faction_UGC, gv_chiefStrassner);
    gv_transmissionLock = false;
    autoDD3C8C61_n = lib1E3F036D_gf_GameDifficultyInteger(2, 3, 4);
    for (autoDD3C8C61_i = 1; autoDD3C8C61_i <= autoDD3C8C61_n; autoDD3C8C61_i += 1) {
        Wait(3.0, c_timeGame);
    }
    lv_currentSpeaker = lib09BE6BA8_gf_GetRandomPlayerfromPlayerGroup(lv_speakers);
    PlayerGroupRemove(lv_speakers, lv_currentSpeaker);
    while (gv_transmissionLock) {
        Wait(1.0, c_timeGame);
    }
    gv_transmissionLock = true;
    lib840A968C_gf_SendTransmission(lib840A968C_gf_GetPlayerNamewithrank(lv_currentSpeaker), StringExternal("Param/Value/37E2A6A3"), lib840A968C_ge_PreemptMessage_DontPreempt, lib840A968C_ge_MessageEventType_AlliedCommunication, c_messageAreaError, lib840A968C_ge_Faction_Marines, lib840A968C_gf_GetMarine(lv_currentSpeaker));
    gv_transmissionLock = false;
    if ((PlayerGroupCount(lv_speakers) != 0)) {
        lv_currentSpeaker = lib09BE6BA8_gf_GetRandomPlayerfromPlayerGroup(lv_speakers);
        PlayerGroupRemove(lv_speakers, lv_currentSpeaker);
        lib840A968C_gf_BackgroundDialog(lib840A968C_gf_GetMarine(lv_currentSpeaker), lib840A968C_gf_GetPlayerNamewithrank(lv_currentSpeaker), StringExternal("Param/Value/4E9FE919"), lib840A968C_ge_DialogDuration_Short, 6.0);
    }

    if ((PlayerGroupCount(lv_speakers) != 0)) {
        lv_currentSpeaker = lib09BE6BA8_gf_GetRandomPlayerfromPlayerGroup(lv_speakers);
        PlayerGroupRemove(lv_speakers, lv_currentSpeaker);
        lib840A968C_gf_BackgroundDialog(lib840A968C_gf_GetMarine(lv_currentSpeaker), lib840A968C_gf_GetPlayerNamewithrank(lv_currentSpeaker), StringExternal("Param/Value/99BA8395"), lib840A968C_ge_DialogDuration_Short, 6.0);
    }

    if ((PlayerGroupCount(lv_speakers) != 0)) {
        lv_currentSpeaker = lib09BE6BA8_gf_GetRandomPlayerfromPlayerGroup(lv_speakers);
        PlayerGroupRemove(lv_speakers, lv_currentSpeaker);
        lib840A968C_gf_BackgroundDialog(lib840A968C_gf_GetMarine(lv_currentSpeaker), lib840A968C_gf_GetPlayerNamewithrank(lv_currentSpeaker), StringExternal("Param/Value/9FC733C0"), lib840A968C_ge_DialogDuration_Short, 3.0);
    }

    Wait(90.0, c_timeGame);
    while (gv_transmissionLock) {
        Wait(1.0, c_timeGame);
    }
    gv_transmissionLock = true;
    lib840A968C_gf_SendTransmission(StringExternal("Param/Value/80C4BD30"), StringExternal("Param/Value/EE9D6700"), lib840A968C_ge_PreemptMessage_DontPreempt, lib840A968C_ge_MessageEventType_AlliedCommunication, c_messageAreaError, lib840A968C_ge_Faction_UGC, gv_chiefStrassner);
    gv_transmissionLock = false;
    lv_speakers = lib840A968C_gf_GetLivingMarineSquadPlayers();
    lv_currentSpeaker = lib09BE6BA8_gf_GetRandomPlayerfromPlayerGroup(lv_speakers);
    PlayerGroupRemove(lv_speakers, lv_currentSpeaker);
    lib840A968C_gf_BackgroundDialog(lib840A968C_gf_GetMarine(lv_currentSpeaker), lib840A968C_gf_GetPlayerNamewithrank(lv_currentSpeaker), StringExternal("Param/Value/A7B92638"), lib840A968C_ge_DialogDuration_Short, 2.5);
    if ((PlayerGroupCount(lv_speakers) != 0)) {
        lv_currentSpeaker = lib09BE6BA8_gf_GetRandomPlayerfromPlayerGroup(lv_speakers);
        PlayerGroupRemove(lv_speakers, lv_currentSpeaker);
        lib840A968C_gf_BackgroundDialog(lib840A968C_gf_GetMarine(lv_currentSpeaker), lib840A968C_gf_GetPlayerNamewithrank(lv_currentSpeaker), StringExternal("Param/Value/B5F9E978"), lib840A968C_ge_DialogDuration_Short, 3.0);
    }

    lib840A968C_gf_MissionEnd(c_objectiveStateCompleted, gv_holdoutMissionToken);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Holdout_Init () {
    gt_Holdout = TriggerCreate("gt_Holdout_Func");
    TriggerAddEventGeneric(gt_Holdout, gv_holdOutEvent);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Paratrooper Loot
//--------------------------------------------------------------------------------------------------
bool gt_ParatrooperLoot_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "AssaultRifle", 0, lib1E3F036D_gv_peacekeeperPlayer, UnitGetPosition(EventUnit()));
    if ((UnitGroupCount(gv_paratroopers, c_unitCountAlive) == 0)) {
        TriggerEnable(TriggerGetCurrent(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ParatrooperLoot_Init () {
    gt_ParatrooperLoot = TriggerCreate("gt_ParatrooperLoot_Func");
    TriggerEnable(gt_ParatrooperLoot, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Staff Sergeant Fenwick Loot
//--------------------------------------------------------------------------------------------------
bool gt_StaffSergeantFenwickLoot_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "AssaultRifle", 0, lib1E3F036D_gv_peacekeeperPlayer, UnitGetPosition(EventUnit()));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "EnhancedProtectiveInsert", 0, lib1E3F036D_gv_peacekeeperPlayer, UnitGetPosition(EventUnit()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StaffSergeantFenwickLoot_Init () {
    gt_StaffSergeantFenwickLoot = TriggerCreate("gt_StaffSergeantFenwickLoot_Func");
    TriggerEnable(gt_StaffSergeantFenwickLoot, false);
    TriggerAddEventUnitDied(gt_StaffSergeantFenwickLoot, UnitRefFromVariable("gv_staffSergeantFenwick"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Extraction Begin
//--------------------------------------------------------------------------------------------------
bool gt_ExtractionBegin_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_speakers;
    int lv_currentSpeaker;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_speakers = lib840A968C_gf_GetLivingMarineSquadPlayers();

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_extractionMissionToken = lib840A968C_gf_MissionStart("Extraction", null, gv_communicationMissionSignal);
    while (gv_transmissionLock) {
        Wait(1.0, c_timeGame);
    }
    gv_transmissionLock = true;
    lib840A968C_gf_SendTransmission(StringExternal("Param/Value/3C2E1404"), StringExternal("Param/Value/2D37AE24"), lib840A968C_ge_PreemptMessage_DontPreempt, lib840A968C_ge_MessageEventType_AlliedCommunication, c_messageAreaError, lib840A968C_ge_Faction_UGC, null);
    lib840A968C_gf_SendTransmission(StringExternal("Param/Value/B10F482E"), StringExternal("Param/Value/1E5E31EF"), lib840A968C_ge_PreemptMessage_DontPreempt, lib840A968C_ge_MessageEventType_AlliedCommunication, c_messageAreaError, lib840A968C_ge_Faction_UGC, null);
    gv_transmissionLock = false;
    gf_Chapter1AirItemDrops();
    TriggerEnable(gt_PeriodicZombieAttacksCivilianExtraction, true);
    TriggerEnable(gt_ExtractionEndFailure, true);
    TriggerEnable(gt_ExtractionEndSuccess, true);
    gf_ExtractionBeginningDialog();
    gf_ExtractionParatroopers();
    gf_ExtractionConvoyCreation();
    gf_ExtractionStateCheck();
    TriggerSendEvent(gv_eltradSpawnSignal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ExtractionBegin_Init () {
    gt_ExtractionBegin = TriggerCreate("gt_ExtractionBegin_Func");
    TriggerAddEventGeneric(gt_ExtractionBegin, gv_extractionEvent);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Periodic Zombie Attacks Civilian Extraction
//--------------------------------------------------------------------------------------------------
bool gt_PeriodicZombieAttacksCivilianExtraction_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    AIWaveInfoAdd(gv_extractionWave, ("MarsColonistFemale2"), 1);
    AIWaveInfoAdd(gv_extractionWave, ("MarsColonistMale2"), 1);
    AIWaveInfoAdd(gv_extractionWave, ("MarsColonistMaleMiner2"), 1);
    AIWaveInfoAdd(gv_extractionWave, ("MarsPrisoner2"), 1);
    AIWaveInfoAdd(gv_extractionWave, ("MarsScientist2"), 1);
    AIAttackWaveSetGatherEarlyNoReplace(lib1E3F036D_gv_zombiePlayer);
    AIWaveInfoSuicide(gv_extractionWave, lib1E3F036D_gv_zombiePlayer, PointWithOffsetPolar(UnitGroupCenterOfGroup(gv_civiliansPeacekeepers), 15.0, libNtve_gf_RandomAngle()), AIWaveTargetUnitGroup(gv_civiliansPeacekeepers), 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PeriodicZombieAttacksCivilianExtraction_Init () {
    gt_PeriodicZombieAttacksCivilianExtraction = TriggerCreate("gt_PeriodicZombieAttacksCivilianExtraction_Func");
    TriggerEnable(gt_PeriodicZombieAttacksCivilianExtraction, false);
    TriggerAddEventTimePeriodic(gt_PeriodicZombieAttacksCivilianExtraction, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Extraction End (Success)
//--------------------------------------------------------------------------------------------------
bool gt_ExtractionEndSuccess_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_dropship;

    // Automatic Variable Declarations
    unitgroup autoEA4E641E_g;
    int autoEA4E641E_u;
    unit autoEA4E641E_var;
    unitgroup auto3E71C213_g;
    int auto3E71C213_u;
    unit auto3E71C213_var;
    unitgroup auto4A6B2477_g;
    int auto4A6B2477_u;
    unit auto4A6B2477_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_PeriodicZombieAttacksCivilianExtraction, false);
    TriggerEnable(gt_ParatrooperLoot, false);
    libNtve_gf_UnitCreateFacingPoint(1, "AuroraDropshipFlying", 0, lib1E3F036D_gv_peacekeeperPlayer, PointWithOffsetPolar(gv_extractionLocation, 60.0, libNtve_gf_RandomAngle()), gv_extractionLocation);
    lv_dropship = UnitLastCreated();
    UnitSetState(lv_dropship, c_unitStateInvulnerable, true);
    UnitSetState(lv_dropship, c_unitStateTargetable, false);
    UnitSetState(lv_dropship, c_unitStateSelectable, false);
    UnitIssueOrder(lv_dropship, OrderTargetingPoint(AbilityCommand("move", 0), gv_extractionLocation), c_orderQueueReplace);
    while (!((UnitCount(null, lib1E3F036D_gv_peacekeeperPlayer, RegionCircle(gv_extractionLocation, 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) >= (UnitGroupCount(gv_civiliansRescue, c_unitCountAlive) + UnitGroupCount(gv_paratroopers, c_unitCountAlive) + UnitGroupCount(gv_peacekeepers, c_unitCountAlive))) && (DistanceBetweenPoints(UnitGetPosition(lv_dropship), gv_extractionLocation) < 1))) {
        Wait(1.0, c_timeGame);
    }
    UnitIssueOrder(lv_dropship, Order(AbilityCommand("AuroraTransportLand", 0)), c_orderQueueReplace);
    Wait(6.0, c_timeGame);
    PingDestroy(gv_convoyPing);
    PingDestroy(gv_extractionPointPing);
    lib840A968C_gf_AwardTeamMarineXP((UnitGroupCount(gv_civiliansPeacekeepers, c_unitCountAlive) * 10));
    if ((UnitIsAlive(gv_staffSergeantFenwick) == true)) {
        AIRemoveUnitFromAnyWaves(gv_staffSergeantFenwick);
        UnitIssueOrder(gv_staffSergeantFenwick, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        gv_fenwickSurvives = true;
    }

    gv_numberofSurvivingParatroopers = UnitGroupCount(gv_paratroopers, c_unitCountAlive);
    autoEA4E641E_g = gv_civiliansPeacekeepers;
    autoEA4E641E_u = UnitGroupCount(autoEA4E641E_g, c_unitCountAll);
    for (;; autoEA4E641E_u -= 1) {
        autoEA4E641E_var = UnitGroupUnitFromEnd(autoEA4E641E_g, autoEA4E641E_u);
        if (autoEA4E641E_var == null) { break; }
        UnitRemove(autoEA4E641E_var);
    }
    auto3E71C213_g = gv_paratroopers;
    auto3E71C213_u = UnitGroupCount(auto3E71C213_g, c_unitCountAll);
    for (;; auto3E71C213_u -= 1) {
        auto3E71C213_var = UnitGroupUnitFromEnd(auto3E71C213_g, auto3E71C213_u);
        if (auto3E71C213_var == null) { break; }
        UnitRemove(auto3E71C213_var);
    }
    auto4A6B2477_g = gv_peacekeepers;
    auto4A6B2477_u = UnitGroupCount(auto4A6B2477_g, c_unitCountAll);
    for (;; auto4A6B2477_u -= 1) {
        auto4A6B2477_var = UnitGroupUnitFromEnd(auto4A6B2477_g, auto4A6B2477_u);
        if (auto4A6B2477_var == null) { break; }
        UnitRemove(auto4A6B2477_var);
    }
    if ((UnitIsAlive(gv_staffSergeantFenwick) == true)) {
        gf_ExtractionEndDialog();
        UnitRemove(gv_staffSergeantFenwick);
    }

    lib840A968C_gf_MissionEnd(gv_extractionMissionState, gv_extractionMissionToken);
    UnitIssueOrder(lv_dropship, Order(AbilityCommand("AuroraTransportLiftOff", 0)), c_orderQueueReplace);
    Wait(5.0, c_timeGame);
    UnitIssueOrder(lv_dropship, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1401)), c_orderQueueReplace);
    Wait(10.0, c_timeGame);
    UnitRemove(lv_dropship);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ExtractionEndSuccess_Init () {
    gt_ExtractionEndSuccess = TriggerCreate("gt_ExtractionEndSuccess_Func");
    TriggerEnable(gt_ExtractionEndSuccess, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Extraction End (Failure)
//--------------------------------------------------------------------------------------------------
bool gt_ExtractionEndFailure_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_dropship;

    // Automatic Variable Declarations
    unitgroup auto42EF40B9_g;
    int auto42EF40B9_u;
    unit auto42EF40B9_var;
    unitgroup auto2820F3A0_g;
    int auto2820F3A0_u;
    unit auto2820F3A0_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_PeriodicZombieAttacksCivilianExtraction, false);
    TriggerEnable(gt_ParatrooperLoot, false);
    AIRemoveGroupFromAnyWaves(gv_paratroopers);
    AIRemoveGroupFromAnyWaves(gv_peacekeepers);
    AIAttackWaveUseGroup(lib1E3F036D_gv_peacekeeperPlayer, gv_peacekeepers);
    AIAttackWaveUseGroup(lib1E3F036D_gv_peacekeeperPlayer, gv_paratroopers);
    AIAttackWaveSetTargetPoint(lib1E3F036D_gv_peacekeeperPlayer, gv_extractionLocation);
    AIAttackWaveSend(lib1E3F036D_gv_peacekeeperPlayer, 0, false);
    libNtve_gf_UnitCreateFacingPoint(1, "AuroraDropshipFlying", 0, lib1E3F036D_gv_peacekeeperPlayer, PointWithOffsetPolar(gv_extractionLocation, 60.0, libNtve_gf_RandomAngle()), gv_extractionLocation);
    lv_dropship = UnitLastCreated();
    UnitSetState(lv_dropship, c_unitStateInvulnerable, true);
    UnitSetState(lv_dropship, c_unitStateTargetable, false);
    UnitSetState(lv_dropship, c_unitStateSelectable, false);
    UnitIssueOrder(lv_dropship, OrderTargetingPoint(AbilityCommand("move", 0), gv_extractionLocation), c_orderQueueReplace);
    while (!((UnitCount(null, lib1E3F036D_gv_peacekeeperPlayer, RegionCircle(gv_extractionLocation, 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) >= (UnitGroupCount(gv_paratroopers, c_unitCountAlive) + UnitGroupCount(gv_peacekeepers, c_unitCountAlive))) && (DistanceBetweenPoints(UnitGetPosition(lv_dropship), gv_extractionLocation) < 1))) {
        Wait(1.0, c_timeGame);
    }
    UnitIssueOrder(lv_dropship, Order(AbilityCommand("AuroraTransportLand", 0)), c_orderQueueReplace);
    Wait(6.0, c_timeGame);
    PingDestroy(gv_extractionPointPing);
    if ((UnitIsAlive(gv_staffSergeantFenwick) == true)) {
        AIRemoveUnitFromAnyWaves(gv_staffSergeantFenwick);
        UnitIssueOrder(gv_staffSergeantFenwick, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        gv_fenwickSurvives = true;
    }

    gv_numberofSurvivingParatroopers = UnitGroupCount(gv_paratroopers, c_unitCountAlive);
    auto42EF40B9_g = gv_paratroopers;
    auto42EF40B9_u = UnitGroupCount(auto42EF40B9_g, c_unitCountAll);
    for (;; auto42EF40B9_u -= 1) {
        auto42EF40B9_var = UnitGroupUnitFromEnd(auto42EF40B9_g, auto42EF40B9_u);
        if (auto42EF40B9_var == null) { break; }
        UnitRemove(auto42EF40B9_var);
    }
    auto2820F3A0_g = gv_peacekeepers;
    auto2820F3A0_u = UnitGroupCount(auto2820F3A0_g, c_unitCountAll);
    for (;; auto2820F3A0_u -= 1) {
        auto2820F3A0_var = UnitGroupUnitFromEnd(auto2820F3A0_g, auto2820F3A0_u);
        if (auto2820F3A0_var == null) { break; }
        UnitRemove(auto2820F3A0_var);
    }
    if ((UnitIsAlive(gv_staffSergeantFenwick) == true)) {
        UnitRemove(gv_staffSergeantFenwick);
    }

    lib840A968C_gf_MissionEnd(gv_extractionMissionState, gv_extractionMissionToken);
    UnitIssueOrder(lv_dropship, Order(AbilityCommand("AuroraTransportLiftOff", 0)), c_orderQueueReplace);
    Wait(5.0, c_timeGame);
    UnitIssueOrder(lv_dropship, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1401)), c_orderQueueReplace);
    Wait(10.0, c_timeGame);
    UnitRemove(lv_dropship);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ExtractionEndFailure_Init () {
    gt_ExtractionEndFailure = TriggerCreate("gt_ExtractionEndFailure_Func");
    TriggerEnable(gt_ExtractionEndFailure, false);
    TriggerAddEventGeneric(gt_ExtractionEndFailure, gv_extractionFailureSignal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Convoy Ping
//--------------------------------------------------------------------------------------------------
bool gt_ConvoyPing_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PingCreate(PlayerGroupAll(), "PingCircleImportant", UnitGroupCenterOfGroup(gv_civiliansPeacekeepers), ColorWithAlpha(0.00, 100.00, 100.00, 0.00), 360.0);
    gv_convoyPing = PingLastCreated();
    PingSetScale(gv_convoyPing, 0.3);
    while ((libNtve_gf_UnitGroupIsDead(gv_civiliansPeacekeepers) == false) && (TriggerActiveCount(gt_ExtractionEndFailure) == 0) && (TriggerActiveCount(gt_ExtractionEndSuccess) == 0)) {
        PingSetPosition(gv_convoyPing, UnitGroupCenterOfGroup(gv_civiliansPeacekeepers));
        Wait(0.5, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ConvoyPing_Init () {
    gt_ConvoyPing = TriggerCreate("gt_ConvoyPing_Func");
    TriggerAddEventGeneric(gt_ConvoyPing, gv_extractionEvent);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Eltrad Spawn
//--------------------------------------------------------------------------------------------------
bool gt_EltradSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_spawnPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_spawnPoint = AIRandomSpawnPoint(lib1E3F036D_gv_zombiePlayer, RegionCircle(UnitGroupCenterOfGroup(lib840A968C_gf_GetMarineGroup()), 80.0), 30.0, 60.0, 500.0);

    // Actions
    if (!runActions) {
        return true;
    }

    while (((CliffLevel(lv_spawnPoint) != 1) || (!(RegionContainsPoint(RegionPlayableMap(), lv_spawnPoint))))) {
        lv_spawnPoint = AIRandomSpawnPoint(lib1E3F036D_gv_zombiePlayer, RegionCircle(UnitGroupCenterOfGroup(lib840A968C_gf_GetMarineGroup()), 80.0), 30.0, 60.0, 500.0);
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Eltrad", 0, lib1E3F036D_gv_zombiePlayer, lv_spawnPoint);
    gv_eltrad = UnitLastCreated();
    lib1E3F036D_gf_StartBossFight(gv_eltrad);
    TriggerEnable(gt_EltradDeath, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EltradSpawn_Init () {
    gt_EltradSpawn = TriggerCreate("gt_EltradSpawn_Func");
    TriggerAddEventGeneric(gt_EltradSpawn, gv_eltradSpawnSignal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Eltrad Death
//--------------------------------------------------------------------------------------------------
bool gt_EltradDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lib1E3F036D_gf_EndBossFight();
    if (UnitIsAlive(gv_chiefStrassner)) {
        lib840A968C_gf_BackgroundDialog(gv_chiefStrassner, StringExternal("Param/Value/FFAE3888"), StringExternal("Param/Value/A34E806D"), lib840A968C_ge_DialogDuration_Short, 4.0);
    }

    if (UnitIsAlive(gv_staffSergeantFenwick)) {
        lib840A968C_gf_BackgroundDialog(gv_staffSergeantFenwick, StringExternal("Param/Value/53504F67"), StringExternal("Param/Value/1DF850AC"), lib840A968C_ge_DialogDuration_Short, 4.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EltradDeath_Init () {
    gt_EltradDeath = TriggerCreate("gt_EltradDeath_Func");
    TriggerEnable(gt_EltradDeath, false);
    TriggerAddEventUnitDied(gt_EltradDeath, UnitRefFromVariable("gv_eltrad"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Communication Mission
//--------------------------------------------------------------------------------------------------
bool gt_CommunicationMission_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib840A968C_gf_ChapterStart(2);
    gv_communicationArrayMissionToken = lib840A968C_gf_MissionStart("Communication Array Retrieval", null, gv_restorePowerMissionSignal);
    gf_CommunicationArrayTransmission();
    gf_CommunicationArrayPlacementObjective();
    gf_CommunicationArrayArmorySpawns();
    gf_CommunicationArrayLocations();
    gf_CommunicationArrayTimer();
    TriggerExecute(gt_ArmoryDoor, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CommunicationMission_Init () {
    gt_CommunicationMission = TriggerCreate("gt_CommunicationMission_Func");
    TriggerAddEventGeneric(gt_CommunicationMission, gv_communicationMissionSignal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Communication Array Placed
//--------------------------------------------------------------------------------------------------
bool gt_CommunicationArrayPlaced_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_placedArray;
    int lv_placementRegion;

    // Automatic Variable Declarations
    int autoFADDA37E_ae;
    int autoFADDA37E_var;

    // Variable Initialization
    lv_placedArray = UnitGroupUnit(UnitGroupSearch("CommunicationsArray", c_playerAny, EventPlayerEffectUsedPoint(c_effectLocationTargetPoint), 0.1, UnitFilter(0, 0, 0, 0), 0), 1);

    // Actions
    if (!runActions) {
        return true;
    }

    if (gf_ArrayPlacedCorrectly(lv_placedArray)) {
        UnitSetOwner(lv_placedArray, lib1E3F036D_gv_peacekeeperPlayer, true);
        gv_communicationArraysDeployed += 1;
        TextExpressionSetToken("Param/Expression/89E80023", "A", IntToText(gv_communicationArraysDeployed));
        TextExpressionSetToken("Param/Expression/89E80023", "B", IntToText(gv_communicationArraysToBeDeployed));
        ObjectiveSetName(gv_communicationArrays, TextExpressionAssemble("Param/Expression/89E80023"));
        autoFADDA37E_ae = gv_communicationArraysToBeDeployed;
        autoFADDA37E_var = 1;
        for ( ; autoFADDA37E_var <= autoFADDA37E_ae; autoFADDA37E_var += 1 ) {
            if ((RegionContainsPoint(gv_communicationArrayLocations[autoFADDA37E_var], EventPlayerEffectUsedPoint(c_effectLocationTargetPoint)) == true)) {
                lv_placementRegion = autoFADDA37E_var;
            }

        }
        PingDestroy(gv_communicationArrayLocationPings[lv_placementRegion]);
        gv_communicationArrayLocationPings[lv_placementRegion] = c_invalidPingId;
        ActorSend(gv_communicationArrayAreaIndicator[lv_placementRegion], "Destroy");
        lib840A968C_gf_AwardTeamMarineXP(50);
        lib840A968C_gf_AwardTeamXP(1);
        if ((gv_communicationArraysDeployed == gv_communicationArraysToBeDeployed)) {
            gv_communicationArraysCompleted = c_objectiveStateCompleted;
            ObjectiveSetState(gv_communicationArrays, gv_communicationArraysCompleted);
        }

    }
    else {
        UnitRemove(lv_placedArray);
        UnitInventoryCreate(EventPlayerEffectUsedUnit(c_effectUnitCaster), "CommunicationsArrayPackedUp");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CommunicationArrayPlaced_Init () {
    gt_CommunicationArrayPlaced = TriggerCreate("gt_CommunicationArrayPlaced_Func");
    TriggerAddEventPlayerEffectUsed(gt_CommunicationArrayPlaced, c_playerAny, "CommunicationsArrayPackedUp");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Communication Mission End
//--------------------------------------------------------------------------------------------------
bool gt_CommunicationMissionEnd_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto43A419ED_ae;
    int auto43A419ED_var;
    unitgroup auto569A9F4E_g;
    int auto569A9F4E_u;
    unit auto569A9F4E_var;

    // Actions
    if (!runActions) {
        return true;
    }

    TimerWindowDestroy(gv_communicationArrayTimerWindow);
    if ((gv_communicationArraysCompleted == c_objectiveStateFailed)) {
        auto43A419ED_ae = gv_communicationArraysToBeDeployed;
        auto43A419ED_var = 1;
        for ( ; auto43A419ED_var <= auto43A419ED_ae; auto43A419ED_var += 1 ) {
            if ((gv_communicationArrayLocationPings[auto43A419ED_var] != c_invalidPingId)) {
                PingDestroy(gv_communicationArrayLocationPings[auto43A419ED_var]);
                ActorSend(gv_communicationArrayAreaIndicator[auto43A419ED_var], "Destroy");
            }
        }
        auto569A9F4E_g = UnitGroup("CommunicationsArrayPackedUp", c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterItem), 0, 0, 0), 0);
        auto569A9F4E_u = UnitGroupCount(auto569A9F4E_g, c_unitCountAll);
        for (;; auto569A9F4E_u -= 1) {
            auto569A9F4E_var = UnitGroupUnitFromEnd(auto569A9F4E_g, auto569A9F4E_u);
            if (auto569A9F4E_var == null) { break; }
            UnitRemove(auto569A9F4E_var);
        }
        lib840A968C_gf_SendTransmission(StringExternal("Param/Value/256F026F"), StringExternal("Param/Value/28348C82"), lib840A968C_ge_PreemptMessage_DontPreempt, lib840A968C_ge_MessageEventType_AlliedCommunication, c_messageAreaError, lib840A968C_ge_Faction_UGC, null);
        ObjectiveSetState(gv_communicationArrays, gv_communicationArraysCompleted);
    }
    else {
        lib840A968C_gf_SendTransmission(StringExternal("Param/Value/7E8A3358"), StringExternal("Param/Value/0ED9585E"), lib840A968C_ge_PreemptMessage_DontPreempt, lib840A968C_ge_MessageEventType_AlliedCommunication, c_messageAreaError, lib840A968C_ge_Faction_UGC, null);
        gv_bossTracking = true;
    }
    lib840A968C_gf_MissionEnd(gv_communicationArraysCompleted, gv_communicationArrayMissionToken);
    ObjectiveDestroy(gv_communicationArrays);
    gf_Chapter3AirItemDrops();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CommunicationMissionEnd_Init () {
    gt_CommunicationMissionEnd = TriggerCreate("gt_CommunicationMissionEnd_Func");
    TriggerAddEventTimer(gt_CommunicationMissionEnd, gv_communicationArrayTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Armory Door
//--------------------------------------------------------------------------------------------------
bool gt_ArmoryDoor_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(UnitFromId(137), Order(AbilityCommand("MetalGateStraightHorizontalBFLowered", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArmoryDoor_Init () {
    gt_ArmoryDoor = TriggerCreate("gt_ArmoryDoor_Func");
    TriggerEnable(gt_ArmoryDoor, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Restore Power Mission
//--------------------------------------------------------------------------------------------------
bool gt_RestorePowerMission_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_restorePowerMissionToken = lib840A968C_gf_MissionStart("Restore Power", null, gv_investigationMissionSignal);
    lib840A968C_gf_ChapterStart(3);
    gf_RestorePowerBriefing();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PowerPlantReactor", 0, 9, PointFromId(3280));
    gv_reactor = UnitLastCreated();
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimple", UnitGetPosition(gv_reactor), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 360.0, 270.0);
    PingSetScale(PingLastCreated(), 0.4);
    gv_reactorPing = PingLastCreated();
    TriggerEnable(gt_TeamReachesReactor, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RestorePowerMission_Init () {
    gt_RestorePowerMission = TriggerCreate("gt_RestorePowerMission_Func");
    TriggerAddEventGeneric(gt_RestorePowerMission, gv_restorePowerMissionSignal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Team Reaches Reactor
//--------------------------------------------------------------------------------------------------
bool gt_TeamReachesReactor_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    PingDestroy(gv_reactorPing);
    gf_ReactorBriefing();
    TriggerSendEvent(gv_sarbusSpawnSignal);
    lib1E3F036D_gf_StartBossFight(gv_reactor);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TeamReachesReactor_Init () {
    gt_TeamReachesReactor = TriggerCreate("gt_TeamReachesReactor_Func");
    TriggerEnable(gt_TeamReachesReactor, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sarbus Spawn
//--------------------------------------------------------------------------------------------------
bool gt_SarbusSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_sarbusSpawnPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_sarbusSpawnPoint = RegionRandomPoint(RegionFromId(16));

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Sarbus", 0, lib1E3F036D_gv_zombiePlayer, lv_sarbusSpawnPoint);
    gv_sarbus = UnitLastCreated();
    TriggerEnable(gt_SarbusDeath, true);
    TriggerEnable(gt_SarbusCorpseSpawn, true);
    lib1765BC64_gv_sarbusTarget = gv_reactor;
    AIAttackWaveUseUnit(lib1E3F036D_gv_zombiePlayer, gv_sarbus);
    AIAttackWaveSetTargetPoint(lib1E3F036D_gv_zombiePlayer, PointFromId(3280));
    AIAttackWaveSend(lib1E3F036D_gv_zombiePlayer, 0, true);
    if ((gv_bossTracking == true)) {
        PingCreate(PlayerGroupAll(), "PingBoss", UnitGetPosition(gv_sarbus), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 360.0);
        gv_sarbusPing = PingLastCreated();
        PingSetUnit(gv_sarbusPing, gv_sarbus);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SarbusSpawn_Init () {
    gt_SarbusSpawn = TriggerCreate("gt_SarbusSpawn_Func");
    TriggerAddEventGeneric(gt_SarbusSpawn, gv_sarbusSpawnSignal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sarbus Death
//--------------------------------------------------------------------------------------------------
bool gt_SarbusDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    PingDestroy(gv_sarbusPing);
    lib1E3F036D_gf_EndBossFight();
    lib840A968C_gf_MissionEnd(c_objectiveStateCompleted, gv_restorePowerMissionToken);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SarbusDeath_Init () {
    gt_SarbusDeath = TriggerCreate("gt_SarbusDeath_Func");
    TriggerEnable(gt_SarbusDeath, false);
    TriggerAddEventUnitDied(gt_SarbusDeath, UnitRefFromVariable("gv_sarbus"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sarbus Corpse Spawn
//--------------------------------------------------------------------------------------------------
bool gt_SarbusCorpseSpawn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "SarbusCorpse"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_sarbusCorpse = EventUnitCreatedUnit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SarbusCorpseSpawn_Init () {
    gt_SarbusCorpseSpawn = TriggerCreate("gt_SarbusCorpseSpawn_Func");
    TriggerEnable(gt_SarbusCorpseSpawn, false);
    TriggerAddEventUnitCreated(gt_SarbusCorpseSpawn, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Investigation Mission Update
//--------------------------------------------------------------------------------------------------
bool gt_InvestigationMissionUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_objectsofInterestUnreported -= 1;
    if ((gv_objectsofInterestUnreported == 0)) {
        lib840A968C_gf_MissionEnd(c_objectiveStateCompleted, gv_investiagationMissionToken);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InvestigationMissionUpdate_Init () {
    gt_InvestigationMissionUpdate = TriggerCreate("gt_InvestigationMissionUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Investigation Mission
//--------------------------------------------------------------------------------------------------
bool gt_InvestigationMission_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_investiagationMissionToken = lib840A968C_gf_MissionStart("Investigation", gt_InvestigationMissionUpdate, null);
    lib840A968C_gf_ChapterStart(4);
    gf_InvestigationBriefing();
    gf_InvestigationLabPing();
    gf_InvestigationChatter();
    TriggerEnable(gt_LabEntranceChatter, true);
    TriggerEnable(gt_ReceptionAreaTransmission, true);
    TriggerEnable(gt_InfestationResearchTransmission, true);
    TriggerEnable(gt_WorkstationTX1, true);
    TriggerEnable(gt_DissectionWorkstation, true);
    TriggerEnable(gt_DemeterWorkstation, true);
    TriggerEnable(gt_PoolviewingDeck, true);
    TriggerEnable(gt_CharlieEscapeHole, true);
    TriggerEnable(gt_CharliePen, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InvestigationMission_Init () {
    gt_InvestigationMission = TriggerCreate("gt_InvestigationMission_Func");
    TriggerAddEventGeneric(gt_InvestigationMission, gv_investigationMissionSignal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lab Entrance Chatter
//--------------------------------------------------------------------------------------------------
bool gt_LabEntranceChatter_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_speakers;
    int lv_currentSpeaker;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_speakers = PlayerGroupCopy(lib840A968C_gf_GetLivingMarineSquadPlayers());
    lv_currentSpeaker = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    PingDestroy(gv_labEntrancePing);
    PlayerGroupRemove(lv_speakers, lv_currentSpeaker);
    lib840A968C_gf_BackgroundDialog(lib840A968C_gf_GetMarine(lv_currentSpeaker), lib840A968C_gf_GetPlayerNamewithrank(lv_currentSpeaker), StringExternal("Param/Value/3157DF40"), lib840A968C_ge_DialogDuration_Short, 5.0);
    if ((PlayerGroupCount(lv_speakers) > 0)) {
        lv_currentSpeaker = lib09BE6BA8_gf_GetRandomPlayerfromPlayerGroup(lv_speakers);
        PlayerGroupRemove(lv_speakers, lv_currentSpeaker);
        lib840A968C_gf_BackgroundDialog(lib840A968C_gf_GetMarine(lv_currentSpeaker), lib840A968C_gf_GetPlayerNamewithrank(lv_currentSpeaker), StringExternal("Param/Value/19E062E3"), lib840A968C_ge_DialogDuration_Short, 4.0);
    }

    libNtve_gf_CreatePingFacingAngle(lib840A968C_gf_GetMarineSquadPlayers(), "PingSimple", PointFromId(4573), ColorWithAlpha(0.00, 100.00, 25.10, 0.00), 60.0, 270.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LabEntranceChatter_Init () {
    gt_LabEntranceChatter = TriggerCreate("gt_LabEntranceChatter_Func");
    TriggerEnable(gt_LabEntranceChatter, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reception Area Transmission
//--------------------------------------------------------------------------------------------------
bool gt_ReceptionAreaTransmission_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lib840A968C_gf_SendTransmission(StringExternal("Param/Value/2929EB41"), StringExternal("Param/Value/DA624995"), lib840A968C_ge_PreemptMessage_DontPreempt, lib840A968C_ge_MessageEventType_AlliedCommunication, c_messageAreaError, lib840A968C_ge_Faction_UGC, null);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReceptionAreaTransmission_Init () {
    gt_ReceptionAreaTransmission = TriggerCreate("gt_ReceptionAreaTransmission_Func");
    TriggerEnable(gt_ReceptionAreaTransmission, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Infestation Research Transmission
//--------------------------------------------------------------------------------------------------
bool gt_InfestationResearchTransmission_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lib840A968C_gf_SendTransmission(StringExternal("Param/Value/275241C9"), StringExternal("Param/Value/7D7A1EC4"), lib840A968C_ge_PreemptMessage_DontPreempt, lib840A968C_ge_MessageEventType_AlliedCommunication, c_messageAreaError, lib840A968C_ge_Faction_UGC, null);
    TimerStart(gv_investigationIntialTimer, 120.0, false, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InfestationResearchTransmission_Init () {
    gt_InfestationResearchTransmission = TriggerCreate("gt_InfestationResearchTransmission_Func");
    TriggerEnable(gt_InfestationResearchTransmission, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Workstation - TX1
//--------------------------------------------------------------------------------------------------
bool gt_WorkstationTX1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (gv_transmissionLock) {
        Wait(1.0, c_timeGame);
    }
    gv_transmissionLock = true;
    lib840A968C_gf_SendTransmission(lib840A968C_gf_GetPlayerNamewithrank(UnitGetOwner(EventUnit())), StringExternal("Param/Value/EB20F580"), lib840A968C_ge_PreemptMessage_DontPreempt, lib840A968C_ge_MessageEventType_AlliedCommunication, c_messageAreaError, lib840A968C_ge_Faction_Marines, EventUnit());
    lib840A968C_gf_SendTransmission(StringExternal("Param/Value/232EFE87"), StringExternal("Param/Value/C28ED0EE"), lib840A968C_ge_PreemptMessage_DontPreempt, lib840A968C_ge_MessageEventType_AlliedCommunication, c_messageAreaError, lib840A968C_ge_Faction_UGC, null);
    gv_transmissionLock = false;
    TriggerEnable(TriggerGetCurrent(), false);
    gv_tX1Discovered = true;
    TriggerExecute(lib840A968C_gf_GetMissionProgression(gv_investiagationMissionToken), true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WorkstationTX1_Init () {
    gt_WorkstationTX1 = TriggerCreate("gt_WorkstationTX1_Func");
    TriggerEnable(gt_WorkstationTX1, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dissection Workstation
//--------------------------------------------------------------------------------------------------
bool gt_DissectionWorkstation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lib840A968C_gf_BackgroundDialog(EventUnit(), lib840A968C_gf_GetPlayerNamewithrank(UnitGetOwner(EventUnit())), StringExternal("Param/Value/E03D4BEF"), lib840A968C_ge_DialogDuration_Short, 2.0);
    lib840A968C_gf_AwardTeamXP(2);
    TriggerExecute(lib840A968C_gf_GetMissionProgression(gv_investiagationMissionToken), true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DissectionWorkstation_Init () {
    gt_DissectionWorkstation = TriggerCreate("gt_DissectionWorkstation_Func");
    TriggerEnable(gt_DissectionWorkstation, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Demeter Workstation
//--------------------------------------------------------------------------------------------------
bool gt_DemeterWorkstation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lib840A968C_gf_BackgroundDialog(EventUnit(), lib840A968C_gf_GetPlayerNamewithrank(UnitGetOwner(EventUnit())), StringExternal("Param/Value/18C14E0F"), lib840A968C_ge_DialogDuration_Short, 2.0);
    lib840A968C_gf_AwardTeamXP(2);
    TriggerExecute(lib840A968C_gf_GetMissionProgression(gv_investiagationMissionToken), true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DemeterWorkstation_Init () {
    gt_DemeterWorkstation = TriggerCreate("gt_DemeterWorkstation_Func");
    TriggerEnable(gt_DemeterWorkstation, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pool viewing Deck
//--------------------------------------------------------------------------------------------------
bool gt_PoolviewingDeck_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lib840A968C_gf_BackgroundDialog(EventUnit(), lib840A968C_gf_GetPlayerNamewithrank(UnitGetOwner(EventUnit())), StringExternal("Param/Value/6E363C8B"), lib840A968C_ge_DialogDuration_Short, 3.5);
    lib840A968C_gf_AwardTeamXP(1);
    TriggerExecute(lib840A968C_gf_GetMissionProgression(gv_investiagationMissionToken), true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PoolviewingDeck_Init () {
    gt_PoolviewingDeck = TriggerCreate("gt_PoolviewingDeck_Func");
    TriggerEnable(gt_PoolviewingDeck, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Charlie Escape Hole
//--------------------------------------------------------------------------------------------------
bool gt_CharlieEscapeHole_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lib840A968C_gf_BackgroundDialog(EventUnit(), lib840A968C_gf_GetPlayerNamewithrank(UnitGetOwner(EventUnit())), StringExternal("Param/Value/B26871EF"), lib840A968C_ge_DialogDuration_Short, 3.5);
    lib840A968C_gf_AwardTeamXP(3);
    TriggerExecute(lib840A968C_gf_GetMissionProgression(gv_investiagationMissionToken), true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CharlieEscapeHole_Init () {
    gt_CharlieEscapeHole = TriggerCreate("gt_CharlieEscapeHole_Func");
    TriggerEnable(gt_CharlieEscapeHole, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Charlie Pen
//--------------------------------------------------------------------------------------------------
bool gt_CharliePen_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lib840A968C_gf_BackgroundDialog(EventUnit(), lib840A968C_gf_GetPlayerNamewithrank(UnitGetOwner(EventUnit())), StringExternal("Param/Value/5F6B3972"), lib840A968C_ge_DialogDuration_Short, 3.5);
    lib840A968C_gf_AwardTeamXP(4);
    TriggerExecute(lib840A968C_gf_GetMissionProgression(gv_investiagationMissionToken), true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CharliePen_Init () {
    gt_CharliePen = TriggerCreate("gt_CharliePen_Func");
    TriggerEnable(gt_CharliePen, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Investigation Mission Intial End
//--------------------------------------------------------------------------------------------------
bool gt_InvestigationMissionIntialEnd_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_InvestigationTarionTransmission();
    TriggerSendEvent(gv_tarionSpawnSignal);
    TimerStart(gv_investigationFinalTimer, 300.0, false, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InvestigationMissionIntialEnd_Init () {
    gt_InvestigationMissionIntialEnd = TriggerCreate("gt_InvestigationMissionIntialEnd_Func");
    TriggerAddEventTimer(gt_InvestigationMissionIntialEnd, gv_investigationIntialTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Investigation Mission Final End
//--------------------------------------------------------------------------------------------------
bool gt_InvestigationMissionFinalEnd_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(20.0, c_timeGame);
    TriggerSendEvent(gv_monolithMissionSignal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InvestigationMissionFinalEnd_Init () {
    gt_InvestigationMissionFinalEnd = TriggerCreate("gt_InvestigationMissionFinalEnd_Func");
    TriggerAddEventTimer(gt_InvestigationMissionFinalEnd, gv_investigationFinalTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tarion Spawn
//--------------------------------------------------------------------------------------------------
bool gt_TarionSpawn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Tarion", 0, lib1E3F036D_gv_zombiePlayer, PointFromId(2318));
    gv_tarion = UnitLastCreated();
    lib1E3F036D_gf_StartBossFight(gv_tarion);
    TriggerEnable(gt_TarionDeath, true);
    AIAttackWaveUseUnit(lib1E3F036D_gv_zombiePlayer, gv_tarion);
    AIAttackWaveSetTargetUnitGroup(lib1E3F036D_gv_zombiePlayer, lib840A968C_gf_GetMarineGroup());
    AIAttackWaveSend(lib1E3F036D_gv_zombiePlayer, 0, false);
    TriggerEnable(gt_TarionHordes, true);
    if ((gv_bossTracking == true)) {
        PingCreate(PlayerGroupAll(), "PingBoss", UnitGetPosition(gv_tarion), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 360.0);
        gv_tarionPing = PingLastCreated();
        PingSetUnit(gv_tarionPing, gv_tarion);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TarionSpawn_Init () {
    gt_TarionSpawn = TriggerCreate("gt_TarionSpawn_Func");
    TriggerAddEventGeneric(gt_TarionSpawn, gv_tarionSpawnSignal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tarion Death
//--------------------------------------------------------------------------------------------------
bool gt_TarionDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_TarionHordes, false);
    lib1E3F036D_gf_EndBossFight();
    PingDestroy(gv_tarionPing);
    lib840A968C_gf_AwardTeamMarineXP(150);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TarionDeath_Init () {
    gt_TarionDeath = TriggerCreate("gt_TarionDeath_Func");
    TriggerEnable(gt_TarionDeath, false);
    TriggerAddEventUnitDied(gt_TarionDeath, UnitRefFromVariable("gv_tarion"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tarion Hordes
//--------------------------------------------------------------------------------------------------
bool gt_TarionHordes_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TarionHordes_Init () {
    gt_TarionHordes = TriggerCreate("gt_TarionHordes_Func");
    TriggerEnable(gt_TarionHordes, false);
    TriggerAddEventTimePeriodic(gt_TarionHordes, 15.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Monolith Begin
//--------------------------------------------------------------------------------------------------
bool gt_MonolithBegin_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib840A968C_gf_ChapterStart(5);
    gf_MonolithBriefing();
    gv_monolithMissionToken = lib840A968C_gf_MissionStart("Monolith", null, lib840A968C_gv_victory);
    TriggerSendEvent(gv_rentodusSpawnSignal);
    gf_MonolithReinforcements();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MonolithBegin_Init () {
    gt_MonolithBegin = TriggerCreate("gt_MonolithBegin_Func");
    TriggerAddEventGeneric(gt_MonolithBegin, gv_monolithMissionSignal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rentodus Spawn
//--------------------------------------------------------------------------------------------------
bool gt_RentodusSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string[6] lv_superHeavies;
    int lv_superHeavyCount;
    waveinfo lv_rentodousWave;

    // Automatic Variable Declarations
    int auto6B14C399_ae;
    int auto6B14C399_var;

    // Variable Initialization
    lv_superHeavyCount = (CeilingI((PlayerGroupCount(lib840A968C_gf_GetLivingMarineSquadPlayers()) / 4.0)) + lib1E3F036D_gf_GameDifficultyInteger(0, 2, 4));

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Rentodus", 0, lib1E3F036D_gv_zombiePlayer, RegionRandomPoint(RegionFromId(16)));
    gv_rentodus = UnitLastCreated();
    lib1E3F036D_gf_StartBossFight(gv_rentodus);
    AIAttackWaveUseUnit(lib1E3F036D_gv_zombiePlayer, gv_rentodus);
    AIAttackWaveSetTargetUnitGroup(lib1E3F036D_gv_zombiePlayer, lib840A968C_gf_GetMarineGroup());
    AIAttackWaveSend(lib1E3F036D_gv_zombiePlayer, 0, false);
    lv_superHeavies[1] = "Behemoth";
    lv_superHeavies[2] = "Blitzer";
    lv_superHeavies[3] = "Bloodseeker";
    lv_superHeavies[4] = "Bonebreaker";
    lv_superHeavies[5] = "Stonewall";
    Wait(1.0, c_timeGame);
    auto6B14C399_ae = lv_superHeavyCount;
    auto6B14C399_var = 1;
    for ( ; auto6B14C399_var <= auto6B14C399_ae; auto6B14C399_var += 1 ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_superHeavies[RandomInt(1, 5)], 0, lib1E3F036D_gv_zombiePlayer, UnitGetPosition(gv_rentodus));
        AIAttackWaveUseUnit(lib1E3F036D_gv_zombiePlayer, UnitLastCreated());
    }
    AIAttackWaveSetTargetEscort(lib1E3F036D_gv_zombiePlayer, libNtve_gf_ConvertUnitToUnitGroup(gv_rentodus), 1);
    AIAttackWaveSend(lib1E3F036D_gv_zombiePlayer, 0, false);
    TriggerEnable(gt_RentodusDeath, true);
    TriggerEnable(gt_RentodusMobs, true);
    if ((gv_bossTracking == true)) {
        PingCreate(PlayerGroupAll(), "PingBoss", UnitGetPosition(gv_rentodus), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 360.0);
        gv_rentodusPing = PingLastCreated();
        PingSetUnit(gv_rentodusPing, gv_rentodus);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RentodusSpawn_Init () {
    gt_RentodusSpawn = TriggerCreate("gt_RentodusSpawn_Func");
    TriggerAddEventGeneric(gt_RentodusSpawn, gv_rentodusSpawnSignal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rentodus Death
//--------------------------------------------------------------------------------------------------
bool gt_RentodusDeath_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_speakers;
    int lv_currentSpeaker;

    // Automatic Variable Declarations
    unitgroup autoF14C9340_g;
    int autoF14C9340_u;
    unit autoF14C9340_var;

    // Variable Initialization
    lv_speakers = lib840A968C_gf_GetLivingMarineSquadPlayers();

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_RentodusMobs, false);
    lib1E3F036D_gf_EndBossFight();
    autoF14C9340_g = lib840A968C_gf_GetMarineGroup();
    autoF14C9340_u = UnitGroupCount(autoF14C9340_g, c_unitCountAll);
    for (;; autoF14C9340_u -= 1) {
        autoF14C9340_var = UnitGroupUnitFromEnd(autoF14C9340_g, autoF14C9340_u);
        if (autoF14C9340_var == null) { break; }
        libNtve_gf_MakeUnitInvulnerable(autoF14C9340_var, true);
    }
    while (gv_transmissionLock) {
        Wait(1.0, c_timeGame);
    }
    gv_transmissionLock = true;
    if ((PlayerGroupCount(lv_speakers) != 0)) {
        lv_currentSpeaker = lib09BE6BA8_gf_GetRandomPlayerfromPlayerGroup(lv_speakers);
        lib840A968C_gf_SendTransmission(lib840A968C_gf_GetPlayerNamewithrank(lv_currentSpeaker), StringExternal("Param/Value/A40610C9"), lib840A968C_ge_PreemptMessage_DontPreempt, lib840A968C_ge_MessageEventType_AlliedCommunication, c_messageAreaError, lib840A968C_ge_Faction_Marines, lib840A968C_gf_GetMarine(lv_currentSpeaker));
    }

    lib840A968C_gf_SendTransmission(StringExternal("Param/Value/EE7BAF6C"), StringExternal("Param/Value/C77B184E"), lib840A968C_ge_PreemptMessage_DontPreempt, lib840A968C_ge_MessageEventType_AlliedCommunication, c_messageAreaError, lib840A968C_ge_Faction_UGC, null);
    gv_transmissionLock = false;
    CinematicFade(false, 10.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    lib840A968C_gf_MissionEnd(c_objectiveStateCompleted, gv_monolithMissionToken);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RentodusDeath_Init () {
    gt_RentodusDeath = TriggerCreate("gt_RentodusDeath_Func");
    TriggerEnable(gt_RentodusDeath, false);
    TriggerAddEventUnitDied(gt_RentodusDeath, UnitRefFromVariable("gv_rentodus"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rentodus Mobs
//--------------------------------------------------------------------------------------------------
bool gt_RentodusMobs_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    AIWaveInfoAttack(AIWaveInfo(gv_zombieAssaultWave), lib1E3F036D_gv_zombiePlayer, RegionRandomPoint(RegionPlayableMap()), AIWaveTargetUnitGroup(lib840A968C_gf_GetMarineGroup()), 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RentodusMobs_Init () {
    gt_RentodusMobs = TriggerCreate("gt_RentodusMobs_Func");
    TriggerEnable(gt_RentodusMobs, false);
    TriggerAddEventTimePeriodic(gt_RentodusMobs, 10.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ammo Modification
//--------------------------------------------------------------------------------------------------
bool gt_AmmoModification_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_chancetoSpawn;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_chancetoSpawn = RandomFixed(0.0, 100.0);

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((lv_chancetoSpawn <= 50.0)) {
        lib840A968C_gf_AmmoModificationDropPoolItemSpawn(PointFromId(3118));
    }

    lv_chancetoSpawn = RandomFixed(0.0, 100.0);
    if ((lv_chancetoSpawn <= 50.0)) {
        lib840A968C_gf_AmmoModificationDropPoolItemSpawn(PointFromId(3771));
    }

    lv_chancetoSpawn = RandomFixed(0.0, 100.0);
    if ((lv_chancetoSpawn <= 50.0)) {
        lib840A968C_gf_AmmoModificationDropPoolItemSpawn(PointFromId(4614));
    }

    lv_chancetoSpawn = RandomFixed(0.0, 100.0);
    if ((lv_chancetoSpawn <= 50.0)) {
        lib840A968C_gf_AmmoModificationDropPoolItemSpawn(PointFromId(4628));
    }

    lv_chancetoSpawn = RandomFixed(0.0, 100.0);
    if ((lv_chancetoSpawn <= 50.0)) {
        lib840A968C_gf_AmmoModificationDropPoolItemSpawn(PointFromId(4629));
    }

    lv_chancetoSpawn = RandomFixed(0.0, 100.0);
    if ((lv_chancetoSpawn <= 50.0)) {
        lib840A968C_gf_AmmoModificationDropPoolItemSpawn(PointFromId(4630));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AmmoModification_Init () {
    gt_AmmoModification = TriggerCreate("gt_AmmoModification_Func");
    TriggerAddEventMapInit(gt_AmmoModification);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Magazine
//--------------------------------------------------------------------------------------------------
bool gt_Magazine_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_chancetoSpawn;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_chancetoSpawn = RandomFixed(0.0, 100.0);

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((lv_chancetoSpawn <= 75.0)) {
        lib840A968C_gf_MagazineDropPoolItemSpawn(PointFromId(4610));
    }

    lv_chancetoSpawn = RandomFixed(0.0, 100.0);
    if ((lv_chancetoSpawn <= 75.0)) {
        lib840A968C_gf_MagazineDropPoolItemSpawn(PointFromId(4611));
    }

    lv_chancetoSpawn = RandomFixed(0.0, 100.0);
    if ((lv_chancetoSpawn <= 75.0)) {
        lib840A968C_gf_MagazineDropPoolItemSpawn(PointFromId(4612));
    }

    lv_chancetoSpawn = RandomFixed(0.0, 100.0);
    if ((lv_chancetoSpawn <= 75.0)) {
        lib840A968C_gf_MagazineDropPoolItemSpawn(PointFromId(4613));
    }

    lv_chancetoSpawn = RandomFixed(0.0, 100.0);
    if ((lv_chancetoSpawn <= 75.0)) {
        lib840A968C_gf_MagazineDropPoolItemSpawn(PointFromId(4615));
    }

    lv_chancetoSpawn = RandomFixed(0.0, 100.0);
    if ((lv_chancetoSpawn <= 75.0)) {
        lib840A968C_gf_MagazineDropPoolItemSpawn(PointFromId(4616));
    }

    lv_chancetoSpawn = RandomFixed(0.0, 100.0);
    if ((lv_chancetoSpawn <= 75.0)) {
        lib840A968C_gf_MagazineDropPoolItemSpawn(PointFromId(4617));
    }

    lv_chancetoSpawn = RandomFixed(0.0, 100.0);
    if ((lv_chancetoSpawn <= 75.0)) {
        lib840A968C_gf_MagazineDropPoolItemSpawn(PointFromId(4618));
    }

    lv_chancetoSpawn = RandomFixed(0.0, 100.0);
    if ((lv_chancetoSpawn <= 75.0)) {
        lib840A968C_gf_MagazineDropPoolItemSpawn(PointFromId(4619));
    }

    lv_chancetoSpawn = RandomFixed(0.0, 100.0);
    if ((lv_chancetoSpawn <= 75.0)) {
        lib840A968C_gf_MagazineDropPoolItemSpawn(PointFromId(4620));
    }

    lv_chancetoSpawn = RandomFixed(0.0, 100.0);
    if ((lv_chancetoSpawn <= 75.0)) {
        lib840A968C_gf_MagazineDropPoolItemSpawn(PointFromId(4621));
    }

    lv_chancetoSpawn = RandomFixed(0.0, 100.0);
    if ((lv_chancetoSpawn <= 75.0)) {
        lib840A968C_gf_MagazineDropPoolItemSpawn(PointFromId(4622));
    }

    lv_chancetoSpawn = RandomFixed(0.0, 100.0);
    if ((lv_chancetoSpawn <= 75.0)) {
        lib840A968C_gf_MagazineDropPoolItemSpawn(PointFromId(4623));
    }

    lv_chancetoSpawn = RandomFixed(0.0, 100.0);
    if ((lv_chancetoSpawn <= 75.0)) {
        lib840A968C_gf_MagazineDropPoolItemSpawn(PointFromId(4624));
    }

    lv_chancetoSpawn = RandomFixed(0.0, 100.0);
    if ((lv_chancetoSpawn <= 75.0)) {
        lib840A968C_gf_MagazineDropPoolItemSpawn(PointFromId(4625));
    }

    lv_chancetoSpawn = RandomFixed(0.0, 100.0);
    if ((lv_chancetoSpawn <= 75.0)) {
        lib840A968C_gf_MagazineDropPoolItemSpawn(PointFromId(4626));
    }

    lv_chancetoSpawn = RandomFixed(0.0, 100.0);
    if ((lv_chancetoSpawn <= 75.0)) {
        lib840A968C_gf_MagazineDropPoolItemSpawn(PointFromId(4627));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Magazine_Init () {
    gt_Magazine = TriggerCreate("gt_Magazine_Func");
    TriggerAddEventMapInit(gt_Magazine);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Peackeeper Weapons
//--------------------------------------------------------------------------------------------------
bool gt_PeackeeperWeapons_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_chancetoSpawn;
    fixed lv_itemSpawnChance;

    // Automatic Variable Declarations
    const int autoC9922637_n = 3;
    int autoC9922637_i;

    // Variable Initialization
    lv_chancetoSpawn = RandomFixed(0.0, 100.0);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_chancetoSpawn <= 100.0)) {
        for (autoC9922637_i = 1; autoC9922637_i <= autoC9922637_n; autoC9922637_i += 1) {
            lv_itemSpawnChance = RandomFixed(0.0, 100.0);
            if (((lv_itemSpawnChance >= 0) && (lv_itemSpawnChance <= 25))) {
                lib840A968C_gf_SpawnItem(PointFromId(4607), "AutomaticShotgun", lib840A968C_ge_DropMethod_Locker);
            }
            else if (((lv_itemSpawnChance >= 25) && (lv_itemSpawnChance <= 50))) {
                lib840A968C_gf_SpawnItem(PointFromId(4607), "SubmachineGun", lib840A968C_ge_DropMethod_Locker);
            }
            else if (((lv_itemSpawnChance >= 50) && (lv_itemSpawnChance <= 75))) {
                lib840A968C_gf_SpawnItem(PointFromId(4607), "RiotShield", lib840A968C_ge_DropMethod_Locker);
            }
            else if (((lv_itemSpawnChance >= 75) && (lv_itemSpawnChance <= 95))) {
                lib840A968C_gf_SpawnItem(PointFromId(4607), "MarksmanRifle", lib840A968C_ge_DropMethod_Locker);
            }
            else if (((lv_itemSpawnChance >= 95) && (lv_itemSpawnChance <= 100))) {
                lib840A968C_gf_SpawnItem(PointFromId(4607), "MediumMachineGun", lib840A968C_ge_DropMethod_Locker);
            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PeackeeperWeapons_Init () {
    gt_PeackeeperWeapons = TriggerCreate("gt_PeackeeperWeapons_Func");
    TriggerAddEventMapInit(gt_PeackeeperWeapons);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lab 1
//--------------------------------------------------------------------------------------------------
bool gt_Lab1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    fixed auto2025D024_chance;
    fixed auto2025D024_roll;
    fixed auto43ADEC7A_chance;
    fixed auto43ADEC7A_roll;

    // Actions
    if (!runActions) {
        return true;
    }

    auto2025D024_chance = 0.0;
    auto2025D024_roll = RandomFixed(0.0, 100.0);
    if (auto2025D024_roll >= auto2025D024_chance && auto2025D024_roll <= (auto2025D024_chance + 75.0))
    {
        auto43ADEC7A_chance = 0.0;
        auto43ADEC7A_roll = RandomFixed(0.0, 100.0);
        if (auto43ADEC7A_roll >= auto43ADEC7A_chance && auto43ADEC7A_roll <= (auto43ADEC7A_chance + 100.0))
        {
            lib840A968C_gf_SpawnItem(PointFromId(4631), "LaserRifle", lib840A968C_ge_DropMethod_Locker);
        }
        auto43ADEC7A_chance += 100.0;

    }
    auto2025D024_chance += 75.0;

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Lab1_Init () {
    gt_Lab1 = TriggerCreate("gt_Lab1_Func");
    TriggerAddEventMapInit(gt_Lab1);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lab 2
//--------------------------------------------------------------------------------------------------
bool gt_Lab2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    fixed auto86ECE9E9_chance;
    fixed auto86ECE9E9_roll;
    fixed auto585A28D1_chance;
    fixed auto585A28D1_roll;

    // Actions
    if (!runActions) {
        return true;
    }

    auto86ECE9E9_chance = 0.0;
    auto86ECE9E9_roll = RandomFixed(0.0, 100.0);
    if (auto86ECE9E9_roll >= auto86ECE9E9_chance && auto86ECE9E9_roll <= (auto86ECE9E9_chance + 75.0))
    {
        auto585A28D1_chance = 0.0;
        auto585A28D1_roll = RandomFixed(0.0, 100.0);
        if (auto585A28D1_roll >= auto585A28D1_chance && auto585A28D1_roll <= (auto585A28D1_chance + 100.0))
        {
            lib840A968C_gf_SpawnItem(PointFromId(4632), "LaserRifle", lib840A968C_ge_DropMethod_Locker);
        }
        auto585A28D1_chance += 100.0;

    }
    auto86ECE9E9_chance += 75.0;

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Lab2_Init () {
    gt_Lab2 = TriggerCreate("gt_Lab2_Func");
    TriggerAddEventMapInit(gt_Lab2);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lab 3
//--------------------------------------------------------------------------------------------------
bool gt_Lab3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    fixed auto6338E0BF_chance;
    fixed auto6338E0BF_roll;
    fixed auto2E97684E_chance;
    fixed auto2E97684E_roll;

    // Actions
    if (!runActions) {
        return true;
    }

    auto6338E0BF_chance = 0.0;
    auto6338E0BF_roll = RandomFixed(0.0, 100.0);
    if (auto6338E0BF_roll >= auto6338E0BF_chance && auto6338E0BF_roll <= (auto6338E0BF_chance + 75.0))
    {
        auto2E97684E_chance = 0.0;
        auto2E97684E_roll = RandomFixed(0.0, 100.0);
        if (auto2E97684E_roll >= auto2E97684E_chance && auto2E97684E_roll <= (auto2E97684E_chance + 100.0))
        {
            lib840A968C_gf_SpawnItem(PointFromId(4633), "LaserRifle", lib840A968C_ge_DropMethod_Locker);
        }
        auto2E97684E_chance += 100.0;

    }
    auto6338E0BF_chance += 75.0;

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Lab3_Init () {
    gt_Lab3 = TriggerCreate("gt_Lab3_Func");
    TriggerAddEventMapInit(gt_Lab3);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Field Light 1
//--------------------------------------------------------------------------------------------------
bool gt_FieldLight1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_chancetoSpawn;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_chancetoSpawn = RandomFixed(0.0, 100.0);

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((lv_chancetoSpawn <= 50.0)) {
        lib840A968C_gf_FieldLightDropPoolItemSpawn(PointFromId(4591));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FieldLight1_Init () {
    gt_FieldLight1 = TriggerCreate("gt_FieldLight1_Func");
    TriggerAddEventMapInit(gt_FieldLight1);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Field Light 2
//--------------------------------------------------------------------------------------------------
bool gt_FieldLight2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_chancetoSpawn;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_chancetoSpawn = RandomFixed(0.0, 100.0);

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((lv_chancetoSpawn <= 50.0)) {
        lib840A968C_gf_FieldLightDropPoolItemSpawn(PointFromId(4592));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FieldLight2_Init () {
    gt_FieldLight2 = TriggerCreate("gt_FieldLight2_Func");
    TriggerAddEventMapInit(gt_FieldLight2);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Field Light 3
//--------------------------------------------------------------------------------------------------
bool gt_FieldLight3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_chancetoSpawn;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_chancetoSpawn = RandomFixed(0.0, 100.0);

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((lv_chancetoSpawn <= 50.0)) {
        lib840A968C_gf_FieldLightDropPoolItemSpawn(PointFromId(4593));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FieldLight3_Init () {
    gt_FieldLight3 = TriggerCreate("gt_FieldLight3_Func");
    TriggerAddEventMapInit(gt_FieldLight3);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Field Light 4
//--------------------------------------------------------------------------------------------------
bool gt_FieldLight4_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_chancetoSpawn;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_chancetoSpawn = RandomFixed(0.0, 100.0);

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((lv_chancetoSpawn <= 50.0)) {
        lib840A968C_gf_FieldLightDropPoolItemSpawn(PointFromId(4594));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FieldLight4_Init () {
    gt_FieldLight4 = TriggerCreate("gt_FieldLight4_Func");
    TriggerAddEventMapInit(gt_FieldLight4);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Medical Supply 1
//--------------------------------------------------------------------------------------------------
bool gt_MedicalSupply1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_chancetoSpawn;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_chancetoSpawn = RandomFixed(0.0, 100.0);

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((lv_chancetoSpawn <= 60.0)) {
        lib840A968C_gf_MedicalDropPoolItemSpawn(PointFromId(385));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MedicalSupply1_Init () {
    gt_MedicalSupply1 = TriggerCreate("gt_MedicalSupply1_Func");
    TriggerAddEventMapInit(gt_MedicalSupply1);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Medical Supply 2
//--------------------------------------------------------------------------------------------------
bool gt_MedicalSupply2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_chancetoSpawn;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_chancetoSpawn = RandomFixed(0.0, 100.0);

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((lv_chancetoSpawn <= 60.0)) {
        lib840A968C_gf_MedicalDropPoolItemSpawn(PointFromId(390));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MedicalSupply2_Init () {
    gt_MedicalSupply2 = TriggerCreate("gt_MedicalSupply2_Func");
    TriggerAddEventMapInit(gt_MedicalSupply2);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Medical Supply 3
//--------------------------------------------------------------------------------------------------
bool gt_MedicalSupply3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_chancetoSpawn;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_chancetoSpawn = RandomFixed(0.0, 100.0);

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((lv_chancetoSpawn <= 60.0)) {
        lib840A968C_gf_MedicalDropPoolItemSpawn(PointFromId(1929));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MedicalSupply3_Init () {
    gt_MedicalSupply3 = TriggerCreate("gt_MedicalSupply3_Func");
    TriggerAddEventMapInit(gt_MedicalSupply3);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Medical Supply 4
//--------------------------------------------------------------------------------------------------
bool gt_MedicalSupply4_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_chancetoSpawn;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_chancetoSpawn = RandomFixed(0.0, 100.0);

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((lv_chancetoSpawn <= 60.0)) {
        lib840A968C_gf_MedicalDropPoolItemSpawn(PointFromId(2958));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MedicalSupply4_Init () {
    gt_MedicalSupply4 = TriggerCreate("gt_MedicalSupply4_Func");
    TriggerAddEventMapInit(gt_MedicalSupply4);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Medical Supply 5
//--------------------------------------------------------------------------------------------------
bool gt_MedicalSupply5_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_chancetoSpawn;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_chancetoSpawn = RandomFixed(0.0, 100.0);

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((lv_chancetoSpawn <= 60.0)) {
        lib840A968C_gf_MedicalDropPoolItemSpawn(PointFromId(2959));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MedicalSupply5_Init () {
    gt_MedicalSupply5 = TriggerCreate("gt_MedicalSupply5_Func");
    TriggerAddEventMapInit(gt_MedicalSupply5);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Medical Supply 6
//--------------------------------------------------------------------------------------------------
bool gt_MedicalSupply6_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_chancetoSpawn;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_chancetoSpawn = RandomFixed(0.0, 100.0);

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((lv_chancetoSpawn <= 60.0)) {
        lib840A968C_gf_MedicalDropPoolItemSpawn(PointFromId(2964));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MedicalSupply6_Init () {
    gt_MedicalSupply6 = TriggerCreate("gt_MedicalSupply6_Func");
    TriggerAddEventMapInit(gt_MedicalSupply6);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Medical Supply 7
//--------------------------------------------------------------------------------------------------
bool gt_MedicalSupply7_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_chancetoSpawn;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_chancetoSpawn = RandomFixed(0.0, 100.0);

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((lv_chancetoSpawn <= 60.0)) {
        lib840A968C_gf_MedicalDropPoolItemSpawn(PointFromId(2965));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MedicalSupply7_Init () {
    gt_MedicalSupply7 = TriggerCreate("gt_MedicalSupply7_Func");
    TriggerAddEventMapInit(gt_MedicalSupply7);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Medical Supply 8
//--------------------------------------------------------------------------------------------------
bool gt_MedicalSupply8_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_chancetoSpawn;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_chancetoSpawn = RandomFixed(0.0, 100.0);

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((lv_chancetoSpawn <= 60.0)) {
        lib840A968C_gf_MedicalDropPoolItemSpawn(PointFromId(2966));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MedicalSupply8_Init () {
    gt_MedicalSupply8 = TriggerCreate("gt_MedicalSupply8_Func");
    TriggerAddEventMapInit(gt_MedicalSupply8);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Medical Supply 9
//--------------------------------------------------------------------------------------------------
bool gt_MedicalSupply9_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_chancetoSpawn;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_chancetoSpawn = RandomFixed(0.0, 100.0);

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((lv_chancetoSpawn <= 60.0)) {
        lib840A968C_gf_MedicalDropPoolItemSpawn(PointFromId(3989));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MedicalSupply9_Init () {
    gt_MedicalSupply9 = TriggerCreate("gt_MedicalSupply9_Func");
    TriggerAddEventMapInit(gt_MedicalSupply9);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Medical Supply 10
//--------------------------------------------------------------------------------------------------
bool gt_MedicalSupply10_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_chancetoSpawn;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_chancetoSpawn = RandomFixed(0.0, 100.0);

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((lv_chancetoSpawn <= 60.0)) {
        lib840A968C_gf_MedicalDropPoolItemSpawn(PointFromId(3991));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MedicalSupply10_Init () {
    gt_MedicalSupply10 = TriggerCreate("gt_MedicalSupply10_Func");
    TriggerAddEventMapInit(gt_MedicalSupply10);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Medical Supply 11
//--------------------------------------------------------------------------------------------------
bool gt_MedicalSupply11_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_chancetoSpawn;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_chancetoSpawn = RandomFixed(0.0, 100.0);

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((lv_chancetoSpawn <= 60.0)) {
        lib840A968C_gf_MedicalDropPoolItemSpawn(PointFromId(4040));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MedicalSupply11_Init () {
    gt_MedicalSupply11 = TriggerCreate("gt_MedicalSupply11_Func");
    TriggerAddEventMapInit(gt_MedicalSupply11);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Medical Supply 12
//--------------------------------------------------------------------------------------------------
bool gt_MedicalSupply12_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_chancetoSpawn;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_chancetoSpawn = RandomFixed(0.0, 100.0);

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((lv_chancetoSpawn <= 60.0)) {
        lib840A968C_gf_MedicalDropPoolItemSpawn(PointFromId(4233));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MedicalSupply12_Init () {
    gt_MedicalSupply12 = TriggerCreate("gt_MedicalSupply12_Func");
    TriggerAddEventMapInit(gt_MedicalSupply12);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Medical Supply 13
//--------------------------------------------------------------------------------------------------
bool gt_MedicalSupply13_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_chancetoSpawn;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_chancetoSpawn = RandomFixed(0.0, 100.0);

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((lv_chancetoSpawn <= 60.0)) {
        lib840A968C_gf_MedicalDropPoolItemSpawn(PointFromId(4234));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MedicalSupply13_Init () {
    gt_MedicalSupply13 = TriggerCreate("gt_MedicalSupply13_Func");
    TriggerAddEventMapInit(gt_MedicalSupply13);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Medical Supply 14
//--------------------------------------------------------------------------------------------------
bool gt_MedicalSupply14_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_chancetoSpawn;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_chancetoSpawn = RandomFixed(0.0, 100.0);

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((lv_chancetoSpawn <= 60.0)) {
        lib840A968C_gf_MedicalDropPoolItemSpawn(PointFromId(4235));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MedicalSupply14_Init () {
    gt_MedicalSupply14 = TriggerCreate("gt_MedicalSupply14_Func");
    TriggerAddEventMapInit(gt_MedicalSupply14);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Medical Supply 15
//--------------------------------------------------------------------------------------------------
bool gt_MedicalSupply15_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_chancetoSpawn;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_chancetoSpawn = RandomFixed(0.0, 100.0);

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((lv_chancetoSpawn <= 60.0)) {
        lib840A968C_gf_MedicalDropPoolItemSpawn(PointFromId(4237));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MedicalSupply15_Init () {
    gt_MedicalSupply15 = TriggerCreate("gt_MedicalSupply15_Func");
    TriggerAddEventMapInit(gt_MedicalSupply15);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Medical Supply 16
//--------------------------------------------------------------------------------------------------
bool gt_MedicalSupply16_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_chancetoSpawn;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_chancetoSpawn = RandomFixed(0.0, 100.0);

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((lv_chancetoSpawn <= 60.0)) {
        lib840A968C_gf_MedicalDropPoolItemSpawn(PointFromId(4581));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MedicalSupply16_Init () {
    gt_MedicalSupply16 = TriggerCreate("gt_MedicalSupply16_Func");
    TriggerAddEventMapInit(gt_MedicalSupply16);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Medical Supply 17
//--------------------------------------------------------------------------------------------------
bool gt_MedicalSupply17_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_chancetoSpawn;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_chancetoSpawn = RandomFixed(0.0, 100.0);

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((lv_chancetoSpawn <= 60.0)) {
        lib840A968C_gf_MedicalDropPoolItemSpawn(PointFromId(4582));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MedicalSupply17_Init () {
    gt_MedicalSupply17 = TriggerCreate("gt_MedicalSupply17_Func");
    TriggerAddEventMapInit(gt_MedicalSupply17);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Medical Supply 18
//--------------------------------------------------------------------------------------------------
bool gt_MedicalSupply18_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_chancetoSpawn;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_chancetoSpawn = RandomFixed(0.0, 100.0);

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((lv_chancetoSpawn <= 60.0)) {
        lib840A968C_gf_MedicalDropPoolItemSpawn(PointFromId(4583));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MedicalSupply18_Init () {
    gt_MedicalSupply18 = TriggerCreate("gt_MedicalSupply18_Func");
    TriggerAddEventMapInit(gt_MedicalSupply18);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Medical Supply 19
//--------------------------------------------------------------------------------------------------
bool gt_MedicalSupply19_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_chancetoSpawn;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_chancetoSpawn = RandomFixed(0.0, 100.0);

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((lv_chancetoSpawn <= 60.0)) {
        lib840A968C_gf_MedicalDropPoolItemSpawn(PointFromId(4584));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MedicalSupply19_Init () {
    gt_MedicalSupply19 = TriggerCreate("gt_MedicalSupply19_Func");
    TriggerAddEventMapInit(gt_MedicalSupply19);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Medical Supply 20
//--------------------------------------------------------------------------------------------------
bool gt_MedicalSupply20_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_chancetoSpawn;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_chancetoSpawn = RandomFixed(0.0, 100.0);

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((lv_chancetoSpawn <= 60.0)) {
        lib840A968C_gf_MedicalDropPoolItemSpawn(PointFromId(4585));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MedicalSupply20_Init () {
    gt_MedicalSupply20 = TriggerCreate("gt_MedicalSupply20_Func");
    TriggerAddEventMapInit(gt_MedicalSupply20);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Medical Supply 21
//--------------------------------------------------------------------------------------------------
bool gt_MedicalSupply21_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_chancetoSpawn;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_chancetoSpawn = RandomFixed(0.0, 100.0);

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((lv_chancetoSpawn <= 60.0)) {
        lib840A968C_gf_MedicalDropPoolItemSpawn(PointFromId(4586));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MedicalSupply21_Init () {
    gt_MedicalSupply21 = TriggerCreate("gt_MedicalSupply21_Func");
    TriggerAddEventMapInit(gt_MedicalSupply21);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Medical Supply 22
//--------------------------------------------------------------------------------------------------
bool gt_MedicalSupply22_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_chancetoSpawn;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_chancetoSpawn = RandomFixed(0.0, 100.0);

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((lv_chancetoSpawn <= 60.0)) {
        lib840A968C_gf_MedicalDropPoolItemSpawn(PointFromId(4587));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MedicalSupply22_Init () {
    gt_MedicalSupply22 = TriggerCreate("gt_MedicalSupply22_Func");
    TriggerAddEventMapInit(gt_MedicalSupply22);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Medical Supply 23
//--------------------------------------------------------------------------------------------------
bool gt_MedicalSupply23_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_chancetoSpawn;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_chancetoSpawn = RandomFixed(0.0, 100.0);

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((lv_chancetoSpawn <= 60.0)) {
        lib840A968C_gf_MedicalDropPoolItemSpawn(PointFromId(4588));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MedicalSupply23_Init () {
    gt_MedicalSupply23 = TriggerCreate("gt_MedicalSupply23_Func");
    TriggerAddEventMapInit(gt_MedicalSupply23);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Medical Supply 24
//--------------------------------------------------------------------------------------------------
bool gt_MedicalSupply24_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_chancetoSpawn;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_chancetoSpawn = RandomFixed(0.0, 100.0);

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((lv_chancetoSpawn <= 60.0)) {
        lib840A968C_gf_MedicalDropPoolItemSpawn(PointFromId(4589));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MedicalSupply24_Init () {
    gt_MedicalSupply24 = TriggerCreate("gt_MedicalSupply24_Func");
    TriggerAddEventMapInit(gt_MedicalSupply24);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Medical Supply 25
//--------------------------------------------------------------------------------------------------
bool gt_MedicalSupply25_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_chancetoSpawn;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_chancetoSpawn = RandomFixed(0.0, 100.0);

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((lv_chancetoSpawn <= 60.0)) {
        lib840A968C_gf_MedicalDropPoolItemSpawn(PointFromId(4590));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MedicalSupply25_Init () {
    gt_MedicalSupply25 = TriggerCreate("gt_MedicalSupply25_Func");
    TriggerAddEventMapInit(gt_MedicalSupply25);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Flare 1
//--------------------------------------------------------------------------------------------------
bool gt_Flare1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_chancetoSpawn;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_chancetoSpawn = RandomFixed(0.0, 100.0);

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((lv_chancetoSpawn <= 75.0)) {
        lib840A968C_gf_FlareDropPoolItemSpawn(PointFromId(4595));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Flare1_Init () {
    gt_Flare1 = TriggerCreate("gt_Flare1_Func");
    TriggerAddEventMapInit(gt_Flare1);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Flare 2
//--------------------------------------------------------------------------------------------------
bool gt_Flare2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_chancetoSpawn;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_chancetoSpawn = RandomFixed(0.0, 100.0);

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((lv_chancetoSpawn <= 75.0)) {
        lib840A968C_gf_FlareDropPoolItemSpawn(PointFromId(4596));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Flare2_Init () {
    gt_Flare2 = TriggerCreate("gt_Flare2_Func");
    TriggerAddEventMapInit(gt_Flare2);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Flare 3
//--------------------------------------------------------------------------------------------------
bool gt_Flare3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_chancetoSpawn;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_chancetoSpawn = RandomFixed(0.0, 100.0);

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((lv_chancetoSpawn <= 75.0)) {
        lib840A968C_gf_FlareDropPoolItemSpawn(PointFromId(4597));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Flare3_Init () {
    gt_Flare3 = TriggerCreate("gt_Flare3_Func");
    TriggerAddEventMapInit(gt_Flare3);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Flare 4
//--------------------------------------------------------------------------------------------------
bool gt_Flare4_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_chancetoSpawn;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_chancetoSpawn = RandomFixed(0.0, 100.0);

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((lv_chancetoSpawn <= 75.0)) {
        lib840A968C_gf_FlareDropPoolItemSpawn(PointFromId(4598));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Flare4_Init () {
    gt_Flare4 = TriggerCreate("gt_Flare4_Func");
    TriggerAddEventMapInit(gt_Flare4);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Flare 5
//--------------------------------------------------------------------------------------------------
bool gt_Flare5_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_chancetoSpawn;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_chancetoSpawn = RandomFixed(0.0, 100.0);

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((lv_chancetoSpawn <= 75.0)) {
        lib840A968C_gf_FlareDropPoolItemSpawn(PointFromId(4599));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Flare5_Init () {
    gt_Flare5 = TriggerCreate("gt_Flare5_Func");
    TriggerAddEventMapInit(gt_Flare5);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Flare 6
//--------------------------------------------------------------------------------------------------
bool gt_Flare6_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_chancetoSpawn;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_chancetoSpawn = RandomFixed(0.0, 100.0);

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((lv_chancetoSpawn <= 75.0)) {
        lib840A968C_gf_FlareDropPoolItemSpawn(PointFromId(4600));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Flare6_Init () {
    gt_Flare6 = TriggerCreate("gt_Flare6_Func");
    TriggerAddEventMapInit(gt_Flare6);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Flare 7
//--------------------------------------------------------------------------------------------------
bool gt_Flare7_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_chancetoSpawn;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_chancetoSpawn = RandomFixed(0.0, 100.0);

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((lv_chancetoSpawn <= 75.0)) {
        lib840A968C_gf_FlareDropPoolItemSpawn(PointFromId(4601));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Flare7_Init () {
    gt_Flare7 = TriggerCreate("gt_Flare7_Func");
    TriggerAddEventMapInit(gt_Flare7);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Flare 8
//--------------------------------------------------------------------------------------------------
bool gt_Flare8_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_chancetoSpawn;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_chancetoSpawn = RandomFixed(0.0, 100.0);

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((lv_chancetoSpawn <= 75.0)) {
        lib840A968C_gf_FlareDropPoolItemSpawn(PointFromId(4602));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Flare8_Init () {
    gt_Flare8 = TriggerCreate("gt_Flare8_Func");
    TriggerAddEventMapInit(gt_Flare8);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Flare 9
//--------------------------------------------------------------------------------------------------
bool gt_Flare9_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_chancetoSpawn;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_chancetoSpawn = RandomFixed(0.0, 100.0);

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((lv_chancetoSpawn <= 75.0)) {
        lib840A968C_gf_FlareDropPoolItemSpawn(PointFromId(4603));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Flare9_Init () {
    gt_Flare9 = TriggerCreate("gt_Flare9_Func");
    TriggerAddEventMapInit(gt_Flare9);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Flare 10
//--------------------------------------------------------------------------------------------------
bool gt_Flare10_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_chancetoSpawn;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_chancetoSpawn = RandomFixed(0.0, 100.0);

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((lv_chancetoSpawn <= 75.0)) {
        lib840A968C_gf_FlareDropPoolItemSpawn(PointFromId(4604));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Flare10_Init () {
    gt_Flare10 = TriggerCreate("gt_Flare10_Func");
    TriggerAddEventMapInit(gt_Flare10);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Flare 11
//--------------------------------------------------------------------------------------------------
bool gt_Flare11_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_chancetoSpawn;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_chancetoSpawn = RandomFixed(0.0, 100.0);

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((lv_chancetoSpawn <= 75.0)) {
        lib840A968C_gf_FlareDropPoolItemSpawn(PointFromId(4605));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Flare11_Init () {
    gt_Flare11 = TriggerCreate("gt_Flare11_Func");
    TriggerAddEventMapInit(gt_Flare11);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Flare 12
//--------------------------------------------------------------------------------------------------
bool gt_Flare12_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_chancetoSpawn;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_chancetoSpawn = RandomFixed(0.0, 100.0);

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((lv_chancetoSpawn <= 75.0)) {
        lib840A968C_gf_FlareDropPoolItemSpawn(PointFromId(4606));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Flare12_Init () {
    gt_Flare12 = TriggerCreate("gt_Flare12_Func");
    TriggerAddEventMapInit(gt_Flare12);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Flare 13
//--------------------------------------------------------------------------------------------------
bool gt_Flare13_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_chancetoSpawn;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_chancetoSpawn = RandomFixed(0.0, 100.0);

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((lv_chancetoSpawn <= 75.0)) {
        lib840A968C_gf_FlareDropPoolItemSpawn(PointFromId(4608));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Flare13_Init () {
    gt_Flare13 = TriggerCreate("gt_Flare13_Func");
    TriggerAddEventMapInit(gt_Flare13);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Flare 14
//--------------------------------------------------------------------------------------------------
bool gt_Flare14_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_chancetoSpawn;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_chancetoSpawn = RandomFixed(0.0, 100.0);

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((lv_chancetoSpawn <= 75.0)) {
        lib840A968C_gf_FlareDropPoolItemSpawn(PointFromId(4609));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Flare14_Init () {
    gt_Flare14 = TriggerCreate("gt_Flare14_Func");
    TriggerAddEventMapInit(gt_Flare14);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ambient Attacks On Players
//--------------------------------------------------------------------------------------------------
bool gt_AmbientAttacksOnPlayers_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    AIAttackWaveUseGroup(lib1E3F036D_gv_zombiePlayer, UnitGroup(null, lib1E3F036D_gv_zombiePlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), RandomInt(15, 30)));
    AIAttackWaveSetTargetUnitGroup(lib1E3F036D_gv_zombiePlayer, lib840A968C_gf_GetMarineGroup());
    AIAttackWaveSend(lib1E3F036D_gv_zombiePlayer, 0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AmbientAttacksOnPlayers_Init () {
    gt_AmbientAttacksOnPlayers = TriggerCreate("gt_AmbientAttacksOnPlayers_Func");
    TriggerAddEventTimePeriodic(gt_AmbientAttacksOnPlayers, 30.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Infestor Killed
//--------------------------------------------------------------------------------------------------
bool gt_InfestorKilled_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib840A968C_gf_AwardTeamXP(10);
    lib840A968C_gf_AwardTeamMarineXP(50.0);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InfestorKilled_Init () {
    gt_InfestorKilled = TriggerCreate("gt_InfestorKilled_Func");
    TriggerEnable(gt_InfestorKilled, false);
    TriggerAddEventUnitDied(gt_InfestorKilled, UnitRefFromVariable("gv_infestor"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Infestor Start Mission
//--------------------------------------------------------------------------------------------------
bool gt_InfestorStartMission_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerDifficulty(1) != 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestorNOTD", 0, lib1E3F036D_gv_zombiePlayer, RegionRandomPoint(RegionFromId(16)));
    AISetUnitNotUsableInWaves(UnitLastCreated(), true);
    gv_infestor = UnitLastCreated();
    TriggerEnable(gt_InfestorKilled, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InfestorStartMission_Init () {
    gt_InfestorStartMission = TriggerCreate("gt_InfestorStartMission_Func");
    TriggerAddEventGeneric(gt_InfestorStartMission, lib840A968C_gv_intializeEvent);
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_RegisterMarineswithTriggers_Init();
    gt_IntializeArmoryGate_Init();
    gt_GamePath_Init();
    gt_SetBullies_Init();
    gt_RecruitArrival_Init();
    gt_DeadBodiesDiscovered_Init();
    gt_MilitaryHQSpotted_Init();
    gt_EnteringMilitaryBase_Init();
    gt_CustomsLockup_Init();
    gt_HeadtoCustomsLockup_Init();
    gt_WarzoneAmmoMarine4_Init();
    gt_WarzoneAmmoMarine3_Init();
    gt_WarzoneAmmoMarine2_Init();
    gt_WarzoneAmmoMarine1_Init();
    gt_WarzoneTransmission_Init();
    gt_SecurityGateTransmission_Init();
    gt_NormalArrival_Init();
    gt_ChiefStrassnerLoot_Init();
    gt_SergeantLeftyLoot_Init();
    gt_OfficerSprecklinLoot_Init();
    gt_SergeantAscalonLoot_Init();
    gt_Peacekeepers_Init();
    gt_PeriodicZombieAttacksPeacekeepers_Init();
    gt_PlayerReachesPeacekeepers_Init();
    gt_CivilianRescueBegins_Init();
    gt_PeriodicZombieAttacksCivilianRescue_Init();
    gt_PlayerRescuesCivilians_Init();
    gt_PlayersFailtoRescue_Init();
    gt_PlayerReturntoPeacekeeperHoldout_Init();
    gt_Holdout_Init();
    gt_ParatrooperLoot_Init();
    gt_StaffSergeantFenwickLoot_Init();
    gt_ExtractionBegin_Init();
    gt_PeriodicZombieAttacksCivilianExtraction_Init();
    gt_ExtractionEndSuccess_Init();
    gt_ExtractionEndFailure_Init();
    gt_ConvoyPing_Init();
    gt_EltradSpawn_Init();
    gt_EltradDeath_Init();
    gt_CommunicationMission_Init();
    gt_CommunicationArrayPlaced_Init();
    gt_CommunicationMissionEnd_Init();
    gt_ArmoryDoor_Init();
    gt_RestorePowerMission_Init();
    gt_TeamReachesReactor_Init();
    gt_SarbusSpawn_Init();
    gt_SarbusDeath_Init();
    gt_SarbusCorpseSpawn_Init();
    gt_InvestigationMissionUpdate_Init();
    gt_InvestigationMission_Init();
    gt_LabEntranceChatter_Init();
    gt_ReceptionAreaTransmission_Init();
    gt_InfestationResearchTransmission_Init();
    gt_WorkstationTX1_Init();
    gt_DissectionWorkstation_Init();
    gt_DemeterWorkstation_Init();
    gt_PoolviewingDeck_Init();
    gt_CharlieEscapeHole_Init();
    gt_CharliePen_Init();
    gt_InvestigationMissionIntialEnd_Init();
    gt_InvestigationMissionFinalEnd_Init();
    gt_TarionSpawn_Init();
    gt_TarionDeath_Init();
    gt_TarionHordes_Init();
    gt_MonolithBegin_Init();
    gt_RentodusSpawn_Init();
    gt_RentodusDeath_Init();
    gt_RentodusMobs_Init();
    gt_AmmoModification_Init();
    gt_Magazine_Init();
    gt_PeackeeperWeapons_Init();
    gt_Lab1_Init();
    gt_Lab2_Init();
    gt_Lab3_Init();
    gt_FieldLight1_Init();
    gt_FieldLight2_Init();
    gt_FieldLight3_Init();
    gt_FieldLight4_Init();
    gt_MedicalSupply1_Init();
    gt_MedicalSupply2_Init();
    gt_MedicalSupply3_Init();
    gt_MedicalSupply4_Init();
    gt_MedicalSupply5_Init();
    gt_MedicalSupply6_Init();
    gt_MedicalSupply7_Init();
    gt_MedicalSupply8_Init();
    gt_MedicalSupply9_Init();
    gt_MedicalSupply10_Init();
    gt_MedicalSupply11_Init();
    gt_MedicalSupply12_Init();
    gt_MedicalSupply13_Init();
    gt_MedicalSupply14_Init();
    gt_MedicalSupply15_Init();
    gt_MedicalSupply16_Init();
    gt_MedicalSupply17_Init();
    gt_MedicalSupply18_Init();
    gt_MedicalSupply19_Init();
    gt_MedicalSupply20_Init();
    gt_MedicalSupply21_Init();
    gt_MedicalSupply22_Init();
    gt_MedicalSupply23_Init();
    gt_MedicalSupply24_Init();
    gt_MedicalSupply25_Init();
    gt_Flare1_Init();
    gt_Flare2_Init();
    gt_Flare3_Init();
    gt_Flare4_Init();
    gt_Flare5_Init();
    gt_Flare6_Init();
    gt_Flare7_Init();
    gt_Flare8_Init();
    gt_Flare9_Init();
    gt_Flare10_Init();
    gt_Flare11_Init();
    gt_Flare12_Init();
    gt_Flare13_Init();
    gt_Flare14_Init();
    gt_AmbientAttacksOnPlayers_Init();
    gt_InfestorKilled_Init();
    gt_InfestorStartMission_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
